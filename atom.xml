<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[SongLee's Blog]]></title>
  <subtitle><![CDATA[李松]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-05-10T10:46:18.179Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Song Lee]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[AES加密算法的C++实现]]></title>
    <link href="http://yoursite.com/2014/12/13/aes-encrypt/"/>
    <id>http://yoursite.com/2014/12/13/aes-encrypt/</id>
    <published>2014-12-13T06:47:48.000Z</published>
    <updated>2015-05-10T10:46:18.179Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要：</strong>作为新一代的加密标准，AES 旨在取代 DES（请看《<a href="http://songlee24.github.io/2014/12/06/des-encrypt/" target="_blank" rel="external">DES加密算法的C++实现</a>》），以适应当今分布式开放网络对数据加密安全性的要求。本文在分析了 AES 加密原理的基础上着重说明了算法实现的具体步骤，并用 C++ 实现了对文件的加密和解密。</p>
<h3 id="一、AES_介绍">一、AES 介绍</h3><p><strong>AES（高级加密标准，Advanced Encryption Standard）</strong>，在密码学中又称 Rijndael 加密法，是美国联邦政府采用的一种分组加密标准。这个标准用来替代原先的 DES，目前已经广为全世界所使用，成为对称密钥算法中最流行的算法之一。<a id="more"></a></p>
<p>在 AES 出现之前，最常用的对称密钥算法是 <a href="http://songlee24.github.io/2014/12/06/des-encrypt/" target="_blank" rel="external"><strong>DES 加密算法</strong></a>，它在 1977 年被公布成为美国政府的商用加密标准。DES 的主要问题是密钥长度较短，渐渐不适合于分布式开放网络对数据加密安全性的要求。因此，1998年美国政府决定不再继续延用 DES 作为联邦加密标准，并发起了征集 AES 候选算法的活动。征集活动对 AES 的基本要求是： 比三重DES快、至少与三重DES一样安全、数据分组长度为128比特、密钥长度为128/192/256比特。</p>
<p>经过三年多的甄选，比利时的密码学家所设计的 Rijndael 算法最终脱颖而出，成为新一代的高级加密标准，并于 2001 年由美国国家标准与技术研究院（NIST）发布于 <a href="http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf" target="_blank" rel="external">FIPS PUB 197</a>。</p>
<h3 id="二、AES_算法原理">二、AES 算法原理</h3><p>AES算法（即 Rijndael 算法）是一个对称分组密码算法。数据分组长度必须是 <strong>128 bits</strong>，使用的密钥长度为 <strong>128，192</strong> 或 <strong>256 bits</strong>。对于三种不同密钥长度的 AES 算法，分别称为<strong>“AES-128”、“AES-192”、“AES-256”</strong>。（Rijndael 的设计还可以处理其它的分组长度和密钥长度，但 AES 标准中没有采用）</p>
<p>下图是 AES 加密解密的整体流程图：</p>
<p><img src="http://img.blog.csdn.net/20141213142652421?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>这里我们需要知道3个符号：<code>Nb</code>—— 状态 State 包含的列（32-bit 字）的个数，也就是说 Nb=4；<code>Nk</code>—— 密钥包含的 32-bit 字的个数，也就是说 Nk=4，6 或 8；<code>Nr</code>—— 加密的轮数，对于不同密钥长度，轮数不一样，具体如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20141213142619522?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>下面分为密钥扩展、分组加密、分组解密三个部分来讲 AES 算法，我会尽可能地简明扼要，若还有不懂的，请自行 Google。</p>
<h2 id="1）密钥扩展">1）密钥扩展</h2><p>AES 算法通过密钥扩展程序（Key Expansion）将用户输入的密钥 K 扩展生成 <code>Nb(Nr+1)</code>个字，存放在一个线性数组<code>w[Nb*(Nr+1)]</code>中。具体如下：</p>
<ol>
<li><p>位置变换函数<code>RotWord()</code>，接受一个字 [a0, a1, a2, a3] 作为输入，循环左移一个字节后输出 [a1, a2, a3, a0]。</p>
</li>
<li><p>S盒变换函数<code>SubWord()</code>，接受一个字 [a0, a1, a2, a3] 作为输入。S盒是一个16x16的表，其中每一个元素是一个字节。对于输入的每一个字节，前四位组成十六进制数 x 作为行号，后四位组成的十六进制数 y 作为列号，查找表中对应的值。最后函数输出 4 个新字节组成的 32-bit 字。</p>
</li>
<li><p>轮常数<code>Rcon[]</code>，如何计算的就不说了，直接把它当做常量数组。</p>
</li>
<li><p>扩展密钥数组<code>w[]</code>的前 Nk 个元素就是外部密钥 K，以后的元素<code>w[i]</code>等于它前一个元素<code>w[i-1]</code>与前第 Nk 个元素<code>w[i-Nk]</code>的异或，即<code>w[i] = w[i-1] XOR w[i-Nk]</code>；但若 i 为 Nk 的倍数，则<code>w[i] = w[i-Nk] XOR SubWord(RotWord(w[i-1])) XOR Rcon[i/Nk-1]</code>。</p>
</li>
</ol>
<p>注意，上面的第四步说明适合于 AES-128 和 AES-192，详细的伪代码如下：</p>
<p><img src="http://img.blog.csdn.net/20141213142747609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>密钥扩展程序的 C++ 代码（AES-128）：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">bitset</span>&lt;8&gt; byte;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">bitset</span>&lt;32&gt; word;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Nr = <span class="number">10</span>;  <span class="comment">// AES-128需要 10 轮加密</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Nk = <span class="number">4</span>;   <span class="comment">// Nk 表示输入密钥的 word 个数</span></span><br><span class="line"></span><br><span class="line">byte S_Box[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">	&#123;<span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>,</span><br><span class="line">	 <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, </span><br><span class="line">	 <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, </span><br><span class="line">	 <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, </span><br><span class="line">	 <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, </span><br><span class="line">	 <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, </span><br><span class="line">	 <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, </span><br><span class="line">	 <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, </span><br><span class="line">	 <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, </span><br><span class="line">	 <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, </span><br><span class="line">	 <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, </span><br><span class="line">	 <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, </span><br><span class="line">	 <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, </span><br><span class="line">	 <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, </span><br><span class="line">	 <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, </span><br><span class="line">	 <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, </span><br><span class="line">	 <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮常数，密钥扩展中用到。（AES-128只需要10轮）</span></span><br><span class="line">word Rcon[<span class="number">10</span>] = &#123;<span class="number">0x01000000</span>, <span class="number">0x02000000</span>, <span class="number">0x04000000</span>, <span class="number">0x08000000</span>, <span class="number">0x10000000</span>, </span><br><span class="line">				 <span class="number">0x20000000</span>, <span class="number">0x40000000</span>, <span class="number">0x80000000</span>, <span class="number">0x1b000000</span>, <span class="number">0x36000000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 将4个 byte 转换为一个 word.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">word <span class="title">Word</span><span class="params">(byte&amp; k1, byte&amp; k2, byte&amp; k3, byte&amp; k4)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="function">word <span class="title">result</span><span class="params">(0x00000000)</span></span>;</span><br><span class="line">	word temp;</span><br><span class="line">	temp = k1.to_ulong();  <span class="comment">// K1</span></span><br><span class="line">	temp &lt;&lt;= <span class="number">24</span>;</span><br><span class="line">	result |= temp;</span><br><span class="line">	temp = k2.to_ulong();  <span class="comment">// K2</span></span><br><span class="line">	temp &lt;&lt;= <span class="number">16</span>;</span><br><span class="line">	result |= temp;</span><br><span class="line">	temp = k3.to_ulong();  <span class="comment">// K3</span></span><br><span class="line">	temp &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">	result |= temp;</span><br><span class="line">	temp = k4.to_ulong();  <span class="comment">// K4</span></span><br><span class="line">	result |= temp;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  按字节 循环左移一位</span><br><span class="line"> *  即把[a0, a1, a2, a3]变成[a1, a2, a3, a0]</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">word <span class="title">RotWord</span><span class="params">(word&amp; rw)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	word high = rw &lt;&lt; <span class="number">8</span>;</span><br><span class="line">	word low = rw &gt;&gt; <span class="number">24</span>;</span><br><span class="line">	<span class="keyword">return</span> high | low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  对输入word中的每一个字节进行S-盒变换</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">word <span class="title">SubWord</span><span class="params">(word&amp; sw)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	word temp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i+=<span class="number">8</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> row = sw[i+<span class="number">7</span>]*<span class="number">8</span> + sw[i+<span class="number">6</span>]*<span class="number">4</span> + sw[i+<span class="number">5</span>]*<span class="number">2</span> + sw[i+<span class="number">4</span>];</span><br><span class="line">		<span class="keyword">int</span> col = sw[i+<span class="number">3</span>]*<span class="number">8</span> + sw[i+<span class="number">2</span>]*<span class="number">4</span> + sw[i+<span class="number">1</span>]*<span class="number">2</span> + sw[i];</span><br><span class="line">		byte val = S_Box[row][col];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; ++j)</span><br><span class="line">			temp[i+j] = val[j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  密钥扩展函数 - 对128位密钥进行扩展得到 w[4*(Nr+1)]</span><br><span class="line"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KeyExpansion</span><span class="params">(byte key[4*Nk], word w[4*(Nr+1)</span>])</span><br><span class="line"></span>&#123;</span><br><span class="line">	word temp;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// w[]的前4个就是输入的key</span></span><br><span class="line">	<span class="keyword">while</span>(i &lt; Nk) </span><br><span class="line">	&#123;</span><br><span class="line">		w[i] = Word(key[<span class="number">4</span>*i], key[<span class="number">4</span>*i+<span class="number">1</span>], key[<span class="number">4</span>*i+<span class="number">2</span>], key[<span class="number">4</span>*i+<span class="number">3</span>]);</span><br><span class="line">		++i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	i = Nk;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(i &lt; <span class="number">4</span>*(Nr+<span class="number">1</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		temp = w[i-<span class="number">1</span>]; <span class="comment">// 记录前一个word</span></span><br><span class="line">		<span class="keyword">if</span>(i % Nk == <span class="number">0</span>)</span><br><span class="line">			w[i] = w[i-Nk] ^ SubWord(RotWord(temp)) ^ Rcon[i/Nk-<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">			w[i] = w[i-Nk] ^ temp;</span><br><span class="line">		++i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	byte key[<span class="number">16</span>] = &#123;<span class="number">0x2b</span>, <span class="number">0x7e</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, </span><br><span class="line">				    <span class="number">0x28</span>, <span class="number">0xae</span>, <span class="number">0xd2</span>, <span class="number">0xa6</span>, </span><br><span class="line">				    <span class="number">0xab</span>, <span class="number">0xf7</span>, <span class="number">0x15</span>, <span class="number">0x88</span>, </span><br><span class="line">				    <span class="number">0x09</span>, <span class="number">0xcf</span>, <span class="number">0x4f</span>, <span class="number">0x3c</span>&#125;;</span><br><span class="line"></span><br><span class="line">	word w[<span class="number">4</span>*(Nr+<span class="number">1</span>)];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"KEY IS: "</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; ++i)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; key[i].to_ulong() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	KeyExpansion(key, w);</span><br><span class="line">	<span class="comment">// 测试</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>*(Nr+<span class="number">1</span>); ++i)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"w["</span> &lt;&lt; dec &lt;&lt; i &lt;&lt; <span class="string">"] = "</span> &lt;&lt; hex &lt;&lt; w[i].to_ulong() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试输出结果：</p>
<p><img src="http://img.blog.csdn.net/20141213143023031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h2 id="2）加密">2）加密</h2><p>根据 AES 加密的整体流程图（本文开头），可以得出伪代码如下：</p>
<p><img src="http://img.blog.csdn.net/20141213143008999?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>从伪代码描述中可以看出，AES 加密时涉及到的子程序有<code>SubBytes()</code>、<code>ShiftRows()</code>、<code>MixColumns()</code>和<code>AddRoundKey()</code>。下面我们一个一个进行介绍：</p>
<h3 id="①_S盒变换-SubBytes()">① S盒变换-SubBytes()</h3><p>在密钥扩展部分已经讲过了，S盒是一个 16 行 16 列的表，表中每个元素都是一个字节。S盒变换很简单：函数<code>SubBytes()</code>接受一个 4x4 的字节矩阵作为输入，对其中的每个字节，前四位组成十六进制数 x 作为行号，后四位组成的十六进制数 y 作为列号，查找表中对应的值替换原来位置上的字节。</p>
<h3 id="②_行变换-ShiftRows()">② 行变换-ShiftRows()</h3><p>行变换也很简单，它仅仅是将矩阵的每一行以字节为单位<strong>循环移位</strong>：第一行不变，第二行左移一位，第三行左移两位，第四行左移三位。如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20141213143028998?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="③_列变换-MixColumns()">③ 列变换-MixColumns()</h3><p>函数<code>MixColumns()</code>同样接受一个 4x4 的字节矩阵作为输入，并对矩阵进行逐列变换，变换方式如下：</p>
<p><img src="http://img.blog.csdn.net/20141213143045019?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>注意公式中用到的乘法是<a href="http://en.wikipedia.org/wiki/Finite_field_arithmetic#Multiplication" target="_blank" rel="external">伽罗华域（GF，有限域）上的乘法</a>，高级加密标准文档 <a href="http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf" target="_blank" rel="external">fips-197</a> 上有讲，如果还是不懂，请自行Google。</p>
<p><img src="http://img.blog.csdn.net/20141213143147796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="④_与扩展密钥的异或-AddRoundKey()">④ 与扩展密钥的异或-AddRoundKey()</h3><p>扩展密钥只参与了这一步。根据当前加密的轮数，用<code>w[]</code>中的 4 个扩展密钥与矩阵的 4 个列进行按位异或。如下图：</p>
<p><img src="http://img.blog.csdn.net/20141213143206703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>好了，到这里 AES 加密的各个部分就讲完了。算法实现的 C++ 源码在文章后面第三部分。</p>
<h2 id="3）解密">3）解密</h2><p>根据 AES 解密的整体流程图（本文开头），可以得出伪代码如下：</p>
<p><img src="http://img.blog.csdn.net/20141213143139307?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>从伪代码可以看出，我们需要分别实现 S 盒变换、行变换和列变换的逆变换<code>InvShiftRows()</code>、<code>InvSubBytes()</code>和<code>InvMixColumns()</code>。下面就简单的讲一下这三个逆变换：</p>
<h3 id="①_逆行变换-InvShiftRows()">① 逆行变换-InvShiftRows()</h3><p>上面讲到<code>ShiftRows()</code>是对矩阵的每一行进行循环左移，所以<code>InvShiftRows()</code>是对矩阵每一行进行循环右移。</p>
<p><img src="http://img.blog.csdn.net/20141213143154611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="②_逆_S_盒变换-InvSubBytes()">② 逆 S 盒变换-InvSubBytes()</h3><p>与 S 盒变换一样，也是查表，查表的方式也一样，只不过查的是另外一个置换表（S-Box的逆表）。</p>
<h3 id="③_逆列变换-InvMixColumns()">③ 逆列变换-InvMixColumns()</h3><p>与列变换的方式一样，只不过计算公式的系数矩阵发生了变化。如下图：</p>
<p><img src="http://img.blog.csdn.net/20141213143306000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>好了，AES 解密到这里也讲完了。只要写出三个逆变换的函数，然后根据伪代码就很容易实现 AES 解密算法了。</p>
<h3 id="三、C++实现">三、C++实现</h3><p>下面我用 C++ 实现 AES 的加密和解密算法，并实现了对文件的加密和解密。这里我使用 C++ STL 的<code>bitset</code>定义了两个类型：<code>byte</code>和<code>word</code>。需要提到的是，对于有限域上的乘法，我们既可以通过查表（6个结果表），也可以写一个函数来实现。当然，查表的效率会更高，但考虑到贴代码，这里我就用一个函数来实现的。</p>
<p>下面是 AES-128 对一个 128 位数据加密和解密的源代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************  </span><br><span class="line">    &gt; File Name: AES.cpp </span><br><span class="line">    &gt; Author: SongLee  </span><br><span class="line">    &gt; E-mail: lisong.shine@qq.com  </span><br><span class="line">    &gt; Created Time: 2014年12月12日 星期五 20时15分50秒  </span><br><span class="line">    &gt; Personal Blog: http://songlee24.github.com  </span><br><span class="line"> ************************************************************************/</span> </span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">bitset</span>&lt;8&gt; byte;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">bitset</span>&lt;32&gt; word;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Nr = <span class="number">10</span>;  <span class="comment">// AES-128需要 10 轮加密</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Nk = <span class="number">4</span>;   <span class="comment">// Nk 表示输入密钥的 word 个数</span></span><br><span class="line"></span><br><span class="line">byte S_Box[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">	&#123;<span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, </span><br><span class="line">	 <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, </span><br><span class="line">	 <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, </span><br><span class="line">	 <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, </span><br><span class="line">	 <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, </span><br><span class="line">	 <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, </span><br><span class="line">	 <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, </span><br><span class="line">	 <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, </span><br><span class="line">	 <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, </span><br><span class="line">	 <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, </span><br><span class="line">	 <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, </span><br><span class="line">	 <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, </span><br><span class="line">	 <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, </span><br><span class="line">	 <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, </span><br><span class="line">	 <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, </span><br><span class="line">	 <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, </span><br><span class="line">	 <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">byte Inv_S_Box[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">	&#123;<span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, </span><br><span class="line">	 <span class="number">0xBF</span>, <span class="number">0x40</span>, <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0xD7</span>, <span class="number">0xFB</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0x87</span>, </span><br><span class="line">	 <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>, <span class="number">0xE9</span>, <span class="number">0xCB</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>, </span><br><span class="line">	 <span class="number">0xEE</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xFA</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x08</span>, <span class="number">0x2E</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, </span><br><span class="line">	 <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>, <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0xF6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, </span><br><span class="line">	 <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFD</span>, <span class="number">0xED</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, </span><br><span class="line">	 <span class="number">0x5E</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x84</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, </span><br><span class="line">	 <span class="number">0xF7</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, </span><br><span class="line">	 <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x3A</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>, </span><br><span class="line">	 <span class="number">0x97</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>, <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, </span><br><span class="line">	 <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, </span><br><span class="line">	 <span class="number">0x6F</span>, <span class="number">0xB7</span>, <span class="number">0x62</span>, <span class="number">0x0E</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xFC</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>, <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, </span><br><span class="line">	 <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFE</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>, <span class="number">0x5A</span>, <span class="number">0xF4</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>, </span><br><span class="line">	 <span class="number">0xB1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, </span><br><span class="line">	 <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>, <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEF</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>, <span class="number">0xF5</span>, <span class="number">0xB0</span>, </span><br><span class="line">	 <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, </span><br><span class="line">	 <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮常数，密钥扩展中用到。（AES-128只需要10轮）</span></span><br><span class="line">word Rcon[<span class="number">10</span>] = &#123;<span class="number">0x01000000</span>, <span class="number">0x02000000</span>, <span class="number">0x04000000</span>, <span class="number">0x08000000</span>, <span class="number">0x10000000</span>, </span><br><span class="line">				 <span class="number">0x20000000</span>, <span class="number">0x40000000</span>, <span class="number">0x80000000</span>, <span class="number">0x1b000000</span>, <span class="number">0x36000000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span>  </span><br><span class="line"><span class="comment">/*                                                                    */</span>  </span><br><span class="line"><span class="comment">/*                              AES算法实现                           */</span>  </span><br><span class="line"><span class="comment">/*                                                                    */</span>  </span><br><span class="line"><span class="comment">/**********************************************************************/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************下面是加密的变换函数**********************/</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  S盒变换 - 前4位为行号，后4位为列号</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SubBytes</span><span class="params">(byte mtx[4*4])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> row = mtx[i][<span class="number">7</span>]*<span class="number">8</span> + mtx[i][<span class="number">6</span>]*<span class="number">4</span> + mtx[i][<span class="number">5</span>]*<span class="number">2</span> + mtx[i][<span class="number">4</span>];</span><br><span class="line">		<span class="keyword">int</span> col = mtx[i][<span class="number">3</span>]*<span class="number">8</span> + mtx[i][<span class="number">2</span>]*<span class="number">4</span> + mtx[i][<span class="number">1</span>]*<span class="number">2</span> + mtx[i][<span class="number">0</span>];</span><br><span class="line">		mtx[i] = S_Box[row][col];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  行变换 - 按字节循环移位</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShiftRows</span><span class="params">(byte mtx[4*4])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">// 第二行循环左移一位</span></span><br><span class="line">	byte temp = mtx[<span class="number">4</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; ++i)</span><br><span class="line">		mtx[i+<span class="number">4</span>] = mtx[i+<span class="number">5</span>];</span><br><span class="line">	mtx[<span class="number">7</span>] = temp;</span><br><span class="line">	<span class="comment">// 第三行循环左移两位</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		temp = mtx[i+<span class="number">8</span>];</span><br><span class="line">		mtx[i+<span class="number">8</span>] = mtx[i+<span class="number">10</span>];</span><br><span class="line">		mtx[i+<span class="number">10</span>] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 第四行循环左移三位</span></span><br><span class="line">	temp = mtx[<span class="number">15</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&gt;<span class="number">0</span>; --i)</span><br><span class="line">		mtx[i+<span class="number">12</span>] = mtx[i+<span class="number">11</span>];</span><br><span class="line">	mtx[<span class="number">12</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  有限域上的乘法 GF(2^8)</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">byte <span class="title">GFMul</span><span class="params">(byte a, byte b)</span> </span>&#123; </span><br><span class="line">	byte p = <span class="number">0</span>;</span><br><span class="line">	byte hi_bit_set;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> counter = <span class="number">0</span>; counter &lt; <span class="number">8</span>; counter++) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((b &amp; byte(<span class="number">1</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line">			p ^= a;</span><br><span class="line">		&#125;</span><br><span class="line">		hi_bit_set = (byte) (a &amp; byte(<span class="number">0x80</span>));</span><br><span class="line">		a &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (hi_bit_set != <span class="number">0</span>) &#123;</span><br><span class="line">			a ^= <span class="number">0x1b</span>; <span class="comment">/* x^8 + x^4 + x^3 + x + 1 */</span></span><br><span class="line">		&#125;</span><br><span class="line">		b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  列变换</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MixColumns</span><span class="params">(byte mtx[4*4])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	byte arr[<span class="number">4</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; ++j)</span><br><span class="line">			arr[j] = mtx[i+j*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">		mtx[i] = GFMul(<span class="number">0x02</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x03</span>, arr[<span class="number">1</span>]) ^ arr[<span class="number">2</span>] ^ arr[<span class="number">3</span>];</span><br><span class="line">		mtx[i+<span class="number">4</span>] = arr[<span class="number">0</span>] ^ GFMul(<span class="number">0x02</span>, arr[<span class="number">1</span>]) ^ GFMul(<span class="number">0x03</span>, arr[<span class="number">2</span>]) ^ arr[<span class="number">3</span>];</span><br><span class="line">		mtx[i+<span class="number">8</span>] = arr[<span class="number">0</span>] ^ arr[<span class="number">1</span>] ^ GFMul(<span class="number">0x02</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x03</span>, arr[<span class="number">3</span>]);</span><br><span class="line">		mtx[i+<span class="number">12</span>] = GFMul(<span class="number">0x03</span>, arr[<span class="number">0</span>]) ^ arr[<span class="number">1</span>] ^ arr[<span class="number">2</span>] ^ GFMul(<span class="number">0x02</span>, arr[<span class="number">3</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  轮密钥加变换 - 将每一列与扩展密钥进行异或</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddRoundKey</span><span class="params">(byte mtx[4*4], word k[4])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		word k1 = k[i] &gt;&gt; <span class="number">24</span>;</span><br><span class="line">		word k2 = (k[i] &lt;&lt; <span class="number">8</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">		word k3 = (k[i] &lt;&lt; <span class="number">16</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">		word k4 = (k[i] &lt;&lt; <span class="number">24</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">		</span><br><span class="line">		mtx[i] = mtx[i] ^ byte(k1.to_ulong());</span><br><span class="line">		mtx[i+<span class="number">4</span>] = mtx[i+<span class="number">4</span>] ^ byte(k2.to_ulong());</span><br><span class="line">		mtx[i+<span class="number">8</span>] = mtx[i+<span class="number">8</span>] ^ byte(k3.to_ulong());</span><br><span class="line">		mtx[i+<span class="number">12</span>] = mtx[i+<span class="number">12</span>] ^ byte(k4.to_ulong());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************下面是解密的逆变换函数***********************/</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  逆S盒变换</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvSubBytes</span><span class="params">(byte mtx[4*4])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> row = mtx[i][<span class="number">7</span>]*<span class="number">8</span> + mtx[i][<span class="number">6</span>]*<span class="number">4</span> + mtx[i][<span class="number">5</span>]*<span class="number">2</span> + mtx[i][<span class="number">4</span>];</span><br><span class="line">		<span class="keyword">int</span> col = mtx[i][<span class="number">3</span>]*<span class="number">8</span> + mtx[i][<span class="number">2</span>]*<span class="number">4</span> + mtx[i][<span class="number">1</span>]*<span class="number">2</span> + mtx[i][<span class="number">0</span>];</span><br><span class="line">		mtx[i] = Inv_S_Box[row][col];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  逆行变换 - 以字节为单位循环右移</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvShiftRows</span><span class="params">(byte mtx[4*4])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">// 第二行循环右移一位</span></span><br><span class="line">	byte temp = mtx[<span class="number">7</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&gt;<span class="number">0</span>; --i)</span><br><span class="line">		mtx[i+<span class="number">4</span>] = mtx[i+<span class="number">3</span>];</span><br><span class="line">	mtx[<span class="number">4</span>] = temp;</span><br><span class="line">	<span class="comment">// 第三行循环右移两位</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		temp = mtx[i+<span class="number">8</span>];</span><br><span class="line">		mtx[i+<span class="number">8</span>] = mtx[i+<span class="number">10</span>];</span><br><span class="line">		mtx[i+<span class="number">10</span>] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 第四行循环右移三位</span></span><br><span class="line">	temp = mtx[<span class="number">12</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; ++i)</span><br><span class="line">		mtx[i+<span class="number">12</span>] = mtx[i+<span class="number">13</span>];</span><br><span class="line">	mtx[<span class="number">15</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvMixColumns</span><span class="params">(byte mtx[4*4])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	byte arr[<span class="number">4</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; ++j)</span><br><span class="line">			arr[j] = mtx[i+j*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">		mtx[i] = GFMul(<span class="number">0x0e</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x0b</span>, arr[<span class="number">1</span>]) </span><br><span class="line">			^ GFMul(<span class="number">0x0d</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x09</span>, arr[<span class="number">3</span>]);</span><br><span class="line">		mtx[i+<span class="number">4</span>] = GFMul(<span class="number">0x09</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x0e</span>, arr[<span class="number">1</span>]) </span><br><span class="line">			^ GFMul(<span class="number">0x0b</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x0d</span>, arr[<span class="number">3</span>]);</span><br><span class="line">		mtx[i+<span class="number">8</span>] = GFMul(<span class="number">0x0d</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x09</span>, arr[<span class="number">1</span>]) </span><br><span class="line">			^ GFMul(<span class="number">0x0e</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x0b</span>, arr[<span class="number">3</span>]);</span><br><span class="line">		mtx[i+<span class="number">12</span>] = GFMul(<span class="number">0x0b</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x0d</span>, arr[<span class="number">1</span>]) </span><br><span class="line">			^ GFMul(<span class="number">0x09</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x0e</span>, arr[<span class="number">3</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************下面是密钥扩展部分***********************/</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 将4个 byte 转换为一个 word.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">word <span class="title">Word</span><span class="params">(byte&amp; k1, byte&amp; k2, byte&amp; k3, byte&amp; k4)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="function">word <span class="title">result</span><span class="params">(0x00000000)</span></span>;</span><br><span class="line">	word temp;</span><br><span class="line">	temp = k1.to_ulong();  <span class="comment">// K1</span></span><br><span class="line">	temp &lt;&lt;= <span class="number">24</span>;</span><br><span class="line">	result |= temp;</span><br><span class="line">	temp = k2.to_ulong();  <span class="comment">// K2</span></span><br><span class="line">	temp &lt;&lt;= <span class="number">16</span>;</span><br><span class="line">	result |= temp;</span><br><span class="line">	temp = k3.to_ulong();  <span class="comment">// K3</span></span><br><span class="line">	temp &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">	result |= temp;</span><br><span class="line">	temp = k4.to_ulong();  <span class="comment">// K4</span></span><br><span class="line">	result |= temp;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  按字节 循环左移一位</span><br><span class="line"> *  即把[a0, a1, a2, a3]变成[a1, a2, a3, a0]</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">word <span class="title">RotWord</span><span class="params">(word&amp; rw)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	word high = rw &lt;&lt; <span class="number">8</span>;</span><br><span class="line">	word low = rw &gt;&gt; <span class="number">24</span>;</span><br><span class="line">	<span class="keyword">return</span> high | low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  对输入word中的每一个字节进行S-盒变换</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">word <span class="title">SubWord</span><span class="params">(word&amp; sw)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	word temp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i+=<span class="number">8</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> row = sw[i+<span class="number">7</span>]*<span class="number">8</span> + sw[i+<span class="number">6</span>]*<span class="number">4</span> + sw[i+<span class="number">5</span>]*<span class="number">2</span> + sw[i+<span class="number">4</span>];</span><br><span class="line">		<span class="keyword">int</span> col = sw[i+<span class="number">3</span>]*<span class="number">8</span> + sw[i+<span class="number">2</span>]*<span class="number">4</span> + sw[i+<span class="number">1</span>]*<span class="number">2</span> + sw[i];</span><br><span class="line">		byte val = S_Box[row][col];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; ++j)</span><br><span class="line">			temp[i+j] = val[j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  密钥扩展函数 - 对128位密钥进行扩展得到 w[4*(Nr+1)]</span><br><span class="line"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KeyExpansion</span><span class="params">(byte key[4*Nk], word w[4*(Nr+1)</span>])</span><br><span class="line"></span>&#123;</span><br><span class="line">	word temp;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// w[]的前4个就是输入的key</span></span><br><span class="line">	<span class="keyword">while</span>(i &lt; Nk) </span><br><span class="line">	&#123;</span><br><span class="line">		w[i] = Word(key[<span class="number">4</span>*i], key[<span class="number">4</span>*i+<span class="number">1</span>], key[<span class="number">4</span>*i+<span class="number">2</span>], key[<span class="number">4</span>*i+<span class="number">3</span>]);</span><br><span class="line">		++i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	i = Nk;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(i &lt; <span class="number">4</span>*(Nr+<span class="number">1</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		temp = w[i-<span class="number">1</span>]; <span class="comment">// 记录前一个word</span></span><br><span class="line">		<span class="keyword">if</span>(i % Nk == <span class="number">0</span>)</span><br><span class="line">			w[i] = w[i-Nk] ^ SubWord(RotWord(temp)) ^ Rcon[i/Nk-<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">			w[i] = w[i-Nk] ^ temp;</span><br><span class="line">		++i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************下面是加密和解密函数**************************/</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  加密</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span><span class="params">(byte in[4*4], word w[4*(Nr+1)</span>])</span><br><span class="line"></span>&#123;</span><br><span class="line">	word key[<span class="number">4</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i)</span><br><span class="line">		key[i] = w[i];</span><br><span class="line">	AddRoundKey(in, key);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> round=<span class="number">1</span>; round&lt;Nr; ++round)</span><br><span class="line">	&#123;</span><br><span class="line">		SubBytes(in);</span><br><span class="line">		ShiftRows(in);</span><br><span class="line">		MixColumns(in);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i)</span><br><span class="line">			key[i] = w[<span class="number">4</span>*round+i];</span><br><span class="line">		AddRoundKey(in, key);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	SubBytes(in);</span><br><span class="line">	ShiftRows(in);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i)</span><br><span class="line">		key[i] = w[<span class="number">4</span>*Nr+i];</span><br><span class="line">	AddRoundKey(in, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  解密</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(byte in[4*4], word w[4*(Nr+1)</span>])</span><br><span class="line"></span>&#123;</span><br><span class="line">	word key[<span class="number">4</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i)</span><br><span class="line">		key[i] = w[<span class="number">4</span>*Nr+i];</span><br><span class="line">	AddRoundKey(in, key);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> round=Nr-<span class="number">1</span>; round&gt;<span class="number">0</span>; --round)</span><br><span class="line">	&#123;</span><br><span class="line">		InvShiftRows(in);</span><br><span class="line">		InvSubBytes(in);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i)</span><br><span class="line">			key[i] = w[<span class="number">4</span>*round+i];</span><br><span class="line">		AddRoundKey(in, key);</span><br><span class="line">		InvMixColumns(in);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	InvShiftRows(in);</span><br><span class="line">	InvSubBytes(in);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i)</span><br><span class="line">		key[i] = w[i];</span><br><span class="line">	AddRoundKey(in, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span>  </span><br><span class="line"><span class="comment">/*                                                                    */</span>  </span><br><span class="line"><span class="comment">/*                              测试                                  */</span>  </span><br><span class="line"><span class="comment">/*                                                                    */</span>  </span><br><span class="line"><span class="comment">/**********************************************************************/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	byte key[<span class="number">16</span>] = &#123;<span class="number">0x2b</span>, <span class="number">0x7e</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, </span><br><span class="line">					<span class="number">0x28</span>, <span class="number">0xae</span>, <span class="number">0xd2</span>, <span class="number">0xa6</span>, </span><br><span class="line">					<span class="number">0xab</span>, <span class="number">0xf7</span>, <span class="number">0x15</span>, <span class="number">0x88</span>, </span><br><span class="line">					<span class="number">0x09</span>, <span class="number">0xcf</span>, <span class="number">0x4f</span>, <span class="number">0x3c</span>&#125;;</span><br><span class="line"></span><br><span class="line">	byte plain[<span class="number">16</span>] = &#123;<span class="number">0x32</span>, <span class="number">0x88</span>, <span class="number">0x31</span>, <span class="number">0xe0</span>, </span><br><span class="line">					<span class="number">0x43</span>, <span class="number">0x5a</span>, <span class="number">0x31</span>, <span class="number">0x37</span>,</span><br><span class="line">					<span class="number">0xf6</span>, <span class="number">0x30</span>, <span class="number">0x98</span>, <span class="number">0x07</span>,</span><br><span class="line">					<span class="number">0xa8</span>, <span class="number">0x8d</span>, <span class="number">0xa2</span>, <span class="number">0x34</span>&#125;; </span><br><span class="line">	<span class="comment">// 输出密钥</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"密钥是："</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; ++i)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; key[i].to_ulong() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	word w[<span class="number">4</span>*(Nr+<span class="number">1</span>)];</span><br><span class="line">	KeyExpansion(key, w);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 输出待加密的明文</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; endl &lt;&lt; <span class="string">"待加密的明文："</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; plain[i].to_ulong() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 加密，输出密文</span></span><br><span class="line">	encrypt(plain, w);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"加密后的密文："</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; plain[i].to_ulong() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解密，输出明文</span></span><br><span class="line">	decrypt(plain, w);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"解密后的明文："</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; plain[i].to_ulong() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试用例如下图：</p>
<p><img src="http://img.blog.csdn.net/20141213143350269?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>测试结果截图：</p>
<p><img src="http://img.blog.csdn.net/20141213143411392?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>可见，测试结果和预期输出相同，表明对数据的加密和解密成功！！！</p>
<p>下面我们来写 AES 对文件的加密和解密，在对 128 位的数据加解密成功以后，对文件的加解密就很简单了！只需要每次读 128 位，加密以后，将 128 位的密文写入另外一个文件…..如此循环，直到文件尾。下面是对一张图片进行 AES 加密和解密的测试代码（效率先不管了，有时间我再优化）：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;fstream&gt;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">bitset</span>&lt;8&gt; byte;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">bitset</span>&lt;32&gt; word;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  将一个char字符数组转化为二进制</span><br><span class="line"> *  存到一个 byte 数组中</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">charToByte</span><span class="params">(byte out[16], <span class="keyword">const</span> <span class="keyword">char</span> s[16])</span></span><br><span class="line"></span>&#123; </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; ++i)  </span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; ++j)  </span><br><span class="line">			out[i][j]= ((s[i]&gt;&gt;j) &amp; <span class="number">1</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  将连续的128位分成16组，存到一个 byte 数组中</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divideToByte</span><span class="params">(byte out[16], <span class="built_in">bitset</span>&lt;128&gt;&amp; data)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;128&gt; temp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		temp = (data &lt;&lt; <span class="number">8</span>*i) &gt;&gt; <span class="number">120</span>;</span><br><span class="line">		out[i] = temp.to_ulong();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  将16个 byte 合并成连续的128位</span><br><span class="line"> */</span></span><br><span class="line"><span class="built_in">bitset</span>&lt;128&gt; mergeByte(byte in[<span class="number">16</span>])</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;128&gt; res;</span><br><span class="line">	res.reset();  <span class="comment">// 置0</span></span><br><span class="line">	<span class="built_in">bitset</span>&lt;128&gt; temp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		temp = in[i].to_ulong();</span><br><span class="line">		temp &lt;&lt;= <span class="number">8</span>*(<span class="number">15</span>-i);</span><br><span class="line">		res |= temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> keyStr = <span class="string">"abcdefghijklmnop"</span>;</span><br><span class="line">	byte key[<span class="number">16</span>]; </span><br><span class="line">	charToByte(key, keyStr.c_str());</span><br><span class="line">	<span class="comment">// 密钥扩展</span></span><br><span class="line">	word w[<span class="number">4</span>*(Nr+<span class="number">1</span>)];</span><br><span class="line">	KeyExpansion(key, w);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">bitset</span>&lt;128&gt; data;</span><br><span class="line">	byte plain[<span class="number">16</span>];</span><br><span class="line">	<span class="comment">// 将文件 flower.jpg 加密到 cipher.txt 中</span></span><br><span class="line">	ifstream in;</span><br><span class="line">	ofstream out;</span><br><span class="line">	in.open(<span class="string">"D://flower.jpg"</span>, ios::binary);</span><br><span class="line">	out.open(<span class="string">"D://cipher.txt"</span>, ios::binary);</span><br><span class="line">	<span class="keyword">while</span>(in.read((<span class="keyword">char</span>*)&amp;data, <span class="keyword">sizeof</span>(data)))</span><br><span class="line">	&#123;</span><br><span class="line">		divideToByte(plain, data);</span><br><span class="line">		encrypt(plain, w);</span><br><span class="line">		data = mergeByte(plain);</span><br><span class="line">		out.write((<span class="keyword">char</span>*)&amp;data, <span class="keyword">sizeof</span>(data));</span><br><span class="line">		data.reset();  <span class="comment">// 置0</span></span><br><span class="line">	&#125;</span><br><span class="line">	in.close();</span><br><span class="line">	out.close();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解密 cipher.txt，并写入图片 flower1.jpg</span></span><br><span class="line">	in.open(<span class="string">"D://cipher.txt"</span>, ios::binary);</span><br><span class="line">	out.open(<span class="string">"D://flower1.jpg"</span>, ios::binary);</span><br><span class="line">	<span class="keyword">while</span>(in.read((<span class="keyword">char</span>*)&amp;data, <span class="keyword">sizeof</span>(data)))</span><br><span class="line">	&#123;</span><br><span class="line">		divideToByte(plain, data);</span><br><span class="line">		decrypt(plain, w);</span><br><span class="line">		data = mergeByte(plain);</span><br><span class="line">		out.write((<span class="keyword">char</span>*)&amp;data, <span class="keyword">sizeof</span>(data));</span><br><span class="line">		data.reset();  <span class="comment">// 置0</span></span><br><span class="line">	&#125;</span><br><span class="line">	in.close();</span><br><span class="line">	out.close();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>（全文完）</p>
<p><br><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要：</strong>作为新一代的加密标准，AES 旨在取代 DES（请看《<a href="http://songlee24.github.io/2014/12/06/des-encrypt/">DES加密算法的C++实现</a>》），以适应当今分布式开放网络对数据加密安全性的要求。本文在分析了 AES 加密原理的基础上着重说明了算法实现的具体步骤，并用 C++ 实现了对文件的加密和解密。</p>
<h3 id="一、AES_介绍">一、AES 介绍</h3><p><strong>AES（高级加密标准，Advanced Encryption Standard）</strong>，在密码学中又称 Rijndael 加密法，是美国联邦政府采用的一种分组加密标准。这个标准用来替代原先的 DES，目前已经广为全世界所使用，成为对称密钥算法中最流行的算法之一。]]>
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Basic-信息安全" scheme="http://yoursite.com/categories/Basic-%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[DES加密算法的C++实现]]></title>
    <link href="http://yoursite.com/2014/12/06/des-encrypt/"/>
    <id>http://yoursite.com/2014/12/06/des-encrypt/</id>
    <published>2014-12-06T11:21:35.000Z</published>
    <updated>2015-05-10T10:38:47.474Z</updated>
    <content type="html"><![CDATA[<p>《信息安全技术》这门课又在讲 DES 加密算法了，以前用纯C写过一次，这次我用 C++ 重新写了一个，写篇文章以备后用。本文介绍了 DES 算法加密的大致步骤和整体流程。</p>
<h3 id="一、DES算法原理">一、DES算法原理</h3><p>DES算法是一种最通用的对称密钥算法，因为算法本身是公开的，所以其安全性在于密钥的安全性。基于密钥的算法通常有两类：<strong>对称算法</strong>和<strong>公开密钥算法</strong>。对称算法的对称性体现在加密密钥能够从解密密钥推算出来，反之亦然。在大多数对称算法中，加解密的密钥是相同的，DES就是这样。可见，对称密钥算法的加解密密钥都是保密的。而公开密钥算法的加密密钥是公开的，解密密钥是保密的。</p>
<p>下面是 DES 加密算法的整体流程图：<a id="more"></a></p>
<p><img src="http://img.blog.csdn.net/20141206183226328?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>从上面的流程图可以看出，DES加密主要由四个部分完成：</p>
<ol>
<li>初始置换 IP；</li>
<li><strong>子密钥 Ki 的获取；</strong></li>
<li><strong>密码函数 f ；</strong></li>
<li>尾置换 IP-1 ；</li>
</ol>
<p>其中，第二部分和第三部分是 DES 算法的核心。<strong>注意：</strong>DES 解密算法与加密算法完全相同，只需要将子密钥的使用顺序反过来就行了。</p>
<p>下面分别讲一下各个部分的大致思路。</p>
<h4 id="1）_初始置换IP">1） 初始置换IP</h4><p>这一部分很简单，IP（initial permutation）是一个 8x8 的置换表：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> IP[] = &#123; <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</span><br><span class="line">			 <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">			 <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line">			 <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">			 <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,  <span class="number">1</span>,</span><br><span class="line">			 <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">			 <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</span><br><span class="line">			 <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span> &#125;;</span><br></pre></td></tr></table></figure></p>
<p>根据表中的规定，将输入的 64 位明文重新进行排序，即将第 58 位放到第 1 位，第 50 位放到第 2 位……以此类推。初始置换以后得到的是一个 64 位的输出。</p>
<h4 id="2）_子密钥_Ki_的获取">2） 子密钥 Ki 的获取</h4><p>下面是获取子密钥 Ki 的流程图：</p>
<p><img src="http://img.blog.csdn.net/20141206183416015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>流程图已经把思路很清楚的表达出来了，很简单：</p>
<ul>
<li><p>用户输出的密钥是 64 位的，根据密钥置换表<code>PC-1</code>，将 64 位变成 56 位密钥。（去掉了奇偶校验位）</p>
</li>
<li><p>将 PC-1 置换得到的 56 位密钥，分为前28位 C0 和后28位 D0，分别对它们进行<strong>循环左移</strong>，C0 左移得到 C1，D0 左移得到 D1。</p>
</li>
<li><p>将 C1 和 D1 合并成 56 位，然后通过<code>PC-2</code>表进行压缩置换，得到当前这一轮的 48 位子密钥 K1 。</p>
</li>
<li><p>然后对 C1 和 D1 进行左移和压缩置换，获取下一轮的子密钥……一共进行16轮，得到 16 个 48 位的子密钥。</p>
</li>
</ul>
<p>这部分需要用到的表 PC-1 和表 PC-2 如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 密钥置换表，将64位密钥变成56位</span></span><br><span class="line"><span class="keyword">int</span> PC_1[] = &#123;<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">			   <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">			  <span class="number">10</span>,  <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">			  <span class="number">19</span>, <span class="number">11</span>,  <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">			  <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">			   <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">			  <span class="number">14</span>,  <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">			  <span class="number">21</span>, <span class="number">13</span>,  <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>,  <span class="number">4</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩置换，将56位密钥压缩成48位子密钥</span></span><br><span class="line"><span class="keyword">int</span> PC_2[] = &#123;<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>,  <span class="number">1</span>,  <span class="number">5</span>,</span><br><span class="line">			   <span class="number">3</span>, <span class="number">28</span>, <span class="number">15</span>,  <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>,</span><br><span class="line">			  <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>,  <span class="number">4</span>, <span class="number">26</span>,  <span class="number">8</span>,</span><br><span class="line">			  <span class="number">16</span>,  <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>,  <span class="number">2</span>,</span><br><span class="line">			  <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>,</span><br><span class="line">			  <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>,</span><br><span class="line">			  <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>,</span><br><span class="line">			  <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每轮左移的位数</span></span><br><span class="line"><span class="keyword">int</span> shiftBits[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="3）_密码函数_f">3） 密码函数 f</h4><p>下面是密码函数<code>f(R, K)</code>的流程图：</p>
<p><img src="http://img.blog.csdn.net/20141206183524406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>密码函数<code>f(R, K)</code>接受两个输入：32 位的数据和 48 位的子密钥。然后：</p>
<ul>
<li><p>通过表 E 进行<strong>扩展置换</strong>，将输入的 32 位数据扩展为 48 位；</p>
</li>
<li><p>将扩展后的 48 位数据与 48 位的子密钥进行<strong>异或</strong>运算；</p>
</li>
<li><p>将异或得到的 48 位数据分成 8 个 6 位的块，每一个块通过对应的一个 S 表产生一个 4 位的输出。其中，每个 S 表都是 4 行 16 列。<strong>具体的置换过程如下：</strong>把 6 位输入中的第 1 位和第 6 位取出来行成一个两位的二进制数 x ，作为 Si 表中的行数（0~3）；把 6 位输入的中间 4 位构成另外一个二进制数 y，作为 Si 表的列数（0~15）；查出 Si 表中 x 行 y 列所对应的整数，将该整数转换为一个 4 位的二进制数。</p>
</li>
<li><p>把通过 S 表置换得到的 8 个 4 位连在一起，形成一个 32 位的数据。然后将该 32 位数据通过表 P 进行置换（称为P-置换），置换后得到一个仍然是 32 位的结果数据，这就是<code>f(R, K)</code>函数的输出。</p>
</li>
</ul>
<p>这部分用到了扩展置换表E，8个S表以及P-置换表，如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展置换表，将 32位 扩展至 48位</span></span><br><span class="line"><span class="keyword">int</span> E[] = &#123;<span class="number">32</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,</span><br><span class="line">		    <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>,</span><br><span class="line">		    <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">		   <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">		   <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">		   <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">		   <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">		   <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>,  <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// S盒，每个S盒是4x16的置换表，6位 -&gt; 4位</span></span><br><span class="line"><span class="keyword">int</span> S_BOX[<span class="number">8</span>][<span class="number">4</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">14</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">0</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">0</span>&#125;, </span><br><span class="line">		&#123;<span class="number">15</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>&#125; </span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">15</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">3</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">5</span>&#125;, </span><br><span class="line">		&#123;<span class="number">0</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">15</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">9</span>&#125;  </span><br><span class="line">	&#125;, </span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">10</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">13</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">1</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">13</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">7</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">12</span>&#125;  </span><br><span class="line">	&#125;, </span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">7</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">15</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">3</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">14</span>&#125;  </span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">14</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">14</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">11</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>&#125;  </span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">10</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">9</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">6</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>&#125;  </span><br><span class="line">	&#125;, </span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">1</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">13</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">6</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>&#125;  </span><br><span class="line">	&#125;, </span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">13</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">7</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>&#125;  </span><br><span class="line">	&#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P置换，32位 -&gt; 32位</span></span><br><span class="line"><span class="keyword">int</span> P[] = &#123;<span class="number">16</span>,  <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">		   <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">		    <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>,</span><br><span class="line">		    <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">		    <span class="number">2</span>,  <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>,</span><br><span class="line">		   <span class="number">32</span>, <span class="number">27</span>,  <span class="number">3</span>,  <span class="number">9</span>,</span><br><span class="line">		   <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>,  <span class="number">6</span>,</span><br><span class="line">		   <span class="number">22</span>, <span class="number">11</span>,  <span class="number">4</span>, <span class="number">25</span> &#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="4）_尾置换IP-1">4） 尾置换IP-1</h4><p>合并 L16 和 R16 得到一个 64 位的数据，再经过尾置换后得到的就是 64 位的密文。注意：要将 L16 和 R16 合并成 R16L16（即左右互换）。尾置换表IP-1如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尾置换表</span></span><br><span class="line"><span class="keyword">int</span> IP_1[] = &#123;<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">			  <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">			  <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">			  <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">			  <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">			  <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">			  <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">			  <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>,  <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>&#125;;</span><br></pre></td></tr></table></figure></p>
<p>OK！现在我们可以回到本文的开头，去看看 DES 算法的整体流程图，思路就已经很清楚了。</p>
<h3 id="二、C++实现">二、C++实现</h3><p>在 DES 算法的实现中，我用 C++ STL 中的<code>bitset</code>来操作二进制位，另外，这里我没有考虑时间的优化。下面是对一个 64 位数据进行加密解密的源代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************************************************* </span><br><span class="line">    &gt; File Name: Des.cpp</span><br><span class="line">    &gt; Author: SongLee </span><br><span class="line">    &gt; E-mail: lisong.shine@qq.com </span><br><span class="line">    &gt; Created Time: 2014年12月05日 星期日 19时46分32秒 </span><br><span class="line">    &gt; Personal Blog: http://songlee24.github.com </span><br><span class="line"> ************************************************************************/</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bitset&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bitset</span>&lt;64&gt; key;                <span class="comment">// 64位密钥</span></span><br><span class="line"><span class="built_in">bitset</span>&lt;48&gt; subKey[<span class="number">16</span>];         <span class="comment">// 存放16轮子密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始置换表</span></span><br><span class="line"><span class="keyword">int</span> IP[] = &#123;<span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</span><br><span class="line">			<span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">			<span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line">			<span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">			<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,  <span class="number">1</span>,</span><br><span class="line">			<span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">			<span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</span><br><span class="line">			<span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结尾置换表</span></span><br><span class="line"><span class="keyword">int</span> IP_1[] = &#123;<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">			  <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">			  <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">			  <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">			  <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">			  <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">			  <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">			  <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>,  <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------下面是生成密钥所用表-----------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 密钥置换表，将64位密钥变成56位</span></span><br><span class="line"><span class="keyword">int</span> PC_1[] = &#123;<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">			   <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">			  <span class="number">10</span>,  <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">			  <span class="number">19</span>, <span class="number">11</span>,  <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">			  <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">			   <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">			  <span class="number">14</span>,  <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">			  <span class="number">21</span>, <span class="number">13</span>,  <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>,  <span class="number">4</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩置换，将56位密钥压缩成48位子密钥</span></span><br><span class="line"><span class="keyword">int</span> PC_2[] = &#123;<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>,  <span class="number">1</span>,  <span class="number">5</span>,</span><br><span class="line">			   <span class="number">3</span>, <span class="number">28</span>, <span class="number">15</span>,  <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>,</span><br><span class="line">			  <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>,  <span class="number">4</span>, <span class="number">26</span>,  <span class="number">8</span>,</span><br><span class="line">			  <span class="number">16</span>,  <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>,  <span class="number">2</span>,</span><br><span class="line">			  <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>,</span><br><span class="line">			  <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>,</span><br><span class="line">			  <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>,</span><br><span class="line">			  <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每轮左移的位数</span></span><br><span class="line"><span class="keyword">int</span> shiftBits[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------下面是密码函数 f 所用表-----------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展置换表，将 32位 扩展至 48位</span></span><br><span class="line"><span class="keyword">int</span> E[] = &#123;<span class="number">32</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,</span><br><span class="line">		    <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>,</span><br><span class="line">		    <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">		   <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">		   <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">		   <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">		   <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">		   <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>,  <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// S盒，每个S盒是4x16的置换表，6位 -&gt; 4位</span></span><br><span class="line"><span class="keyword">int</span> S_BOX[<span class="number">8</span>][<span class="number">4</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">14</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">0</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">0</span>&#125;, </span><br><span class="line">		&#123;<span class="number">15</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>&#125; </span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">15</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">3</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">5</span>&#125;, </span><br><span class="line">		&#123;<span class="number">0</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">15</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">9</span>&#125;  </span><br><span class="line">	&#125;, </span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">10</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">13</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">1</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">13</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">7</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">12</span>&#125;  </span><br><span class="line">	&#125;, </span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">7</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">15</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">3</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">14</span>&#125;  </span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">14</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">14</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">11</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>&#125;  </span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">10</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">9</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">6</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>&#125;  </span><br><span class="line">	&#125;, </span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">1</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">13</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">6</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>&#125;  </span><br><span class="line">	&#125;, </span><br><span class="line">	&#123;  </span><br><span class="line">		&#123;<span class="number">13</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">7</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;,  </span><br><span class="line">		&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>&#125;  </span><br><span class="line">	&#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P置换，32位 -&gt; 32位</span></span><br><span class="line"><span class="keyword">int</span> P[] = &#123;<span class="number">16</span>,  <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">		   <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">		    <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>,</span><br><span class="line">		    <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">		    <span class="number">2</span>,  <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>,</span><br><span class="line">		   <span class="number">32</span>, <span class="number">27</span>,  <span class="number">3</span>,  <span class="number">9</span>,</span><br><span class="line">		   <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>,  <span class="number">6</span>,</span><br><span class="line">		   <span class="number">22</span>, <span class="number">11</span>,  <span class="number">4</span>, <span class="number">25</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/*                                                                    */</span></span><br><span class="line"><span class="comment">/*                            下面是DES算法实现                        */</span></span><br><span class="line"><span class="comment">/*                                                                    */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  密码函数f，接收32位数据和48位子密钥，产生一个32位的输出            </span><br><span class="line"> */</span></span><br><span class="line"><span class="built_in">bitset</span>&lt;32&gt; f(<span class="built_in">bitset</span>&lt;32&gt; R, <span class="built_in">bitset</span>&lt;48&gt; k)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;48&gt; expandR;</span><br><span class="line">	<span class="comment">// 第一步：扩展置换，32 -&gt; 48</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">48</span>; ++i)</span><br><span class="line">		expandR[<span class="number">47</span>-i] = R[<span class="number">32</span>-E[i]];</span><br><span class="line">	<span class="comment">// 第二步：异或</span></span><br><span class="line">	expandR = expandR ^ k;</span><br><span class="line">	<span class="comment">// 第三步：查找S_BOX置换表</span></span><br><span class="line">	<span class="built_in">bitset</span>&lt;32&gt; output;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">48</span>; i=i+<span class="number">6</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> row = expandR[<span class="number">47</span>-i]*<span class="number">2</span> + expandR[<span class="number">47</span>-i-<span class="number">5</span>];</span><br><span class="line">		<span class="keyword">int</span> col = expandR[<span class="number">47</span>-i-<span class="number">1</span>]*<span class="number">8</span> + expandR[<span class="number">47</span>-i-<span class="number">2</span>]*<span class="number">4</span> + expandR[<span class="number">47</span>-i-<span class="number">3</span>]*<span class="number">2</span> </span><br><span class="line">			+ expandR[<span class="number">47</span>-i-<span class="number">4</span>];</span><br><span class="line">		<span class="keyword">int</span> num = S_BOX[i/<span class="number">6</span>][row][col];</span><br><span class="line">		<span class="built_in">bitset</span>&lt;4&gt; binary(num);</span><br><span class="line">		output[<span class="number">31</span>-x] = binary[<span class="number">3</span>];</span><br><span class="line">		output[<span class="number">31</span>-x-<span class="number">1</span>] = binary[<span class="number">2</span>];</span><br><span class="line">		output[<span class="number">31</span>-x-<span class="number">2</span>] = binary[<span class="number">1</span>];</span><br><span class="line">		output[<span class="number">31</span>-x-<span class="number">3</span>] = binary[<span class="number">0</span>];</span><br><span class="line">		x += <span class="number">4</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 第四步：P-置换，32 -&gt; 32</span></span><br><span class="line">	<span class="built_in">bitset</span>&lt;32&gt; tmp = output;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">		output[<span class="number">31</span>-i] = tmp[<span class="number">32</span>-P[i]];</span><br><span class="line">	<span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  对56位密钥的前后部分进行左移</span><br><span class="line"> */</span></span><br><span class="line"><span class="built_in">bitset</span>&lt;28&gt; leftShift(<span class="built_in">bitset</span>&lt;28&gt; k, <span class="keyword">int</span> shift)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;28&gt; tmp = k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">27</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(i-shift&lt;<span class="number">0</span>)</span><br><span class="line">			k[i] = tmp[i-shift+<span class="number">28</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			k[i] = tmp[i-shift];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  生成16个48位的子密钥</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateKeys</span><span class="params">()</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;56&gt; realKey;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;28&gt; left;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;28&gt; right;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;48&gt; compressKey;</span><br><span class="line">	<span class="comment">// 去掉奇偶标记位，将64位密钥变成56位</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">56</span>; ++i)</span><br><span class="line">		realKey[<span class="number">55</span>-i] = key[<span class="number">64</span> - PC_1[i]];</span><br><span class="line">	<span class="comment">// 生成子密钥，保存在 subKeys[16] 中</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> round=<span class="number">0</span>; round&lt;<span class="number">16</span>; ++round) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 前28位与后28位</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">28</span>; i&lt;<span class="number">56</span>; ++i)</span><br><span class="line">			left[i-<span class="number">28</span>] = realKey[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">28</span>; ++i)</span><br><span class="line">			right[i] = realKey[i];</span><br><span class="line">		<span class="comment">// 左移</span></span><br><span class="line">		left = leftShift(left, shiftBits[round]);</span><br><span class="line">		right = leftShift(right, shiftBits[round]);</span><br><span class="line">		<span class="comment">// 压缩置换，由56位得到48位子密钥</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">28</span>; i&lt;<span class="number">56</span>; ++i)</span><br><span class="line">			realKey[i] = left[i-<span class="number">28</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">28</span>; ++i)</span><br><span class="line">			realKey[i] = right[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">48</span>; ++i)</span><br><span class="line">			compressKey[<span class="number">47</span>-i] = realKey[<span class="number">56</span> - PC_2[i]];</span><br><span class="line">		subKey[round] = compressKey;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  工具函数：将char字符数组转为二进制</span><br><span class="line"> */</span></span><br><span class="line"><span class="built_in">bitset</span>&lt;64&gt; charToBitset(<span class="keyword">const</span> <span class="keyword">char</span> s[<span class="number">8</span>])</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;64&gt; bits;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; ++i)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; ++j)</span><br><span class="line">			bits[i*<span class="number">8</span>+j] = ((s[i]&gt;&gt;j) &amp; <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> bits;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  DES加密</span><br><span class="line"> */</span></span><br><span class="line"><span class="built_in">bitset</span>&lt;64&gt; encrypt(<span class="built_in">bitset</span>&lt;64&gt;&amp; plain)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;64&gt; cipher;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;64&gt; currentBits;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;32&gt; left;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;32&gt; right;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;32&gt; newLeft;</span><br><span class="line">	<span class="comment">// 第一步：初始置换IP</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">		currentBits[<span class="number">63</span>-i] = plain[<span class="number">64</span>-IP[i]];</span><br><span class="line">	<span class="comment">// 第二步：获取 Li 和 Ri</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">		left[i-<span class="number">32</span>] = currentBits[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">		right[i] = currentBits[i];</span><br><span class="line">	<span class="comment">// 第三步：共16轮迭代</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> round=<span class="number">0</span>; round&lt;<span class="number">16</span>; ++round)</span><br><span class="line">	&#123;</span><br><span class="line">		newLeft = right;</span><br><span class="line">		right = left ^ f(right,subKey[round]);</span><br><span class="line">		left = newLeft;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 第四步：合并L16和R16，注意合并为 R16L16</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">		cipher[i] = left[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">		cipher[i] = right[i-<span class="number">32</span>];</span><br><span class="line">	<span class="comment">// 第五步：结尾置换IP-1</span></span><br><span class="line">	currentBits = cipher;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">		cipher[<span class="number">63</span>-i] = currentBits[<span class="number">64</span>-IP_1[i]];</span><br><span class="line">	<span class="comment">// 返回密文</span></span><br><span class="line">	<span class="keyword">return</span> cipher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  DES解密</span><br><span class="line"> */</span></span><br><span class="line"><span class="built_in">bitset</span>&lt;64&gt; decrypt(<span class="built_in">bitset</span>&lt;64&gt;&amp; cipher)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;64&gt; plain;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;64&gt; currentBits;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;32&gt; left;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;32&gt; right;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;32&gt; newLeft;</span><br><span class="line">	<span class="comment">// 第一步：初始置换IP</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">		currentBits[<span class="number">63</span>-i] = cipher[<span class="number">64</span>-IP[i]];</span><br><span class="line">	<span class="comment">// 第二步：获取 Li 和 Ri</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">		left[i-<span class="number">32</span>] = currentBits[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">		right[i] = currentBits[i];</span><br><span class="line">	<span class="comment">// 第三步：共16轮迭代（子密钥逆序应用）</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> round=<span class="number">0</span>; round&lt;<span class="number">16</span>; ++round)</span><br><span class="line">	&#123;</span><br><span class="line">		newLeft = right;</span><br><span class="line">		right = left ^ f(right,subKey[<span class="number">15</span>-round]);</span><br><span class="line">		left = newLeft;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 第四步：合并L16和R16，注意合并为 R16L16</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">		plain[i] = left[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">		plain[i] = right[i-<span class="number">32</span>];</span><br><span class="line">	<span class="comment">// 第五步：结尾置换IP-1</span></span><br><span class="line">	currentBits = plain;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">		plain[<span class="number">63</span>-i] = currentBits[<span class="number">64</span>-IP_1[i]];</span><br><span class="line">	<span class="comment">// 返回明文</span></span><br><span class="line">	<span class="keyword">return</span> plain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* 测试：                                                             */</span></span><br><span class="line"><span class="comment">/*     1.将一个 64 位的字符串加密， 把密文写入文件 a.txt              */</span></span><br><span class="line"><span class="comment">/*     2.读取文件 a.txt 获得 64 位密文，解密之后再写入 b.txt          */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s = <span class="string">"romantic"</span>;</span><br><span class="line">	<span class="built_in">string</span> k = <span class="string">"12345678"</span>;</span><br><span class="line">	<span class="built_in">bitset</span>&lt;64&gt; plain = charToBitset(s.c_str());</span><br><span class="line">	key = charToBitset(k.c_str());</span><br><span class="line">	<span class="comment">// 生成16个子密钥</span></span><br><span class="line">	generateKeys();   </span><br><span class="line">	<span class="comment">// 密文写入 a.txt</span></span><br><span class="line">	<span class="built_in">bitset</span>&lt;64&gt; cipher = encrypt(plain);</span><br><span class="line">	fstream file1;</span><br><span class="line">	file1.open(<span class="string">"D://a.txt"</span>, ios::binary | ios::out);</span><br><span class="line">	file1.write((<span class="keyword">char</span>*)&amp;cipher,<span class="keyword">sizeof</span>(cipher));</span><br><span class="line">	file1.close();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 读文件 a.txt</span></span><br><span class="line">	<span class="built_in">bitset</span>&lt;64&gt; temp;</span><br><span class="line">	file1.open(<span class="string">"D://a.txt"</span>, ios::binary | ios::in);</span><br><span class="line">	file1.read((<span class="keyword">char</span>*)&amp;temp, <span class="keyword">sizeof</span>(temp));</span><br><span class="line">	file1.close();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解密，并写入文件 b.txt</span></span><br><span class="line">	<span class="built_in">bitset</span>&lt;64&gt; temp_plain = decrypt(temp);</span><br><span class="line">	file1.open(<span class="string">"D://b.txt"</span>, ios::binary | ios::out);</span><br><span class="line">	file1.write((<span class="keyword">char</span>*)&amp;temp_plain,<span class="keyword">sizeof</span>(temp_plain));</span><br><span class="line">	file1.close();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果（VS2012）：</p>
<p><img src="http://img.blog.csdn.net/20141206183858625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>那么，在对 64 位的数据加解密成功以后，对文件的加解密就很简单了！只需要每次读 64 位，加密以后，将 64 位的密文写入另外一个文件…..如此循环，直到文件尾。下面是对一张图片进行加密和解密的测试代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">string</span> k = <span class="string">"12345678"</span>;</span><br><span class="line">	key = charToBitset(k.c_str());</span><br><span class="line">	generateKeys();   <span class="comment">// 生成16个子密钥</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将文件 flower.jpg 加密到 cipher.txt 中</span></span><br><span class="line">	ifstream in;</span><br><span class="line">	ofstream out;</span><br><span class="line">	in.open(<span class="string">"D://flower.jpg"</span>, ios::binary);</span><br><span class="line">	out.open(<span class="string">"D://cipher.txt"</span>, ios::binary);</span><br><span class="line">	<span class="built_in">bitset</span>&lt;64&gt; plain;</span><br><span class="line">	<span class="keyword">while</span>(in.read((<span class="keyword">char</span>*)&amp;plain, <span class="keyword">sizeof</span>(plain)))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">bitset</span>&lt;64&gt; cipher  = encrypt(plain);</span><br><span class="line">		out.write((<span class="keyword">char</span>*)&amp;cipher, <span class="keyword">sizeof</span>(cipher));</span><br><span class="line">		plain.reset();  <span class="comment">// 置0</span></span><br><span class="line">	&#125;</span><br><span class="line">	in.close();</span><br><span class="line">	out.close();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解密 cipher.txt，并写入图片 flower1.jpg</span></span><br><span class="line">	in.open(<span class="string">"D://cipher.txt"</span>, ios::binary);</span><br><span class="line">	out.open(<span class="string">"D://flower1.jpg"</span>, ios::binary);</span><br><span class="line">	<span class="keyword">while</span>(in.read((<span class="keyword">char</span>*)&amp;plain, <span class="keyword">sizeof</span>(plain)))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">bitset</span>&lt;64&gt; temp  = decrypt(plain);</span><br><span class="line">		out.write((<span class="keyword">char</span>*)&amp;temp, <span class="keyword">sizeof</span>(temp));</span><br><span class="line">		plain.reset();  <span class="comment">// 置0</span></span><br><span class="line">	&#125;</span><br><span class="line">	in.close();</span><br><span class="line">	out.close();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>（全文完）<br><br><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>《信息安全技术》这门课又在讲 DES 加密算法了，以前用纯C写过一次，这次我用 C++ 重新写了一个，写篇文章以备后用。本文介绍了 DES 算法加密的大致步骤和整体流程。</p>
<h3 id="一、DES算法原理">一、DES算法原理</h3><p>DES算法是一种最通用的对称密钥算法，因为算法本身是公开的，所以其安全性在于密钥的安全性。基于密钥的算法通常有两类：<strong>对称算法</strong>和<strong>公开密钥算法</strong>。对称算法的对称性体现在加密密钥能够从解密密钥推算出来，反之亦然。在大多数对称算法中，加解密的密钥是相同的，DES就是这样。可见，对称密钥算法的加解密密钥都是保密的。而公开密钥算法的加密密钥是公开的，解密密钥是保密的。</p>
<p>下面是 DES 加密算法的整体流程图：]]>
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Basic-信息安全" scheme="http://yoursite.com/categories/Basic-%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【动态规划】输出所有的最长公共子序列]]></title>
    <link href="http://yoursite.com/2014/11/29/print-all-LCS/"/>
    <id>http://yoursite.com/2014/11/29/print-all-LCS/</id>
    <published>2014-11-29T08:48:14.000Z</published>
    <updated>2015-05-10T10:34:30.441Z</updated>
    <content type="html"><![CDATA[<p><a href="http://songlee24.github.io/2014/11/27/dynamic-programming/" target="_blank" rel="external">&lt;&lt; 动态规划求最长公共子序列的长度</a></p>
<p>上篇讲到使用动态规划可以在 <strong>θ(mn)</strong> 的时间里求出 LCS 的长度，本文将讨论如何输出最长公共子序列。</p>
<p><strong>*问题描述：</strong>给定两个序列，例如 X = “ABCBDAB”、Y = “BDCABA”，求它们的最长公共子序列的长度。*</p>
<p>下面是求解时的动态规划表，可以看出 X 和 Y 的最长公共子序列的长度为4：<br><a id="more"></a><br><img src="http://img.blog.csdn.net/20141127164703086?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>输出一个最长公共子序列并不难（网上很多相关代码），难点在于输出所有的最长公共子序列，因为 LCS 通常不唯一。总之，我们需要在动态规划表上进行回溯 —— 从<code>table[m][n]</code>，即右下角的格子，开始进行判断：</p>
<ol>
<li><p>如果格子<code>table[i][j]</code>对应的<code>X[i-1] == Y[j-1]</code>，则把这个字符放入 LCS 中，并跳入<code>table[i-1][j-1]</code>中继续进行判断；</p>
</li>
<li><p>如果格子<code>table[i][j]</code>对应的 <code>X[i-1] ≠ Y[j-1]</code>，则比较<code>table[i-1][j]</code>和<code>table[i][j-1]</code>的值，跳入值较大的格子继续进行判断；</p>
</li>
<li><p>直到 i 或 j 小于等于零为止，倒序输出 LCS 。</p>
</li>
</ol>
<p>如果出现<code>table[i-1][j]</code>等于<code>table[i][j-1]</code>的情况，说明最长公共子序列有多个，故两边都要进行回溯（这里用到递归）。</p>
<p><img src="http://img.blog.csdn.net/20141129154238387?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>从上图的红色路径显示，X 和 Y 的最长公共子序列有 3 个，分别为 “BDAB”、“BCAB”、“BCBA”。</p>
<p>C++代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态规划求解并输出所有LCS</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> X = <span class="string">"ABCBDAB"</span>;</span><br><span class="line"><span class="built_in">string</span> Y = <span class="string">"BDCABA"</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; table; <span class="comment">// 动态规划表</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; setOfLCS;      <span class="comment">// set保存所有的LCS</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (a&gt;b)? a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span><br><span class="line"> * 字符串逆序</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Reverse</span><span class="params">(<span class="built_in">string</span> str)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> high = str.length() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (low &lt; high)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">char</span> temp = str[low];</span><br><span class="line">		str[low] = str[high];</span><br><span class="line">		str[high] = temp;</span><br><span class="line">		++low;</span><br><span class="line">		--high;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span><br><span class="line"> * 构造表，并返回X和Y的LCS的长度</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">// 表的大小为(m+1)*(n+1)</span></span><br><span class="line">	table = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(m+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m+<span class="number">1</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n+<span class="number">1</span>; ++j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 第一行和第一列置0</span></span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>)</span><br><span class="line">				table[i][j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(X[i-<span class="number">1</span>] == Y[j-<span class="number">1</span>])</span><br><span class="line">				table[i][j] = table[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				table[i][j] = max(table[i-<span class="number">1</span>][j], table[i][j-<span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> table[m][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span><br><span class="line"> * 求出所有的最长公共子序列，并放入set中 </span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traceBack</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">string</span> lcs_str)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (i&gt;<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (X[i-<span class="number">1</span>] == Y[j-<span class="number">1</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			lcs_str.push_back(X[i-<span class="number">1</span>]);</span><br><span class="line">			--i;</span><br><span class="line">			--j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (table[i-<span class="number">1</span>][j] &gt; table[i][j-<span class="number">1</span>])</span><br><span class="line">				--i;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (table[i-<span class="number">1</span>][j] &lt; table[i][j-<span class="number">1</span>])</span><br><span class="line">				--j;</span><br><span class="line">			<span class="keyword">else</span>   <span class="comment">// 相等的情况</span></span><br><span class="line">			&#123;</span><br><span class="line">				traceBack(i-<span class="number">1</span>, j, lcs_str);</span><br><span class="line">				traceBack(i, j-<span class="number">1</span>, lcs_str);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	setOfLCS.insert(Reverse(lcs_str));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m = X.length();</span><br><span class="line">	<span class="keyword">int</span> n = Y.length();</span><br><span class="line">	<span class="keyword">int</span> length = lcs(m, n);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"The length of LCS is "</span> &lt;&lt; length &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">string</span> str;</span><br><span class="line">	traceBack(m, n, str);</span><br><span class="line">	<span class="comment">// 倒序输出</span></span><br><span class="line">	<span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;::iterator beg = setOfLCS.begin();</span><br><span class="line">	<span class="keyword">for</span>( ; beg!=setOfLCS.end(); ++beg)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; *beg &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：</p>
<p><img src="http://img.blog.csdn.net/20141129154444437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>Java版本的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String X;</span><br><span class="line">	<span class="keyword">private</span> String Y;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[][] table;  <span class="comment">// 动态规划表</span></span><br><span class="line">	<span class="keyword">private</span> TreeSet&lt;String&gt; set = <span class="keyword">new</span> TreeSet&lt;String&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 功能：带参数的构造器</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyClass</span><span class="params">(String X, String Y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.X = X;</span><br><span class="line">		<span class="keyword">this</span>.Y = Y;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 功能：求两个数中的较大者</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (a&gt;b) ? a:b;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 功能：构造表，并返回X和Y的LCS的长度</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">		table = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>]; <span class="comment">// 表的大小为(m+1)*(n+1)	</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m+<span class="number">1</span>; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n+<span class="number">1</span>; ++j) &#123;</span><br><span class="line">				<span class="comment">// 第一行和第一列置0</span></span><br><span class="line">				<span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>)</span><br><span class="line">					table[i][j] = <span class="number">0</span>;</span><br><span class="line">				<span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(X.charAt(i-<span class="number">1</span>)</span> </span>== Y.charAt(j-<span class="number">1</span>))</span><br><span class="line">					table[i][j] = table[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					table[i][j] = max(table[i-<span class="number">1</span>][j], table[i][j-<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> table[m][n];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 功能：回溯，求出所有的最长公共子序列，并放入set中</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traceBack</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, String lcs_str)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (i&gt;<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (X.charAt(i-<span class="number">1</span>) == Y.charAt(j-<span class="number">1</span>)) &#123;</span><br><span class="line">				lcs_str += X.charAt(i-<span class="number">1</span>);</span><br><span class="line">				--i;</span><br><span class="line">				--j;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (table[i-<span class="number">1</span>][j] &gt; table[i][j-<span class="number">1</span>])</span><br><span class="line">					--i;</span><br><span class="line">				<span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(table[i-<span class="number">1</span>][j] &lt; table[i][j-<span class="number">1</span>])</span></span><br><span class="line">					--j</span>;</span><br><span class="line">				<span class="keyword">else</span> &#123;  <span class="comment">// 相等的情况</span></span><br><span class="line">					traceBack(i-<span class="number">1</span>, j, lcs_str);</span><br><span class="line">					traceBack(i, j-<span class="number">1</span>, lcs_str);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		set.add(reverse(lcs_str));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 功能：字符串逆序</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">reverse</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		StringBuffer strBuf = <span class="keyword">new</span> StringBuffer(str).reverse();</span><br><span class="line">		<span class="keyword">return</span> strBuf.toString();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 功能：外部接口 —— 打印输出</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLCS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> m = X.length();</span><br><span class="line">		<span class="keyword">int</span> n = Y.length();</span><br><span class="line">		<span class="keyword">int</span> length = lcs(m,n);</span><br><span class="line">		String str = <span class="string">""</span>;</span><br><span class="line">		traceBack(m,n,str);</span><br><span class="line">		<span class="comment">// 倒序输出</span></span><br><span class="line">		System.out.println(<span class="string">"The length of LCS is: "</span> + length);</span><br><span class="line">		<span class="keyword">for</span>(String s : set) &#123;</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 功能：main方法 —— 程序的入口</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		MyClass lcs = <span class="keyword">new</span> MyClass(<span class="string">"ABCBDAB"</span>,<span class="string">"BDCABA"</span>);</span><br><span class="line">		lcs.printLCS();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><br><br><br><br><br><br><br>转载请注明出处，谢谢！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://songlee24.github.io/2014/11/27/dynamic-programming/">&lt;&lt; 动态规划求最长公共子序列的长度</a></p>
<p>上篇讲到使用动态规划可以在 <strong>θ(mn)</strong> 的时间里求出 LCS 的长度，本文将讨论如何输出最长公共子序列。</p>
<p><strong>*问题描述：</strong>给定两个序列，例如 X = “ABCBDAB”、Y = “BDCABA”，求它们的最长公共子序列的长度。*</p>
<p>下面是求解时的动态规划表，可以看出 X 和 Y 的最长公共子序列的长度为4：<br>]]>
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Basic-算法与数据结构" scheme="http://yoursite.com/categories/Basic-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[动态规划（Dynamic Programming）]]></title>
    <link href="http://yoursite.com/2014/11/27/dynamic-programming/"/>
    <id>http://yoursite.com/2014/11/27/dynamic-programming/</id>
    <published>2014-11-27T13:50:47.000Z</published>
    <updated>2015-05-10T10:30:16.598Z</updated>
    <content type="html"><![CDATA[<h3 id="一、动态规划">一、动态规划</h3><p><strong>动态规划（Dynamic Programming）</strong>是一种设计的技巧，是解决多阶段决策过程最优化问题的通用方法。</p>
<p><strong>基本思想：</strong>将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解（这部分与分治法相似）。与分治法不同的是，适合于用动态规划求解的问题，经分解得到的子问题往往不是互相独立的。若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。如果我们能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间。通常可以用一个<strong>表</strong>来记录所有已解的子问题的答案。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。这就是动态规划的基本思路。</p>
<p>采用动态规划求解的问题需要具有<strong>两个特性：</strong><a id="more"></a></p>
<ul>
<li><p><strong>最优子结构（Optimal Substructure）：</strong>问题的一个最优解中所包含的子问题的解也是最优的。</p>
</li>
<li><p><strong>重叠子问题（Overlapping Subproblems）：</strong>用递归算法对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。</p>
</li>
</ul>
<p>问题具有最优子结构性质，我们才能写出最优解的递归方程；具有重叠子问题特性，我们才能通过避免重复计算来减少运行时间。</p>
<p>综上所述，动态规划的关键是 —— 记忆，空间换时间，不重复求解，从较小问题解逐步决策，构造较大问题的解。<br><br></p>
<h3 id="二、最长公共子序列（LCS）问题">二、最长公共子序列（LCS）问题</h3><p>下面通过一个具体的例子来学习动态规划方法 —— 最长公共子序列问题。</p>
<p><strong>*最长公共子串（Longest Common Substring）</strong>与<strong>最长公共子序列（Longest Common Subsequence）</strong>的区别： 子串要求在原字符串中是连续的，而子序列则只需保持相对顺序，并不要求连续。*</p>
<p><strong>问题描述：</strong>给定两个序列：<code>X[1...m]</code>和<code>Y[1...n]</code>，求在两个序列中同时出现的最长子序列的长度。</p>
<p>假设 X 和 Y 的序列如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X[<span class="number">1.</span>..m] = &#123;A, B, C, B, D, A, B&#125;</span><br><span class="line">Y[<span class="number">1.</span>..n] = &#123;B, D, C, A, B, A&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看出，X 和 Y 的最长公共子序列有 “BDAB”、“BCAB”、“BCBA”，即长度为4。</p>
<p><strong>1） 穷举法</strong></p>
<p>可能很多人会想到用穷举法来解决这个问题，即求出 X 中所有子序列，看 Y 中是否存在该子序列。</p>
<ul>
<li>X 有多少子序列 —— $2^m$ 个</li>
<li>检查一个子序列是否在 Y 中 —— θ(n)</li>
</ul>
<p>所以穷举法在最坏情况下的时间复杂度是 $θ(n * 2^m)$，也就是说花费的时间是指数级的，这简直太慢了。</p>
<p><strong>2） 动态规划</strong></p>
<p>首先，我们来看看 LCS 问题是否具有动态规划问题的两个特性。</p>
<p><strong>① 最优子结构</strong></p>
<p>设 <code>C[i,j] = |LCS(x[1...i],y[1...j])|</code>，即<code>C[i,j]</code>表示序列<code>X[1...i]</code>和<code>Y[1...j]</code>的最长公共子序列的长度，则 <code>C[m,n] = |LCS(x,y)|</code>就是问题的解。</p>
<p>递归推导式：</p>
<p><img src="http://img.blog.csdn.net/20141127164356104?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>在这里就不证明了。从这个递归公式可以看出，问题具有最优子结构性质！</p>
<p><strong>② 重叠子问题</strong></p>
<p>根据上面的递归推导式，可以写出求LCS长度的递归伪代码：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LCS(x,y,<span class="built_in">i</span>,<span class="built_in">j</span>)</span><br><span class="line">	<span class="keyword">if</span> x<span class="matrix">[i]</span> = y<span class="matrix">[j]</span></span><br><span class="line">		then C<span class="matrix">[i,j]</span> ← LCS(x,y,<span class="built_in">i</span>-<span class="number">1</span>,<span class="built_in">j</span>-<span class="number">1</span>)+<span class="number">1</span></span><br><span class="line">		<span class="keyword">else</span> C<span class="matrix">[i,j]</span> ← max<span class="cell">&#123;LCS(x,y,i-<span class="number">1</span>,j),LCS(x,y,i,j-<span class="number">1</span>)&#125;</span></span><br><span class="line">	<span class="keyword">return</span> C<span class="matrix">[i,j]</span></span><br></pre></td></tr></table></figure></p>
<p>C++代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的递归求解LCS问题</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (a&gt;b)? a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the length of LCS for X[0...m-1] and Y[0...n-1]</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="built_in">string</span> &amp;X, <span class="built_in">string</span> &amp;Y, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (X[m-<span class="number">1</span>] == Y[n-<span class="number">1</span>])</span><br><span class="line">		<span class="keyword">return</span> lcs(X, Y, m-<span class="number">1</span>, n-<span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> max(lcs(X, Y, m, n-<span class="number">1</span>), lcs(X, Y, m-<span class="number">1</span>, n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> X = <span class="string">"ABCBDAB"</span>;</span><br><span class="line">	<span class="built_in">string</span> Y = <span class="string">"BDCABA"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"The length of LCS is "</span> &lt;&lt; lcs(X, Y, X.length(), Y.length());</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>像这样使用简单的递归，在最坏情况下（X 和 Y 的所有字符都不匹配，即LCS的长度为0）的时间复杂度为 <strong>θ(2^n)</strong>。这和穷举法一样还是指数级的，太慢了。</p>
<p>根据程序中 X 和 Y 的初始值，我们画出部分递归树：</p>
<p><img src="http://img.blog.csdn.net/20141127164646781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>递归树中红框标记的部分被调用了两次。如果画出完整的递归树，我们会看到很多重复的调用，所以这个问题具有重叠子问题的特性。</p>
<p><strong>③ 动态规划求解</strong></p>
<p>简单的递归之所以和穷举法一样慢，因为在递归过程中进行了大量的重复调用。而<strong>动态规划就是要解决这个问题，通过用一个表来保存子问题的结果，避免重复的计算，以空间换时间</strong>。前面我们已经证明，最长公共子序列问题具有动态规划所要求的两个特性，所以 LCS 问题可以用动态规划来求解。</p>
<p>下面是用动态规划（打表）解决LCS问题：</p>
<p><img src="http://img.blog.csdn.net/20141127164703086?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>C++代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态规划求解LCS问题</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (a&gt;b)? a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 返回X[0...m-1]和Y[0...n-1]的LCS的长度 </span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="built_in">string</span> &amp;X, <span class="built_in">string</span> &amp;Y, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">// 动态规划表，大小(m+1)*(n+1)</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; table(m+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n+<span class="number">1</span>));  </span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m+<span class="number">1</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n+<span class="number">1</span>; ++j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 第一行和第一列置0</span></span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>)</span><br><span class="line">				table[i][j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(X[i-<span class="number">1</span>] == Y[j-<span class="number">1</span>])</span><br><span class="line">				table[i][j] = table[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				table[i][j] = max(table[i-<span class="number">1</span>][j], table[i][j-<span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> table[m][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> X = <span class="string">"ABCBDAB"</span>;</span><br><span class="line">	<span class="built_in">string</span> Y = <span class="string">"BDCABA"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"The length of LCS is "</span> &lt;&lt; lcs(X, Y, X.length(), Y.length());</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>容易看出，动态规划解决LCS问题的时间复杂度为 <strong>θ(mn)</strong>，这比简单的递归实现要快多了。空间复杂度是<strong>θ(mn)</strong>，因为使用了一个动态规划表。当然，空间复杂度还可以进行优化，即根据递推式我们可以只保存填下一个位置所用到的几个位置就行了。（关于如何输出LCS请看另一篇：《<a href="http://songlee24.github.io/blog/2014/11/29/printlcs/" target="_blank" rel="external">输出所有的最长公共子序列</a>》）</p>
<p><br><br><br><br></p>
<h3 id="总结：">总结：</h3><p>动态规划将原来具有指数级时间复杂度的搜索算法改进成了具有多项式时间复杂度的算法。其中的关键在于解决冗余（重复计算），这是动态规划算法的根本目的。动态规划实质上是一种以空间换时间的技术，它在实现的过程中，不得不存储产生过程中的各种状态，所以它的空间复杂度要大于其它的算法。</p>
<p>从上面的例子中，我们可以总结动态规划解决最优化问题的一般步骤：</p>
<ol>
<li>分析最优解的性质，并刻划其结构特征。</li>
<li>递归地定义最优值。</li>
<li>以自底向上的方式或自顶向下的记忆化方法计算出最优值。</li>
<li>根据计算最优值时得到的信息，构造一个最优解。</li>
</ol>
<p>步骤(1)—(3)是动态规划算法的基本步骤。在只需要求出最优值的情形，步骤(4)可以省略，若需要求出问题的一个最优解，则必须执行步骤(4)。此时，在步骤(3)中计算最优值时，通常需记录更多的信息，以便在步骤(4)中，根据所记录的信息，快速地构造出一个最优解。</p>
<p>（全文完）</p>
<p><br><br>参考：<br>[1] www.algorithmist.com/index.php/Longest_Common_Subsequence<br>[2] www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、动态规划">一、动态规划</h3><p><strong>动态规划（Dynamic Programming）</strong>是一种设计的技巧，是解决多阶段决策过程最优化问题的通用方法。</p>
<p><strong>基本思想：</strong>将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解（这部分与分治法相似）。与分治法不同的是，适合于用动态规划求解的问题，经分解得到的子问题往往不是互相独立的。若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。如果我们能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间。通常可以用一个<strong>表</strong>来记录所有已解的子问题的答案。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。这就是动态规划的基本思路。</p>
<p>采用动态规划求解的问题需要具有<strong>两个特性：</strong>]]>
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Basic-算法与数据结构" scheme="http://yoursite.com/categories/Basic-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于MFC的一个简单计算器]]></title>
    <link href="http://yoursite.com/2014/10/13/simple-calculator/"/>
    <id>http://yoursite.com/2014/10/13/simple-calculator/</id>
    <published>2014-10-13T03:08:53.000Z</published>
    <updated>2015-05-10T10:24:00.243Z</updated>
    <content type="html"><![CDATA[<p>写一个简单的计算器并不是什么很难的事，主要目的是要通过这个程序来学习和分析其中的核心算法。这个简易计算器的<strong>核心部分</strong>就是对输入的表达式的正确性判断与求值，其中包括对表达式的解析、中缀表达式转后缀表达式、后缀表达式求值等等几个方面。</p>
<p><center><img src="http://img.blog.csdn.net/20141007151700078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></center><br><a id="more"></a><br><br></p>
<h3 id="一、封装核心代码">一、封装核心代码</h3><p>《<a href="http://songlee24.github.io/2014/10/05/arithmetic-expression-01/" target="_blank" rel="external">算术表达式的合法性判断与求值（上）</a>》和《<a href="http://songlee24.github.io/2014/10/10/arithmetic-expression-02/" target="_blank" rel="external">算术表达式的合法性判断与求值（下）</a>》这两篇文章已经对核心算法部分进行了讲解，并附有源码。在此基础上制作一个简单计算器，我们要做的仅仅是封装核心代码并加入MFC工程中。</p>
<p>下面是我封装的一个 Expression 类：</p>
<p><strong>Expression.h</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;utility&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Expression</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Expression(<span class="built_in">string</span> str);</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">test</span><span class="params">()</span></span>;         <span class="comment">// 外部接口，判断表达式是否合法</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">()</span></span>;  <span class="comment">// 外部接口，计算表达式的值 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt; word;</span><br><span class="line">	<span class="built_in">string</span> expr;  <span class="comment">// 算术表达式</span></span><br><span class="line">	<span class="keyword">int</span> idx;      <span class="comment">// word下标</span></span><br><span class="line">	<span class="keyword">int</span> sym;      <span class="comment">// 单词种别编码</span></span><br><span class="line">	<span class="keyword">int</span> err;      <span class="comment">// 错误</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">word_analysis</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;&amp; , <span class="keyword">const</span> <span class="built_in">string</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Next</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">E</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">T</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">F</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="keyword">bool</span> Right;   <span class="comment">// 保存表达式test结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">prior</span><span class="params">(<span class="keyword">int</span>)</span></span>;        <span class="comment">// 获取运算符的优先级</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">isOperator</span><span class="params">(<span class="keyword">int</span>)</span></span>;  <span class="comment">// 通过 种别编码 判定是否是运算符</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&gt; getPostfix(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&gt;&amp;);  <span class="comment">// 中缀转后缀</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">popTwoNumbers</span><span class="params">(<span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt;&amp;, <span class="keyword">double</span>&amp;, <span class="keyword">double</span>&amp;)</span></span>;  <span class="comment">// 从栈中连续弹出两个操作数</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">stringToDouble</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;)</span></span>;  <span class="comment">// 把string转换为double</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">expCalculate</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;&amp;)</span></span>;  <span class="comment">// 计算后缀表达式的值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><strong>Expression.cpp</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Expression.h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">Expression::Expression( <span class="built_in">string</span> str ):</span><br><span class="line">	expr(str),</span><br><span class="line">	idx(<span class="number">0</span>),</span><br><span class="line">	err(<span class="number">0</span>),</span><br><span class="line">	Right(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部接口</span></span><br><span class="line"><span class="keyword">bool</span> Expression::test()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(!word.empty())  <span class="comment">// 已经test过了</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> Right;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> err_num = word_analysis(word, expr);</span><br><span class="line">	<span class="keyword">if</span> (-<span class="number">1</span> == err_num)</span><br><span class="line">	&#123;</span><br><span class="line">		Right = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 词法正确，进行语法分析</span></span><br><span class="line">		Next();</span><br><span class="line">		E();</span><br><span class="line">		<span class="keyword">if</span> (sym == <span class="number">0</span> &amp;&amp; err == <span class="number">0</span>)  <span class="comment">// 注意要判断两个条件</span></span><br><span class="line">			Right = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			Right = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部接口</span></span><br><span class="line"><span class="keyword">double</span> Expression::calculate()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (test())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> expCalculate(getPostfix(word));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------词法分析----------------------------*/</span></span><br><span class="line"><span class="keyword">int</span> Expression::word_analysis(<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;&amp; word, <span class="keyword">const</span> <span class="built_in">string</span> expr)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expr.length(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 如果是 + - x ÷ ( )</span></span><br><span class="line">		<span class="keyword">if</span>(expr[i] == <span class="string">'('</span> || expr[i] == <span class="string">')'</span> || expr[i] == <span class="string">'+'</span> </span><br><span class="line">			|| expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span> || expr[i] == <span class="string">'/'</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">string</span> tmp;</span><br><span class="line">			tmp.push_back(expr[i]);</span><br><span class="line">			<span class="keyword">switch</span> (expr[i])</span><br><span class="line">			&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">				word.push_back(make_pair(tmp, <span class="number">1</span>));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">				word.push_back(make_pair(tmp, <span class="number">2</span>));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">				word.push_back(make_pair(tmp, <span class="number">3</span>));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">				word.push_back(make_pair(tmp, <span class="number">4</span>));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">				word.push_back(make_pair(tmp, <span class="number">6</span>));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">				word.push_back(make_pair(tmp, <span class="number">7</span>));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 如果是数字开头</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">string</span> tmp;</span><br><span class="line">			<span class="keyword">while</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp.push_back(expr[i]);</span><br><span class="line">				++i;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(expr[i] == <span class="string">'.'</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				++i;</span><br><span class="line">				<span class="keyword">if</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					tmp.push_back(<span class="string">'.'</span>);</span><br><span class="line">					<span class="keyword">while</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						tmp.push_back(expr[i]);</span><br><span class="line">						++i;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>  </span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// .后面不是数字，词法错误</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			word.push_back(make_pair(tmp, <span class="number">5</span>));</span><br><span class="line">			--i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 如果以.开头</span></span><br><span class="line">		<span class="keyword">else</span>  </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 以.开头，词法错误</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------语法分析----------------------------*/</span></span><br><span class="line"><span class="comment">// 读下一单词的种别编码</span></span><br><span class="line"><span class="keyword">void</span> Expression::Next()</span><br><span class="line">&#123;   </span><br><span class="line">	<span class="keyword">if</span>(idx &lt; word.size())</span><br><span class="line">		sym = word[idx++].second;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		sym = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// E → T &#123; +T | -T &#125; </span></span><br><span class="line"><span class="keyword">void</span> Expression::E()</span><br><span class="line">&#123;</span><br><span class="line">	T();</span><br><span class="line">	<span class="keyword">while</span>(sym == <span class="number">1</span> || sym == <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Next();</span><br><span class="line">		T();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T → F &#123; *F | /F &#125; </span></span><br><span class="line"><span class="keyword">void</span> Expression::T()</span><br><span class="line">&#123;</span><br><span class="line">	F();</span><br><span class="line">	<span class="keyword">while</span>(sym == <span class="number">3</span> || sym == <span class="number">4</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Next();</span><br><span class="line">		F();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// F → (E) | d</span></span><br><span class="line"><span class="keyword">void</span> Expression::F()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (sym == <span class="number">5</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Next();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(sym == <span class="number">6</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Next();</span><br><span class="line">		E();</span><br><span class="line">		<span class="keyword">if</span> (sym == <span class="number">7</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			Next();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			err = -<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		err = -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------求值部分----------------------------*/</span></span><br><span class="line"><span class="keyword">int</span> Expression::prior(<span class="keyword">int</span> sym)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">switch</span> (sym)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Expression::isOperator(<span class="keyword">int</span> sym)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">switch</span> (sym)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&gt; Expression::getPostfix( <span class="keyword">const</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&gt;&amp; expr)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt; output;  <span class="comment">// 输出</span></span><br><span class="line">	<span class="built_in">stack</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt; s;        <span class="comment">// 操作符栈</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expr.size(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; p = expr[i];</span><br><span class="line">		<span class="keyword">if</span>(isOperator(p.second))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(!s.empty() &amp;&amp; isOperator(s.top().second) &amp;&amp; prior(s.top().second)&gt;=prior(p.second))</span><br><span class="line">			&#123;</span><br><span class="line">				output.push_back(s.top());</span><br><span class="line">				s.pop();</span><br><span class="line">			&#125;</span><br><span class="line">			s.push(p);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(p.second == <span class="number">6</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			s.push(p);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(p.second == <span class="number">7</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(s.top().second != <span class="number">6</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				output.push_back(s.top());</span><br><span class="line">				s.pop();</span><br><span class="line">			&#125;</span><br><span class="line">			s.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			output.push_back(p);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!s.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		output.push_back(s.top());</span><br><span class="line">		s.pop();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Expression::popTwoNumbers( <span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt;&amp; s, <span class="keyword">double</span>&amp; first, <span class="keyword">double</span>&amp; second )</span><br><span class="line">&#123;</span><br><span class="line">	first = s.top();</span><br><span class="line">	s.pop();</span><br><span class="line">	second = s.top();</span><br><span class="line">	s.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Expression::stringToDouble( <span class="keyword">const</span> <span class="built_in">string</span>&amp; str )</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">double</span> d;</span><br><span class="line">	<span class="built_in">stringstream</span> ss;</span><br><span class="line">	ss &lt;&lt; str;</span><br><span class="line">	ss &gt;&gt; d;</span><br><span class="line">	<span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Expression::expCalculate( <span class="keyword">const</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&gt;&amp; postfix )</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">double</span> first,second;</span><br><span class="line">	<span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt; s;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;postfix.size(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; p = postfix[i];</span><br><span class="line">		<span class="keyword">switch</span> (p.second)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			popTwoNumbers(s, first, second);</span><br><span class="line">			s.push(second+first);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			popTwoNumbers(s, first, second);</span><br><span class="line">			s.push(second-first);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			popTwoNumbers(s, first, second);</span><br><span class="line">			s.push(second*first);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			popTwoNumbers(s, first, second);</span><br><span class="line">			s.push(second/first);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			s.push(stringToDouble(p.first));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">double</span> result = s.top();</span><br><span class="line">	s.pop();</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>使用方法（测试）：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;	</span><br><span class="line">	<span class="function">Expression <span class="title">e</span><span class="params">("(1.5+2.5)</span>*2+0.53")</span>;</span><br><span class="line">	<span class="keyword">if</span>(e.test())   <span class="comment">// 判断表达式是否合法</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; e.calculate() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="二、加入MFC工程">二、加入MFC工程</h3><p>OK，核心代码（表达式的合法性判断与求值）已经封装到 Expression 类中，下面要做的就是新建一个 MFC 工程，并把 Expression 类加入工程里，并实现按钮的功能就行了。</p>
<p>在 MFC 对话框上添加二十个 Button 控件和一个 Edit 控件（设置Disable属性为true，只用于显示），如下图：</p>
<p><center><img src="http://img.blog.csdn.net/20141007154354143?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></center><br><br><br>给 Edit 控件绑定一个变量 mEdit，然后给各个按钮添加单击响应函数，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClicked1()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 数字“1”按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"1"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClicked2()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 数字“2”按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"2"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClicked3()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 数字“3”按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"3"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClicked4()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 数字“4”按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"4"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClicked5()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 数字“5”按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"5"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClicked6()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 数字“6”按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"6"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClicked7()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 数字“7”按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"7"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClicked8()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 数字“8”按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"8"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClicked9()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 数字“9”按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"9"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClicked0()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 数字“0”按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"0"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClickedClear()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// “清屏”按钮</span></span><br><span class="line">	mEdit.SetWindowText(_T(<span class="string">""</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClickedBack()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// “后退”按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str.Left(str.GetLength()-<span class="number">1</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClickedLeft()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// “左括号”按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"("</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClickedRight()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// “右括号”按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">")"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClickedDot()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// "."按钮</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"."</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClickedAdd()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 加号</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"+"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClickedSub()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 减号</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"-"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClickedMul()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 乘号</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"*"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClickedDiv()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 除号</span></span><br><span class="line">	CString str;</span><br><span class="line">	mEdit.GetWindowText(str);</span><br><span class="line">	str = str + _T(<span class="string">"/"</span>);</span><br><span class="line">	mEdit.SetWindowText(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CCalculatorDlg::OnBnClickedEql()  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">// 等号，计算结果  </span></span><br><span class="line">    CString str;  </span><br><span class="line">    mEdit.GetWindowText(str);  </span><br><span class="line">    <span class="function">CT2CA <span class="title">pszConvertedAnsiString</span><span class="params">(str)</span></span>;  <span class="comment">// 将 TCHAR 转换为 LPCSTR  </span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">exp_str</span><span class="params">(pszConvertedAnsiString)</span></span>; <span class="comment">// 从 LPCSTR 构造 string  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (exp_str != <span class="string">""</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Expression <span class="title">e</span><span class="params">(exp_str)</span></span>;  </span><br><span class="line">        <span class="keyword">if</span>(e.test())  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">string</span> tmp;  </span><br><span class="line">            <span class="built_in">stringstream</span> ss;  </span><br><span class="line">            ss &lt;&lt; e.calculate();  </span><br><span class="line">            ss &gt;&gt; tmp;  </span><br><span class="line">            str = tmp.c_str();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            str = <span class="string">"输入错误"</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        mEdit.SetWindowText(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样，一个可以计算整数和小数的四则混合运算的简单计算器就完成了。</p>
<p>虽然 Expression 类可以对所有的输入进行解析，并判断其合法性。但是考虑到用户体验，最好还是对各个 Button 的输入进行一定的限制，比如+++++++。这就需要在按钮的响应函数里添加逻辑，详细的就不多说了。</p>
<p><strong>源码下载：</strong><a href="http://download.csdn.net/detail/lisong694767315/8009467" target="_blank" rel="external">http://download.csdn.net/detail/lisong694767315/8009467</a></p>
<p><br><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>写一个简单的计算器并不是什么很难的事，主要目的是要通过这个程序来学习和分析其中的核心算法。这个简易计算器的<strong>核心部分</strong>就是对输入的表达式的正确性判断与求值，其中包括对表达式的解析、中缀表达式转后缀表达式、后缀表达式求值等等几个方面。</p>
<p><center><img src="http://img.blog.csdn.net/20141007151700078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></center><br>]]>
    
    </summary>
    
      <category term="Cpp" scheme="http://yoursite.com/tags/Cpp/"/>
    
      <category term="Lang.-Cpp" scheme="http://yoursite.com/categories/Lang-Cpp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[算术表达式的合法性判断与求值（下）]]></title>
    <link href="http://yoursite.com/2014/10/10/arithmetic-expression-02/"/>
    <id>http://yoursite.com/2014/10/10/arithmetic-expression-02/</id>
    <published>2014-10-10T01:58:01.000Z</published>
    <updated>2015-05-10T10:18:43.177Z</updated>
    <content type="html"><![CDATA[<p><a href="http://songlee24.github.io/2014/10/05/arithmetic-expression-01/" target="_blank" rel="external">&lt;&lt; 算术表达式的合法性判断与求值（上）</a></p>
<p>上一篇讲到，通过编译原理的方法（词法分析和语法分析）来判断字符串表示的算术表达式的合法性。这一篇，接着讲在算术表达式合法的情况下，对表达式进行求值。</p>
<ul>
<li>问题：给定一个字符串，只包含 <strong>‘+’、’-‘、’*’、’/‘、数字、小数点、’(‘ 、’)’</strong>。  </li>
<li>要求：(1) 判断该算术表达式是否合法； (2) 如果合法，计算该表达式的值。</li>
</ul>
<h3 id="三、算术表达式的求值">三、算术表达式的求值</h3><p>表达式的求值是栈应用的一个典型范例。我们一般通过<strong>后缀表达式（逆波兰式）</strong>进行求值，<a id="more"></a>因为对后缀表达式求值比直接对中缀表达式求值简单很多。<strong>中缀表达式</strong>不仅依赖运算符的优先级，而且还要处理括号，而后缀表达式中已经考虑了运算符的优先级，且没有括号。</p>
<p>所以，这里对表达式的求值分两个步骤进行：首先，把中缀表达式转换为后缀表达式，然后，对后缀表达式求值。</p>
<p><strong>1）中缀转后缀</strong></p>
<p>在把中缀转后缀的过程中，需要考虑操作符的优先级。根据《数据结构与算法分析》一书中的描述，我们需要利用一个<strong>栈</strong>（存放操作符）和一个<strong>输出字符串Output</strong>，从左到右读入中缀表达式：</p>
<ol>
<li>如果字符是操作数，将它添加到 Output。</li>
<li>如果字符是操作符，从栈中弹出操作符，到 Output 中，直到遇到左括号 或 优先级较低的操作符（并不弹出）。然后把这个操作符 push 入栈。</li>
<li>如果字符是左括号，无理由入栈。</li>
<li>如果字符是右括号，从栈中弹出操作符，到 Output 中，直到遇到左括号。（左括号只弹出，不放入输出字符串）</li>
<li>中缀表达式读完以后，如果栈不为空，从栈中弹出所有操作符并添加到 Output 中。</li>
</ol>
<p>好了，下面直接上代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取运算符的优先级</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prior</span><span class="params">(<span class="keyword">char</span> c)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是运算符</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isOperator</span><span class="params">(<span class="keyword">char</span> c)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中缀转后缀</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getPostfix</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; expr)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> output;  <span class="comment">// 输出</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;  <span class="comment">// 操作符栈</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expr.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c = expr[i];</span><br><span class="line">        <span class="keyword">if</span>(isOperator(c))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!s.empty() &amp;&amp; isOperator(s.top()) &amp;&amp; prior(s.top())&gt;=prior(c))</span><br><span class="line">            &#123;</span><br><span class="line">                output.push_back(s.top());</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'('</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">')'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(s.top() != <span class="string">'('</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                output.push_back(s.top());</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            output.push_back(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        output.push_back(s.top());</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> expr = <span class="string">"a+b*c+(d*e+f)*g"</span>;</span><br><span class="line">    <span class="built_in">string</span> postfix = getPostfix(expr);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; expr &lt;&lt; endl &lt;&lt; postfix &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>相信应该不需要我再解释什么了，请对照上面的规则看代码。</p>
<p><strong>2）后缀表达式求值</strong></p>
<p>得到了后缀表达式以后，对后缀表达式的求值就变得非常简单了。只需要使用一个栈，从左到右读入后缀表达式：</p>
<ol>
<li>如果字符是操作数，把它压入堆栈。</li>
<li>如果字符是操作符，从栈中弹出两个操作数，执行相应的运算，然后把结果压入堆栈。（如果不能连续弹出两个操作数，说明表达式不正确）</li>
<li>当表达式扫描完以后，栈中存放的就是最后的计算结果。</li>
</ol>
<p>好了，话不多说，直接上代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prior</span><span class="params">(<span class="keyword">char</span> c)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isOperator</span><span class="params">(<span class="keyword">char</span> c)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getPostfix</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; expr)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> output;  <span class="comment">// 输出</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;  <span class="comment">// 操作符栈</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expr.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c = expr[i];</span><br><span class="line">        <span class="keyword">if</span>(isOperator(c))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!s.empty() &amp;&amp; isOperator(s.top()) &amp;&amp; prior(s.top())&gt;=prior(c))</span><br><span class="line">            &#123;</span><br><span class="line">                output.push_back(s.top());</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'('</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">')'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(s.top() != <span class="string">'('</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                output.push_back(s.top());</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            output.push_back(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        output.push_back(s.top());</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从栈中连续弹出两个操作数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">popTwoNumbers</span><span class="params">(<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;&amp; s, <span class="keyword">int</span>&amp; first, <span class="keyword">int</span>&amp; second)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    first = s.top();</span><br><span class="line">    s.pop();</span><br><span class="line">    second = s.top();</span><br><span class="line">    s.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算后缀表达式的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">expCalculate</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; postfix)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first,second;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;postfix.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c = postfix[i];</span><br><span class="line">        <span class="keyword">switch</span> (c)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">            popTwoNumbers(s, first, second);</span><br><span class="line">            s.push(second+first);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">            popTwoNumbers(s, first, second);</span><br><span class="line">            s.push(second-first);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">            popTwoNumbers(s, first, second);</span><br><span class="line">            s.push(second*first);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">            popTwoNumbers(s, first, second);</span><br><span class="line">            s.push(second/first);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            s.push(c-<span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> result = s.top();</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> expr = <span class="string">"5+2*(6-3)-4/2"</span>;</span><br><span class="line">    <span class="built_in">string</span> postfix = getPostfix(expr);</span><br><span class="line">    <span class="keyword">int</span> result = expCalculate(postfix);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The result is: "</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意，示例中的操作数都是单个的字符（0-9），但是通常的表达式不会是这种特殊情况，这就是我们需要对表达式进行词法解析的原因。</p>
<h3 id="四、解决问题">四、解决问题</h3><p>好了，下面我们就结合上篇讲的<a href="http://songlee24.github.io/blog/2014/10/13/suan-zhu-biao-da-shi-de-qiu-zhi-shang/" target="_blank" rel="external">词法分析</a>对一个含有整数或小数的表达式进行求值。</p>
<p>因为操作数不再是单个字符（个位数），我们需要对表达式进行词法解析。这里经过解析后，将<code>(单词, 种别编码)</code>对存入到一个<code>vector&lt;pair&lt;string, int&gt;&gt;</code>中，所以我们的中缀转后缀、后缀表达式求值都是对这个<code>vector</code>结构进行遍历。</p>
<p>假设表达式已经判断为合法，求值的完整代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;utility&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">word_analysis</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;&amp; word, <span class="keyword">const</span> <span class="built_in">string</span> expr)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expr.length(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果是 + - * / ( )</span></span><br><span class="line">        <span class="keyword">if</span>(expr[i] == <span class="string">'('</span> || expr[i] == <span class="string">')'</span> || expr[i] == <span class="string">'+'</span> </span><br><span class="line">            || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span> || expr[i] == <span class="string">'/'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            tmp.push_back(expr[i]);</span><br><span class="line">            <span class="keyword">switch</span> (expr[i])</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">2</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">3</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">4</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">6</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">7</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是数字开头</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            <span class="keyword">while</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.push_back(expr[i]);</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(expr[i] == <span class="string">'.'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                <span class="keyword">if</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    tmp.push_back(<span class="string">'.'</span>);</span><br><span class="line">                    <span class="keyword">while</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        tmp.push_back(expr[i]);</span><br><span class="line">                        ++i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>  </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// .后面不是数字，词法错误</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            word.push_back(make_pair(tmp, <span class="number">5</span>));</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果以.开头</span></span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 以.开头，词法错误</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取运算符的优先级</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prior</span><span class="params">(<span class="keyword">int</span> sym)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (sym)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 种别编码 判定是否是运算符</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isOperator</span><span class="params">(<span class="keyword">int</span> sym)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (sym)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt; getPostfix(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;&amp; expr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt; output;  <span class="comment">// 输出</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt; s;  <span class="comment">// 操作符栈</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expr.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; p = expr[i];</span><br><span class="line">        <span class="keyword">if</span>(isOperator(p.second))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!s.empty() &amp;&amp; isOperator(s.top().second) &amp;&amp; prior(s.top().second)&gt;=prior(p.second))</span><br><span class="line">            &#123;</span><br><span class="line">                output.push_back(s.top());</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            s.push(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p.second == <span class="number">6</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s.push(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p.second == <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(s.top().second != <span class="number">6</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                output.push_back(s.top());</span><br><span class="line">                s.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            output.push_back(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        output.push_back(s.top());</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从栈中连续弹出两个操作数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">popTwoNumbers</span><span class="params">(<span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt;&amp; s, <span class="keyword">double</span>&amp; first, <span class="keyword">double</span>&amp; second)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    first = s.top();</span><br><span class="line">    s.pop();</span><br><span class="line">    second = s.top();</span><br><span class="line">    s.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把string转换为double</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">stringToDouble</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; str;</span><br><span class="line">    ss &gt;&gt; d;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算后缀表达式的值</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">expCalculate</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;&amp; postfix)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> first,second;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;postfix.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; p = postfix[i];</span><br><span class="line">        <span class="keyword">switch</span> (p.second)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            popTwoNumbers(s, first, second);</span><br><span class="line">            s.push(second+first);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            popTwoNumbers(s, first, second);</span><br><span class="line">            s.push(second-first);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            popTwoNumbers(s, first, second);</span><br><span class="line">            s.push(second*first);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            popTwoNumbers(s, first, second);</span><br><span class="line">            s.push(second/first);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            s.push(stringToDouble(p.first));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> result = s.top();</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> expr = <span class="string">"(1.5+2.5)*2-0.5"</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt; word;</span><br><span class="line">    <span class="keyword">int</span> err_num = word_analysis(word, expr);</span><br><span class="line">    <span class="keyword">if</span> (-<span class="number">1</span> == err_num)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Word Error!"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> result = expCalculate(getPostfix(word));</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; expr + <span class="string">" = "</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>为了防止精度的损失，不论是整数还是小数，在这里都通过<code>stringToDouble()</code>函数转为 double 浮点数。</p>
<p><br><br><br><br><br></p>
<h3 id="附：字符串转数值类型">附：字符串转数值类型</h3><p><strong>方法一：atoi、atof</strong></p>
<p>在C语言的头文件 stdlib.h 里提供了两个函数，用于将字符串转换为整数或浮点数。函数原型分别为：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">atoi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *nptr)</span></span>;          <span class="comment">// 字符串转整数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">atof</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *nptr)</span></span>;       <span class="comment">// 字符串转浮点数</span></span><br></pre></td></tr></table></figure></p>
<p><strong>方法二：stringstream</strong></p>
<p>在C++里，可以利用 stringstream 方便的将 string 转换为 int、float、double：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">stringToDouble</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> d; </span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; str;    <span class="comment">// 把字符串写入字符流</span></span><br><span class="line">    ss &gt;&gt; d;      <span class="comment">// 输出到double</span></span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">doubleToString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; d)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str; </span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; d;  </span><br><span class="line">    ss &gt;&gt; str;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过 stringstream 将 string 转换为 int 或 float 与上面的方法是一样的，只需要改一下变量的类型就可以了。</p>
<p>（全文完）</p>
<p><br><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://songlee24.github.io/2014/10/05/arithmetic-expression-01/">&lt;&lt; 算术表达式的合法性判断与求值（上）</a></p>
<p>上一篇讲到，通过编译原理的方法（词法分析和语法分析）来判断字符串表示的算术表达式的合法性。这一篇，接着讲在算术表达式合法的情况下，对表达式进行求值。</p>
<ul>
<li>问题：给定一个字符串，只包含 <strong>‘+’、’-‘、’*’、’/‘、数字、小数点、’(‘ 、’)’</strong>。  </li>
<li>要求：(1) 判断该算术表达式是否合法； (2) 如果合法，计算该表达式的值。</li>
</ul>
<h3 id="三、算术表达式的求值">三、算术表达式的求值</h3><p>表达式的求值是栈应用的一个典型范例。我们一般通过<strong>后缀表达式（逆波兰式）</strong>进行求值，]]>
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Basic-算法与数据结构" scheme="http://yoursite.com/categories/Basic-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[算术表达式的合法性判断与求值（上）]]></title>
    <link href="http://yoursite.com/2014/10/05/arithmetic-expression-01/"/>
    <id>http://yoursite.com/2014/10/05/arithmetic-expression-01/</id>
    <published>2014-10-05T01:49:03.000Z</published>
    <updated>2015-05-10T10:19:33.516Z</updated>
    <content type="html"><![CDATA[<p>在写一个计算器时遇到了一个问题，就是对字符串表示的<strong>算术表达式</strong>的合法性判断与求值。下面记录一下我的解决方案。</p>
<h3 id="一、问题描述">一、问题描述</h3><p>问题：给定一个字符串，只包含 <strong>‘+’、’-‘、’*’、’/‘、数字、小数点、’(‘ 、’)’</strong>。</p>
<p>要求：(1) 判断该算术表达式是否合法； (2) 如果合法，计算该表达式的值。</p>
<h3 id="二、判断表达式的合法性">二、判断表达式的合法性</h3><a id="more"></a>
<p>相信学过《<a href="http://book.douban.com/subject/6091300/" target="_blank" rel="external">编译原理</a>》的人都知道，利用里面讲的分析方法可以对源代码进行解析。而<strong>算术表达式</strong>也是源代码的一部分，所以利用编译方法也可以很容易地判断表达式的合法性。</p>
<p>与源代码相比，算术表达式只包含有很少的字符，所以解析起来也简单很多。下面从词法分析和语法分析两个方面来说明。</p>
<p><strong>1）词法分析</strong></p>
<p>下面先定一下表达式涉及到的单词的种别编码：</p>
<p><img src="http://img.blog.csdn.net/20141006175947479?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>识别上表所列的单词的状态转换图：</p>
<p><img src="http://img.blog.csdn.net/20141006184215899?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>C++实现：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;utility&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">word_analysis</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;&amp; word, <span class="keyword">const</span> <span class="built_in">string</span> expr)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expr.length(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果是 + - x ÷ ( )</span></span><br><span class="line">        <span class="keyword">if</span>(expr[i] == <span class="string">'('</span> || expr[i] == <span class="string">')'</span> || expr[i] == <span class="string">'+'</span> </span><br><span class="line">            || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span> || expr[i] == <span class="string">'/'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            tmp.push_back(expr[i]);</span><br><span class="line">            <span class="keyword">switch</span> (expr[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                    word.push_back(make_pair(tmp, <span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                    word.push_back(make_pair(tmp, <span class="number">2</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                    word.push_back(make_pair(tmp, <span class="number">3</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                    word.push_back(make_pair(tmp, <span class="number">4</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                    word.push_back(make_pair(tmp, <span class="number">6</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                    word.push_back(make_pair(tmp, <span class="number">7</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是数字开头</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            <span class="keyword">while</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.push_back(expr[i]);</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(expr[i] == <span class="string">'.'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                <span class="keyword">if</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    tmp.push_back(<span class="string">'.'</span>);</span><br><span class="line">                    <span class="keyword">while</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        tmp.push_back(expr[i]);</span><br><span class="line">                        ++i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>  </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// .后面不是数字，词法错误</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            word.push_back(make_pair(tmp, <span class="number">5</span>));</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果以.开头</span></span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 以.开头，词法错误</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;    </span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt; word;</span><br><span class="line">    <span class="built_in">string</span> expr = <span class="string">"(1.5+5.789)*82-10/2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> err_num = word_analysis(word, expr);</span><br><span class="line">    <span class="keyword">if</span> (-<span class="number">1</span> == err_num)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Word Error!"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No Word Error!"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的代码将识别出的单词-种别编码对 <code>(单词, 种别编码)</code> 存入一个 <code>vector&lt;pair&lt;string, int&gt;&gt;</code> 中。</p>
<p><strong>2）语法分析</strong></p>
<p>算术表达式的文法 G[E] 如下：  </p>
<blockquote>
<p> E → E+T | E-T | T<br> T → T*F | T/F | F<br> F → (E) | d</p>
</blockquote>
<p>消去非终结符E和T的左递归后，改写 G[E] 文法如下：</p>
<blockquote>
<p>E → TE’<br>E’ → +TE’ | -TE’ | ε<br>T → FT’<br>T’ → *FT’ | /FT’ | ε<br>F → (E) | d</p>
</blockquote>
<p>可以证明上述无递归文法是 LL(1) 文法，可以使用 <strong>递归下降分析法</strong>。递归下降分析法是确定的自上而下分析法，这种分析法要求文法是 LL(1) 文法。它的<strong>基本思想</strong>是：对文法中的每一个非终结符编写一个函数（或子程序），每个函数（或子程序）的功能是识别由该非终结符所表示的语法成分。</p>
<p>构造递归下降分析程序时，每个函数名是相应的非终结符，函数体是根据规则右部符号串的结构编写：</p>
<ul>
<li><p>当遇到终结符 a 时，则编写语句<br>if（当前读来的输入符号 == a）读下一个输入符号；</p>
</li>
<li><p>当遇到非终结符 A 时，则编写语句调用 A( )；</p>
</li>
<li><p>当遇到 A-&gt;ε 规则时，则编写语句<br>if（当前读来的输入符号 不属于 FOLLOW(A)）error()；</p>
</li>
<li><p>当某个非终结符的规则有多个候选式时，按 LL(1) 文法的条件能唯一地选择一个候选式进行推导。</p>
</li>
</ul>
<p>所以我们需要求出 <strong>FOLLOW(E’)</strong> 和 <strong>FOLLOW(T’)</strong>：</p>
<p><img src="http://img.blog.csdn.net/20150510181122458" alt=""></p>
<p>好了，下面直接上代码，在词法分析的基础上进行语法分析：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;utility&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt; word;</span><br><span class="line"><span class="built_in">string</span> expr = <span class="string">"(1.5+5.789)*82-10/2"</span>;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sym;</span><br><span class="line"><span class="keyword">int</span> err = <span class="number">0</span>; <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">E</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">E1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">T</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">T1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">F</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/*--------------------------------词法分析----------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">word_analysis</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;&amp; word, <span class="keyword">const</span> <span class="built_in">string</span> expr)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expr.length(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果是 + - x ÷ ( )</span></span><br><span class="line">        <span class="keyword">if</span>(expr[i] == <span class="string">'('</span> || expr[i] == <span class="string">')'</span> || expr[i] == <span class="string">'+'</span> </span><br><span class="line">            || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span> || expr[i] == <span class="string">'/'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            tmp.push_back(expr[i]);</span><br><span class="line">            <span class="keyword">switch</span> (expr[i])</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">2</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">3</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">4</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">6</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">7</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是数字开头</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            <span class="keyword">while</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.push_back(expr[i]);</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(expr[i] == <span class="string">'.'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                <span class="keyword">if</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    tmp.push_back(<span class="string">'.'</span>);</span><br><span class="line">                    <span class="keyword">while</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        tmp.push_back(expr[i]);</span><br><span class="line">                        ++i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>  </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// .后面不是数字，词法错误</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            word.push_back(make_pair(tmp, <span class="number">5</span>));</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果以.开头</span></span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 以.开头，词法错误</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--------------------------------语法分析----------------------------*/</span></span><br><span class="line"><span class="comment">// 读下一单词的种别编码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Next</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx &lt; word.size())</span><br><span class="line">        sym = word[idx++].second;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        sym = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// E → TE' </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">E</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    T();</span><br><span class="line">    E1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// E' → +TE' | -TE' | ε </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">E1</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sym == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Next();</span><br><span class="line">        T();</span><br><span class="line">        E1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sym == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Next();</span><br><span class="line">        T();</span><br><span class="line">        E1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sym != <span class="number">7</span> &amp;&amp; sym != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        err = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T → FT' </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">T</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    F();</span><br><span class="line">    T1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T' → *FT' | /FT' | ε </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">T1</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sym == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Next();</span><br><span class="line">        F();</span><br><span class="line">        T1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sym == <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Next();</span><br><span class="line">        F();</span><br><span class="line">        T1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sym != <span class="number">1</span> &amp;&amp; sym != <span class="number">2</span> &amp;&amp; sym != <span class="number">7</span> &amp;&amp; sym != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        err = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// F → (E) | d</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">F</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sym == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sym == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Next();</span><br><span class="line">        E();</span><br><span class="line">        <span class="keyword">if</span>(sym == <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            err = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        err = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> err_num = word_analysis(word, expr);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; expr &lt;&lt; endl &lt;&lt; <span class="string">"Word Analysis:"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (-<span class="number">1</span> == err_num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Word Error!"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 测试输出</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;::iterator beg = word.begin();</span><br><span class="line">        <span class="keyword">for</span>(;beg!=word.end(); ++beg)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"   ("</span> &lt;&lt; beg-&gt;first &lt;&lt; <span class="string">", "</span> &lt;&lt; beg-&gt;second &lt;&lt; <span class="string">")"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 词法正确，进行语法分析</span></span><br><span class="line">        Next();</span><br><span class="line">        E();</span><br><span class="line">        <span class="keyword">if</span> (sym == <span class="number">0</span> &amp;&amp; err == <span class="number">0</span>)  <span class="comment">// 注意要判断两个条件</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Right Expression."</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Wrong Expression."</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>另外，还有一种更简单的形式，将文法 G(E) 用<strong>扩充BNF表示法</strong>进行改写：</p>
<blockquote>
<p>E → T { +T | -T }<br>T → F { *F | /F }<br>F → (E) | d</p>
</blockquote>
<p>然后对这种变形文法使用递归下降分析法：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;utility&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt; word;</span><br><span class="line"><span class="built_in">string</span> expr = <span class="string">"(1.5+5.789)*82-10/2"</span>;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sym;</span><br><span class="line"><span class="keyword">int</span> err = <span class="number">0</span>; <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">T</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">F</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/*--------------------------------词法分析----------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">word_analysis</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;&amp; word, <span class="keyword">const</span> <span class="built_in">string</span> expr)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expr.length(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果是 + - x ÷ ( )</span></span><br><span class="line">        <span class="keyword">if</span>(expr[i] == <span class="string">'('</span> || expr[i] == <span class="string">')'</span> || expr[i] == <span class="string">'+'</span> </span><br><span class="line">            || expr[i] == <span class="string">'-'</span> || expr[i] == <span class="string">'*'</span> || expr[i] == <span class="string">'/'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            tmp.push_back(expr[i]);</span><br><span class="line">            <span class="keyword">switch</span> (expr[i])</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">2</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">3</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">4</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">6</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                word.push_back(make_pair(tmp, <span class="number">7</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是数字开头</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> tmp;</span><br><span class="line">            <span class="keyword">while</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.push_back(expr[i]);</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(expr[i] == <span class="string">'.'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                <span class="keyword">if</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    tmp.push_back(<span class="string">'.'</span>);</span><br><span class="line">                    <span class="keyword">while</span>(expr[i]&gt;=<span class="string">'0'</span> &amp;&amp; expr[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        tmp.push_back(expr[i]);</span><br><span class="line">                        ++i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>  </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// .后面不是数字，词法错误</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            word.push_back(make_pair(tmp, <span class="number">5</span>));</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果以.开头</span></span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 以.开头，词法错误</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*--------------------------------语法分析----------------------------*/</span></span><br><span class="line"><span class="comment">// 读下一单词的种别编码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Next</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx &lt; word.size())</span><br><span class="line">        sym = word[idx++].second;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        sym = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// E → T &#123; +T | -T &#125; </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">E</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    T();</span><br><span class="line">    <span class="keyword">while</span>(sym == <span class="number">1</span> || sym == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Next();</span><br><span class="line">        T();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T → F &#123; *F | /F &#125; </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">T</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    F();</span><br><span class="line">    <span class="keyword">while</span>(sym == <span class="number">3</span> || sym == <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Next();</span><br><span class="line">        F();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// F → (E) | d</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">F</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sym == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sym == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Next();</span><br><span class="line">        E();</span><br><span class="line">        <span class="keyword">if</span> (sym == <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            err = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        err = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> err_num = word_analysis(word, expr);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; expr &lt;&lt; endl &lt;&lt; <span class="string">"Word Analysis:"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (-<span class="number">1</span> == err_num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Word Error!"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 测试输出</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;::iterator beg = word.begin();</span><br><span class="line">        <span class="keyword">for</span>(;beg!=word.end(); ++beg)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"   ("</span> &lt;&lt; beg-&gt;first &lt;&lt; <span class="string">", "</span> &lt;&lt; beg-&gt;second &lt;&lt; <span class="string">")"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 词法正确，进行语法分析</span></span><br><span class="line">        Next();</span><br><span class="line">        E();</span><br><span class="line">        <span class="keyword">if</span> (sym == <span class="number">0</span> &amp;&amp; err == <span class="number">0</span>)  <span class="comment">// 注意要判断两个条件</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Right Expression."</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Wrong Expression."</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>基于这种文法形式写程序，<strong>只需要写3个函数（因为只有3个非终结符），而且不需要求 FOLLOW 集合。</strong></p>
<p>测试结果：</p>
<p><img src="http://img.blog.csdn.net/20141006200250847?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><br><br><br></p>
<p><a href="http://songlee24.github.io/2014/10/10/arithmetic-expression-02/" target="_blank" rel="external"><span style="font-size:25px">算术表达式的合法性判断与求值（下）&gt;&gt;</span></a></p>
<p><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在写一个计算器时遇到了一个问题，就是对字符串表示的<strong>算术表达式</strong>的合法性判断与求值。下面记录一下我的解决方案。</p>
<h3 id="一、问题描述">一、问题描述</h3><p>问题：给定一个字符串，只包含 <strong>‘+’、’-‘、’*’、’/‘、数字、小数点、’(‘ 、’)’</strong>。</p>
<p>要求：(1) 判断该算术表达式是否合法； (2) 如果合法，计算该表达式的值。</p>
<h3 id="二、判断表达式的合法性">二、判断表达式的合法性</h3>]]>
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Basic-算法与数据结构" scheme="http://yoursite.com/categories/Basic-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【Linux编程】C/C++获取目录下文件或目录]]></title>
    <link href="http://yoursite.com/2014/09/20/linux-get-directory/"/>
    <id>http://yoursite.com/2014/09/20/linux-get-directory/</id>
    <published>2014-09-20T09:04:17.000Z</published>
    <updated>2015-05-10T08:46:09.871Z</updated>
    <content type="html"><![CDATA[<p>在Unix/Linux系统中，要获取一个指定目录下所有的文件或文件夹，一般用<code>dirent.h</code>（POSIX标准定义的目录操作头文件）。</p>
<h3 id="一、数据类型">一、数据类型</h3><p>在头文件<code>&lt;dirent.h&gt;</code>中定义了两种主要的数据类型。</p>
<p><strong>DIR</strong>：代表一个目录流的结构。<a id="more"></a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> __dirstream</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> *__fd;              <span class="comment">/* 'struct hurd_fd' pointer for descriptor.*/</span></span><br><span class="line">    <span class="keyword">char</span> *__data;            <span class="comment">/* Directory block.  */</span></span><br><span class="line">    <span class="keyword">int</span> __entry_data;        <span class="comment">/* Entry number `__data' corresponds to.*/</span></span><br><span class="line">    <span class="keyword">char</span> *__ptr;             <span class="comment">/* Current pointer into the block.*/</span></span><br><span class="line">    <span class="keyword">int</span> __entry_ptr;         <span class="comment">/* Entry number `__ptr' corresponds to.*/</span></span><br><span class="line">    size_t __allocation;          <span class="comment">/* Space allocated for the block.*/</span></span><br><span class="line">    size_t __size;                <span class="comment">/* Total valid data in the block.*/</span></span><br><span class="line">    __libc_lock_define (, __lock) <span class="comment">/* Mutex lock for this structure.*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> __dirstream DIR;</span><br></pre></td></tr></table></figure></p>
<p><strong>struct dirent</strong>：包含一个文件或目录信息的结构体。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> dirent</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">long</span> d_ino;                 <span class="comment">/* inode number 索引节点号 */</span></span><br><span class="line">    off_t d_off;                <span class="comment">/* offset to this dirent 在目录文件中的偏移 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> d_reclen;    <span class="comment">/* length of this d_name 文件名长 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> d_type;       <span class="comment">/* the type of d_name 文件类型 */</span>    </span><br><span class="line">    <span class="keyword">char</span> d_name [NAME_MAX+<span class="number">1</span>];   <span class="comment">/* file name 文件名，最长255字符 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="二、函数原型">二、函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">DIR* opendir(<span class="keyword">const</span> <span class="keyword">char</span>* dirname);</span><br><span class="line"><span class="comment">/* 打开一个目录：</span><br><span class="line">        成功 - 返回指向DIR类型对象的指针。</span><br><span class="line">        失败 - 返回NULL    */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">closedir</span><span class="params">(DIR *dirp)</span></span>;</span><br><span class="line"><span class="comment">/* 关闭目录流：</span><br><span class="line">        成功 - 返回0</span><br><span class="line">        失败 - 返回-1    */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> dirent *readdir(DIR *dirp);</span><br><span class="line"><span class="comment">/* 读取目录流：</span><br><span class="line">        成功 - 返回指向struct dirent对象的指针。</span><br><span class="line">        失败 - 返回NULL（出错或流末尾）  */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">readdir_r</span><span class="params">(DIR *dirp, <span class="keyword">struct</span> dirent *entry, <span class="keyword">struct</span> dirent **result)</span></span>;</span><br><span class="line"><span class="comment">/* 读取目录流：用 dirp 当前位置的目录初始化entry，并让 result 指向 entry。</span><br><span class="line">        成功 - 返回0</span><br><span class="line">        失败 - 返回error number   */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rewinddir</span><span class="params">(DIR *dirp)</span></span>;</span><br><span class="line"><span class="comment">/* 重置目录流的位置到开头 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seekdir</span><span class="params">(DIR *dirp, <span class="keyword">long</span> <span class="keyword">int</span> loc)</span></span>;</span><br><span class="line"><span class="comment">/* 设置目录流的位置，设置以后readdir()会读取到loc位置的目录。 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">int</span> <span class="title">telldir</span><span class="params">(DIR *dirp)</span></span>;</span><br><span class="line"><span class="comment">/* 返回目录流的当前位置 */</span></span><br></pre></td></tr></table></figure>
<h3 id="三、示例代码">三、示例代码</h3><p>下面是一段 C 代码，输出指定目录下的所有文件或目录名：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;dirent.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	DIR *dp;</span><br><span class="line">	<span class="keyword">struct</span> dirent *dirp;</span><br><span class="line">	<span class="keyword">char</span> dirname[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Please input a directory: "</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,dirname);</span><br><span class="line">	<span class="keyword">if</span>((dp = opendir(dirname)) == NULL)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Can't open %s\n"</span>, dirname);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>((dirp = readdir(dp)) != NULL)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, dirp-&gt;d_name);</span><br><span class="line"></span><br><span class="line">	closedir(dp);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>C++代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span>&lt;dirent.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> dirname;</span><br><span class="line">	DIR *dp;</span><br><span class="line">	<span class="keyword">struct</span> dirent *dirp;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input a directory: "</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; dirname;</span><br><span class="line">	<span class="keyword">if</span>((dp = opendir(dirname.c_str())) == NULL)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"Can't open "</span> &lt;&lt; dirname &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>((dirp = readdir(dp)) != NULL)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; dirp-&gt;d_name &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	closedir(dp);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>有些情况下，我们只要输出文件而不需要文件夹（目录），这时可以通过<code>dirent</code>结构体中的<code>d_type</code>进行过滤。<code>d_type</code>表示类型，4表示目录，8表示普通文件，0表示未知设备。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>((dirp = readdir(dp)) != NULL)</span><br><span class="line">	<span class="keyword">if</span>(dirp-&gt;d_type == <span class="number">8</span>)  <span class="comment">// 只输出文件名，不输出目录名</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; dirp-&gt;d_name &lt;&lt; endl;</span><br></pre></td></tr></table></figure></p>
<p>如果需要查找指定类型（特定后缀）的文件，可以使用<strong>C++11</strong>的正则表达式进行匹配：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include&lt;regex&gt;</span></span><br><span class="line"><span class="function">regex <span class="title">reg_obj</span><span class="params">(".*\.doc", regex::icase)</span></span>;</span><br><span class="line"><span class="keyword">while</span>((dirp = readdir(dp)) != NULL)</span><br><span class="line">	<span class="keyword">if</span>(regex_match(dirp-&gt;d_name, reg_obj))  <span class="comment">// regex_match()匹配</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; dirp-&gt;d_name &lt;&lt; endl;</span><br></pre></td></tr></table></figure></p>
<p>另外，Unix/linux下提供了POSIX标准的正则库<a href="http://pubs.opengroup.org/onlinepubs/7908799/xsh/regex.h.html" target="_blank" rel="external"> regex.h </a> 。</p>
<p><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Unix/Linux系统中，要获取一个指定目录下所有的文件或文件夹，一般用<code>dirent.h</code>（POSIX标准定义的目录操作头文件）。</p>
<h3 id="一、数据类型">一、数据类型</h3><p>在头文件<code>&lt;dirent.h&gt;</code>中定义了两种主要的数据类型。</p>
<p><strong>DIR</strong>：代表一个目录流的结构。]]>
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="System-Linux" scheme="http://yoursite.com/categories/System-Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C/C++内存对齐]]></title>
    <link href="http://yoursite.com/2014/09/20/memory-alignment/"/>
    <id>http://yoursite.com/2014/09/20/memory-alignment/</id>
    <published>2014-09-19T17:57:06.000Z</published>
    <updated>2015-05-10T08:42:58.436Z</updated>
    <content type="html"><![CDATA[<p>下面是网易的一道笔试题：<code>struct { uint32_t m1; char m2; } varray[2];</code>以下哪些判断一定成立？（多选）</p>
<ol>
<li><code>sizeof(varray[0]) == 5</code></li>
<li><code>sizeof(varray[0]) == 8</code></li>
<li><code>(void*)&amp;(varray[0].m1) &lt; (void*)&amp;(varray[0].m2)</code></li>
<li><code>(char*)&amp;varray[0] == (char*)&amp;(varray[0].m1)</code></li>
<li><code>(char*)&amp;varray[0] + sizeof(varray[0]) == (char*)&amp;varray[1]</code></li>
<li><code>(char*)&amp;(varray[0].m2) + 1 == (char*)&amp;varray[1]</code></li>
<li><code>(char*)&amp;(varray[0].m2) + 4 == (char*)&amp;varray[1]</code></li>
</ol>
<p>这个题目考查的就是内存对齐的知识点，看完这篇文章你就知道这道题应该选什么了。<a id="more"></a></p>
<p><br></p>
<h3 id="一、什么是内存对齐">一、什么是内存对齐</h3><p><strong>内存对齐（Memory alignment）</strong>，也叫字节对齐。</p>
<p>现代计算机中内存空间都是按照 byte 划分的，从理论上讲似乎对任何类型的变量的访问可以从任何地址开始，但实际情况是在访问特定类型变量的时候经常在特定的内存地址访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序的一个接一个的排放，这就是对齐。</p>
<p>举一个简单的例子，<code>uint32_t</code>所占内存空间为 4 bytes，<code>char</code>为 1 byte。如果把它们放在一个结构体中，则所占的内存空间应该是 4 + 1 = 5 bytes 。而事实上，在VS2012和gcc环境下，sizeof 操作的结果都是 8 bytes：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> m1;    <span class="comment">// #include&lt;stdint.h&gt;</span></span><br><span class="line">    <span class="keyword">char</span> m2;</span><br><span class="line">&#125;varray;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">sizeof</span>(varray.m1));  <span class="comment">// 输出4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">sizeof</span>(varray.m2));  <span class="comment">// 输出1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">sizeof</span>(varray));     <span class="comment">// 输出8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>示图：</p>
<p><img src="http://img.blog.csdn.net/20140921230124812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>这里是以4个字节为一个对齐单位。</p>
<p><br></p>
<h3 id="二、为什么要内存对齐">二、为什么要内存对齐</h3><p>之所以要内存对齐，有两方面的原因：</p>
<ul>
<li><p><strong>平台原因</strong>：各个硬件平台对存储空间的处理上有很大的不同。一些平台对某些特定类型的数据只能从某些特定地址开始存取。————- 比如，有些架构的CPU在访问 一个没有进行对齐的变量的时候会发生错误，那么在这种架构下编程必须保证字节对齐。</p>
</li>
<li><p><strong>性能原因</strong>：内存对齐可以提高存取效率。————- 比如，有些平台每次读都是从偶地址开始，如果一个int型（假设为32位系统）如果存放在偶地址开始的地方，那么一个读周期就可以读出这32bit，而如果存放在奇地址开始的地方，就需要2个读周期，并对两次读出的结果的高低字节进行拼凑才能得到该32bit数据。</p>
</li>
</ul>
<p><br></p>
<h3 id="三、对齐的规则">三、对齐的规则</h3><p>每个特定平台上的编译器都有自己的默认“对齐系数”（也叫对齐模数）。你可以通过预编译命令<code>#pragma pack(n)</code>，n=1,2,4,8,16 来改变这一系数，其中 n 就是你要指定的“对齐系数”。</p>
<p><strong>1）概念：</strong></p>
<p><strong>有效对齐值</strong>：是 <code>#pragma pack</code>指定值 和 结构体中最长数据类型长度 中<strong>较小</strong>的那个。有效对齐值也叫<strong>对齐单位</strong>。</p>
<p>注意：VS、VC 默认是#pragma pack(8)，而 gcc 默认是#pragma pack(4)，并且gcc只支持1，2，4对齐。</p>
<p><strong>2）规则：</strong></p>
<ol>
<li><p>结构体变量的<strong>首地址</strong>是有效对齐值（对齐单位）的整数倍。</p>
</li>
<li><p>结构体第一个成员的<strong>偏移量（offset）</strong>为0，以后每个成员相对于结构体首地址的 offset 都是<strong>该成员大小与有效对齐值中较小那个</strong>的整数倍，如有需要编译器会在成员之间加上填充字节。</p>
</li>
<li><p><strong>结构体的总大小</strong>为 有效对齐值 的<strong>整数倍</strong>，如有需要编译器会在最末一个成员之后加上填充字节。</p>
</li>
<li><p>结构体内类型相同的连续元素将在连续的空间内，和数组一样。</p>
</li>
</ol>
<p>下面给出几个例子帮助理解（测试环境为VS2012）：</p>
<p>例一：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;    <span class="comment">// 4个字节</span></span><br><span class="line">    <span class="keyword">char</span> c1;  <span class="comment">// 1个字节</span></span><br><span class="line">    <span class="keyword">char</span> c2;  <span class="comment">// 1个字节</span></span><br><span class="line">&#125;x1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> c1;  <span class="comment">// 1个字节</span></span><br><span class="line">    <span class="keyword">int</span> i;    <span class="comment">// 4个字节</span></span><br><span class="line">    <span class="keyword">char</span> c2;  <span class="comment">// 1个字节</span></span><br><span class="line">&#125;x2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> c1;  <span class="comment">// 1个字节</span></span><br><span class="line">    <span class="keyword">char</span> c2;  <span class="comment">// 1个字节</span></span><br><span class="line">    <span class="keyword">int</span> i;    <span class="comment">// 4个字节</span></span><br><span class="line">&#125;x3;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">sizeof</span>(x1));  <span class="comment">// 输出8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">sizeof</span>(x2));  <span class="comment">// 输出12</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">sizeof</span>(x3));  <span class="comment">// 输出8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看出，上面定义的三个结构体只是交换了成员声明的顺序。由于结构体中最长的数据类型为4个字节，而VS2010默认#pragma pack(8)，所以<strong>有效对齐值（对齐单位）为 4 bytes</strong>。根据前三条规则可以画出以下图：</p>
<p><img src="http://img.blog.csdn.net/20140922013948031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>例二：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a;      <span class="comment">// 4个字节</span></span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">6</span>];  <span class="comment">// 6个字节</span></span><br><span class="line">    <span class="keyword">double</span> c;   <span class="comment">// 8个字节</span></span><br><span class="line">&#125;st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">sizeof</span>(st));  <span class="comment">// 输出24</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面结构体中最长的数据类型 double 为 8 个字节，而VS2012中默认#pragma pack(8)，所以<strong>有效对齐值（对齐单位）</strong>为 <strong>8 bytes</strong>。根据前三条规则可以画出以下图：</p>
<p><img src="http://img.blog.csdn.net/20140922222535500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>其中的字符数组 <code>char b[6]</code> 可以看做6个单独的 char 成员。</p>
<p><br></p>
<h3 id="四、pragma_pack(n)">四、pragma pack(n)</h3><ul>
<li><p>上面说到，不同平台上编译器的 pragma pack 默认值不同。而我们可以通过预编译命令<code>#pragma pack(n)</code>，n=1,2,4,8,16 来改变这一对齐系数。</p>
</li>
<li><p><code>#pragma pack(n)</code>是通过改变<strong>有效对齐值</strong>来改变数据成员在内存中的布局，若你设定的 n 值没有影响或改变有效对齐值，则成员在内存中的布局不会改变。</p>
</li>
</ul>
<p>下面就看看在1、2、4字节对齐的情况下例一、例二的变化：</p>
<p><strong>1字节对齐：#pragma pack(1)</strong></p>
<p>这时的有效对齐值（对齐单位）为 1 字节，则根据对齐规则，可知成员都是连续存储的。</p>
<p>例一中的输出结果会变为 6，6，6，如下图：</p>
<p><img src="http://img.blog.csdn.net/20140922203635315?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>例二中输出结果则变为 4 + 6 + 8 = 18：</p>
<p><img src="http://img.blog.csdn.net/20140922223352175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><strong>2字节对齐：#pragma pack(2)</strong></p>
<p>这时的有效对齐值（对齐单位）为 2 字节，则根据对齐规则，可知例一的输出结果会变为 6，8，6，如下图：</p>
<p><img src="http://img.blog.csdn.net/20140922211012703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>例二结构体中最长数据类型 double 为 8 个字节，所以有效对齐值是 2 。此时输出结果还是18，如下图：</p>
<p><img src="http://img.blog.csdn.net/20140922224436503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><strong>4字节对齐：#pragma pack(4)</strong></p>
<p>对于例一，结构体中最长的数据类型 int 是 4 个字节，所以此时的有效对齐值（对齐单位）仍为 4，没有变化，所以输出仍然是 8，12，8。</p>
<p>而在例二中，原来的有效对齐值为 8，现在变成了 4 。所以输出结果变为 20，具体如下图：</p>
<p><img src="http://img.blog.csdn.net/20140922225651156?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>对于 8 字节对齐、 16 字节对齐，在这里就不举例了，相信根据对齐规则你可以很容易写出来。需要注意的是，有些编译器，比如gcc，只支持 1，2，4 对齐。</p>
<p><br><br><br><br></p>
<h3 id="附：答案">附：答案</h3><p>相信看到这里，文章开头的那个网易笔试题应该就很容易得出答案了。只需要根据内存对齐把结构体的内存布局图画出来就一目了然了：</p>
<p><img src="http://img.blog.csdn.net/20140922231621296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>所以多选答案应该是 2、4、5、7。</p>
<p>对于这种类型的题目，最好的办法就是根据对齐规则画出对齐后的内存布局图，简单清晰且不容易出错。</p>
<p>（全文完）</p>
<p><br><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>下面是网易的一道笔试题：<code>struct { uint32_t m1; char m2; } varray[2];</code>以下哪些判断一定成立？（多选）</p>
<ol>
<li><code>sizeof(varray[0]) == 5</code></li>
<li><code>sizeof(varray[0]) == 8</code></li>
<li><code>(void*)&amp;(varray[0].m1) &lt; (void*)&amp;(varray[0].m2)</code></li>
<li><code>(char*)&amp;varray[0] == (char*)&amp;(varray[0].m1)</code></li>
<li><code>(char*)&amp;varray[0] + sizeof(varray[0]) == (char*)&amp;varray[1]</code></li>
<li><code>(char*)&amp;(varray[0].m2) + 1 == (char*)&amp;varray[1]</code></li>
<li><code>(char*)&amp;(varray[0].m2) + 4 == (char*)&amp;varray[1]</code></li>
</ol>
<p>这个题目考查的就是内存对齐的知识点，看完这篇文章你就知道这道题应该选什么了。]]>
    
    </summary>
    
      <category term="Cpp" scheme="http://yoursite.com/tags/Cpp/"/>
    
      <category term="Lang.-Cpp" scheme="http://yoursite.com/categories/Lang-Cpp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++进阶之虚函数表]]></title>
    <link href="http://yoursite.com/2014/09/02/cpp-virtual-table/"/>
    <id>http://yoursite.com/2014/09/02/cpp-virtual-table/</id>
    <published>2014-09-02T02:41:56.000Z</published>
    <updated>2015-05-10T08:48:59.540Z</updated>
    <content type="html"><![CDATA[<p>C++通过<a href="http://songlee24.github.io/2014/07/17/cpp-inheritance/" target="_blank" rel="external">继承（inheritance）</a>和<a href="http://songlee24.github.io/2014/07/17/cpp-virtual-function/" target="_blank" rel="external">虚函数（virtual function）</a>来实现多态性。所谓多态，简单地说就是，将基类的指针或引用绑定到子类的实例，然后通过基类的指针或引用调用实际子类的成员函数（虚函数）。本文将介绍单继承、多重继承下虚函数的实现机制。</p>
<p><br></p>
<h3 id="一、虚函数表">一、虚函数表</h3><p>为了支持虚函数机制，编译器为每一个拥有虚函数的类的实例创建了一个<strong>虚函数表（virtual table）</strong>，这个表中有许多的<strong>槽（slot）</strong>，每个槽中存放的是虚函数的地址。虚函数表解决了继承、覆盖、添加虚函数的问题，保证其真实反应实际的函数。<a id="more"></a></p>
<p>为了能够找到 virtual table，编译器在每个拥有虚函数的类的实例中插入了一个成员指针 vptr，指向虚函数表。下面是一个例子：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">x</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::x()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">y</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::y()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">z</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::z()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*pFun)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	Base b;</span><br><span class="line">	<span class="keyword">int</span>* vptr = (<span class="keyword">int</span>*)&amp;b;                     <span class="comment">// 虚函数表地址</span></span><br><span class="line"></span><br><span class="line">	pFun func1 = (pFun)*((<span class="keyword">int</span>*)*vptr);        <span class="comment">// 第一个函数</span></span><br><span class="line">	pFun func2 = (pFun)*((<span class="keyword">int</span>*)*vptr+<span class="number">1</span>);      <span class="comment">// 第二个函数</span></span><br><span class="line">	pFun func3 = (pFun)*((<span class="keyword">int</span>*)*vptr+<span class="number">2</span>);      <span class="comment">// 第三个函数</span></span><br><span class="line">	</span><br><span class="line">	func1();     <span class="comment">// 输出Base::x()</span></span><br><span class="line">	func2();     <span class="comment">// 输出Base::y()</span></span><br><span class="line">	func3();     <span class="comment">// 输出Base::z()</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面定义了一个Base类，其中有三个虚函数。我们将Base类对象取址 &amp;b 并强制转换为 int<em>，取得虚函数表的地址。然后对虚函数表的地址取值 \</em>vptr 并强转为 int*，即取得第一个虚函数的地址了。将第一个虚函数的地址加1，取得第二个虚函数的地址，再加1即取得第三个虚函数的地址。</p>
<p><strong>注意</strong>，之所以可以通过对象实例的地址得到虚函数表，是因为 vptr 指针位于对象实例的最前面（这是由编译器决定的，主要是为了保证取到虚函数表有最高的性能——如果有多层继承或是多重继承的情况下）。如图所示：</p>
<p><img src="http://img.blog.csdn.net/20140831232526064?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>在VS2012中加断点进行Debug可以查看到虚函数表：</p>
<p><img src="http://img.blog.csdn.net/20140831233726598?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><br></p>
<h3 id="二、单继承时的虚函数表">二、单继承时的虚函数表</h3><p><strong>1、无虚函数覆盖</strong></p>
<p>假如现有单继承关系如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">x</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::x()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">y</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::y()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">z</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::z()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Derive : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">x1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derive::x1()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">y1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derive::y1()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">z1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derive::z1()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>在这个单继承的关系中，子类没有重写父类的任何方法，而是加入了三个新的虚函数。Derive类实例的虚函数表布局如图示：</p>
<p><img src="http://img.blog.csdn.net/20140901001226046?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<ul>
<li>Derive class 继承了 Base class 中的三个虚函数，准确的说，是该函数实体的地址被拷贝到 Derive 实例的虚函数表对应的 slot 之中。</li>
<li>新增的 虚函数 置于虚函数表的后面，并按声明顺序存放。</li>
</ul>
<p><strong>2、有虚函数覆盖</strong></p>
<p>如果在继承关系中，子类重写了父类的虚函数：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">x</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::x()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">y</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::y()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">z</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base::z()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Derive : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">x</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derive::x()"</span> &lt;&lt; endl; &#125;  <span class="comment">// 重写</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">y1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derive::y1()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">z1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derive::z1()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>则Derive类实例的虚函数表布局为：</p>
<p><img src="http://img.blog.csdn.net/20140901004001914?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>相比于无覆盖的情况，只是把 <code>Derive::x()</code> 覆盖了<code>Base::x()</code>，即第一个槽的函数地址发生了变化，其他的没有变化。</p>
<p>这时，如果通过绑定了子类对象的基类指针调用函数 x()，会执行 Derive 版本的 x()，这就是多态。</p>
<p><br></p>
<h3 id="三、多重继承时的虚函数表">三、多重继承时的虚函数表</h3><p><strong>1、无虚函数覆盖</strong></p>
<p>现有如下的多重继承关系，子类没有覆盖父类的虚函数：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">x</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base1::x()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">y</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base1::y()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">z</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base1::z()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">x</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base2::x()"</span> &lt;&lt; endl; &#125;  </span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">y</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base2::y()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">z</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base2::z()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Derive : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">x1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derive::x1()"</span> &lt;&lt; endl; &#125;  </span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">y1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derive::y1()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>对于 Derive 实例 d 的虚函数表布局，如下图：</p>
<p><img src="http://img.blog.csdn.net/20140901222958703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>可以看出：</p>
<ul>
<li>每个基类子对象对应一个虚函数表。</li>
<li>派生类中新增的虚函数放到第一个虚函数表的后面。</li>
</ul>
<p>测试代码（VS2012）：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*pFun)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	Derive b;</span><br><span class="line">	<span class="keyword">int</span>** vptr = (<span class="keyword">int</span>**)&amp;b;                     <span class="comment">// 虚函数表地址</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// virtual table 1</span></span><br><span class="line">	pFun table1_func1 = (pFun)*((<span class="keyword">int</span>*)*vptr+<span class="number">0</span>);         <span class="comment">// vptr[0][0]</span></span><br><span class="line">	pFun table1_func2 = (pFun)*((<span class="keyword">int</span>*)*vptr+<span class="number">1</span>);         <span class="comment">// vptr[0][1]</span></span><br><span class="line">	pFun table1_func3 = (pFun)*((<span class="keyword">int</span>*)*vptr+<span class="number">2</span>);         <span class="comment">// vptr[0][2]</span></span><br><span class="line">	pFun table1_func4 = (pFun)*((<span class="keyword">int</span>*)*vptr+<span class="number">3</span>);         <span class="comment">// vptr[0][3]</span></span><br><span class="line">	pFun table1_func5 = (pFun)*((<span class="keyword">int</span>*)*vptr+<span class="number">4</span>);         <span class="comment">// vptr[0][4]</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// virtual table 2</span></span><br><span class="line">	pFun table2_func1 = (pFun)*((<span class="keyword">int</span>*)*(vptr+<span class="number">1</span>)+<span class="number">0</span>);     <span class="comment">// vptr[1][0]</span></span><br><span class="line">	pFun table2_func2 = (pFun)*((<span class="keyword">int</span>*)*(vptr+<span class="number">1</span>)+<span class="number">1</span>);     <span class="comment">// vptr[1][1]</span></span><br><span class="line">	pFun table2_func3 = (pFun)*((<span class="keyword">int</span>*)*(vptr+<span class="number">1</span>)+<span class="number">2</span>);     <span class="comment">// vptr[1][2]</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// call</span></span><br><span class="line">	table1_func1();</span><br><span class="line">	table1_func2();</span><br><span class="line">	table1_func3();</span><br><span class="line">	table1_func4();</span><br><span class="line">	table1_func5();</span><br><span class="line"></span><br><span class="line">	table2_func1();</span><br><span class="line">	table2_func2();</span><br><span class="line">	table2_func3();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>不同的编译器对 virtual table 的实现不同，经测试，在 <strong>g++</strong> 中需要这样：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// virtual table 1</span></span><br><span class="line">pFun table1_func1 = (pFun)*((<span class="keyword">int</span>*)*vptr+<span class="number">0</span>);         <span class="comment">// vptr[0][0]</span></span><br><span class="line">pFun table1_func2 = (pFun)*((<span class="keyword">int</span>*)*vptr+<span class="number">2</span>);         <span class="comment">// vptr[0][2]</span></span><br><span class="line">pFun table1_func3 = (pFun)*((<span class="keyword">int</span>*)*vptr+<span class="number">4</span>);         <span class="comment">// vptr[0][4]</span></span><br><span class="line">pFun table1_func4 = (pFun)*((<span class="keyword">int</span>*)*vptr+<span class="number">6</span>);         <span class="comment">// vptr[0][6]</span></span><br><span class="line">pFun table1_func5 = (pFun)*((<span class="keyword">int</span>*)*vptr+<span class="number">8</span>);         <span class="comment">// vptr[0][8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// virtual table 2</span></span><br><span class="line">pFun table2_func1 = (pFun)*((<span class="keyword">int</span>*)*(vptr+<span class="number">1</span>)+<span class="number">0</span>);     <span class="comment">// vptr[1][0]</span></span><br><span class="line">pFun table2_func2 = (pFun)*((<span class="keyword">int</span>*)*(vptr+<span class="number">1</span>)+<span class="number">2</span>);     <span class="comment">// vptr[1][2]</span></span><br><span class="line">pFun table2_func3 = (pFun)*((<span class="keyword">int</span>*)*(vptr+<span class="number">1</span>)+<span class="number">4</span>);     <span class="comment">// vptr[1][4]</span></span><br></pre></td></tr></table></figure></p>
<p><strong>2、有虚函数覆盖</strong></p>
<p>将上面的多重继承关系稍作修改，让子类重写基类的 x() 函数：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">x</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base1::x()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">y</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base1::y()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">z</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base1::z()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">x</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base2::x()"</span> &lt;&lt; endl; &#125;  </span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">y</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base2::y()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">z</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Base2::z()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Derive : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">x</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derive::x()"</span> &lt;&lt; endl; &#125;     <span class="comment">// 重写</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">y1</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Derive::y1()"</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>这时 Derive 实例的虚函数表布局会变成下面这个样子：</p>
<p><img src="http://img.blog.csdn.net/20140901223514154?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>相比于无覆盖的情况，只是将<code>Derive::x()</code>覆盖了<code>Base1::x()</code>和<code>Base2::x()</code>而已，你可以自己写测试代码测试一下，这里就不再赘述了。</p>
<p>注：若虚函数是 private 或 protected 的，我们照样可以通过访问虚函数表来访问这些虚函数，即上面的测试代码一样能运行。</p>
<p><br><br><br><br></p>
<h3 id="附：编译器对指针的调整">附：编译器对指针的调整</h3><p>在多重继承下，我们可以将子类实例绑定到任一父类的指针（或引用）上。以<strong>上述有覆盖的多重继承关系</strong>为例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Derive b;</span><br><span class="line">Base1* ptr1 = &amp;b;   <span class="comment">// 指向 b 的初始地址</span></span><br><span class="line">Base2* ptr2 = &amp;b;   <span class="comment">// 指向 b 的第二个子对象</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>因为 Base1 是第一个基类，所以 ptr1 指向的是 Derive 对象的起始地址，不需要调整指针（偏移）。</li>
<li>因为 Base2 是第二个基类，所以必须对指针进行调整，即加上一个 offset，让 ptr2 指向 Base2 子对象。</li>
<li>当然，上述过程是由编译器完成的。</li>
</ul>
<p>当然，你可以在VS2012里通过Debug看出 ptr1 和 ptr2 是不同的，我们可以这样子：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Base1* b1 = (Base1*)ptr2;  </span><br><span class="line">b1-&gt;y();                   <span class="comment">// 输出 Base2::y()</span></span><br><span class="line">Base2* b2 = (Base2*)ptr1;   </span><br><span class="line">b2-&gt;y();                   <span class="comment">// 输出 Base1::y()</span></span><br></pre></td></tr></table></figure></p>
<p>其实，通过某个类型的指针访问某个成员时，编译器只是根据类型的定义查找这个成员所在偏移量，用这个偏移量获取成员。由于 ptr2 本来就指向 Base2 子对象的起始地址，所以<code>b1-&gt;y()</code>调用到的是<code>Base2::y()</code>，而 ptr1 本来就指向 Base1 子对象的起始地址（即 Derive对象的起始地址），所以<code>b2-&gt;y()</code>调用到的是<code>Base1::y()</code>。</p>
<p><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>C++通过<a href="http://songlee24.github.io/2014/07/17/cpp-inheritance/">继承（inheritance）</a>和<a href="http://songlee24.github.io/2014/07/17/cpp-virtual-function/">虚函数（virtual function）</a>来实现多态性。所谓多态，简单地说就是，将基类的指针或引用绑定到子类的实例，然后通过基类的指针或引用调用实际子类的成员函数（虚函数）。本文将介绍单继承、多重继承下虚函数的实现机制。</p>
<p><br></p>
<h3 id="一、虚函数表">一、虚函数表</h3><p>为了支持虚函数机制，编译器为每一个拥有虚函数的类的实例创建了一个<strong>虚函数表（virtual table）</strong>，这个表中有许多的<strong>槽（slot）</strong>，每个槽中存放的是虚函数的地址。虚函数表解决了继承、覆盖、添加虚函数的问题，保证其真实反应实际的函数。]]>
    
    </summary>
    
      <category term="Cpp" scheme="http://yoursite.com/tags/Cpp/"/>
    
      <category term="Lang.-Cpp" scheme="http://yoursite.com/categories/Lang-Cpp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python3标准库（二） re模块]]></title>
    <link href="http://yoursite.com/2014/09/01/python-library-02/"/>
    <id>http://yoursite.com/2014/09/01/python-library-02/</id>
    <published>2014-09-01T10:12:17.000Z</published>
    <updated>2015-05-10T08:19:01.626Z</updated>
    <content type="html"><![CDATA[<p><strong>正则表达式（Regular Expression）</strong>是字符串处理的常用工具，通常被用来检索、替换那些符合某个模式（Pattern）的文本。很多程序设计语言都支持正则表达式，像Perl、Java、C/C++。在 Python 中是通过标准库中的 <strong>re 模块</strong> 提供对正则的支持。</p>
<p><br></p>
<h3 id="一、正则表达式介绍">一、正则表达式介绍</h3><p><strong>1）用途</strong></p>
<p>通过使用正则表达式，可以： <a id="more"></a></p>
<ul>
<li><p>测试字符串内的模式。—— 例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。</p>
</li>
<li><p>替换文本。—— 可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。</p>
</li>
<li><p>基于模式匹配从字符串中提取子字符串。—— 可以查找文档内或输入域内特定的文本。</p>
</li>
</ul>
<p><strong>2）语法</strong></p>
<p>本文主要介绍正则的基本语法以及 re 模块的使用，不包括如何编写高效的正则表达式、如何优化正则表达式，这些主题请看其他教程。</p>
<p>下图列出了Python支持的一些正则表达式元字符和语法：</p>
<p><img src="http://img.blog.csdn.net/20140929200042391?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><strong>3）贪婪模式与非贪婪模式</strong></p>
<p>“贪婪模式”总是尝试匹配尽可能多的字符；“非贪婪模式”则相反，总是匹配尽可能少的字符。例如，用”ab<em>“如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab</em>?”，将找到”a”。</p>
<p><br></p>
<h3 id="二、使用_re_模块">二、使用 re 模块</h3><p><strong>1）编译正则表达式</strong></p>
<p>re 模块提供了 <a href="https://docs.python.org/3/library/re.html#re.compile" target="_blank" rel="external">re.compile()</a> 函数将一个字符串编译成 pattern object，用于匹配或搜索。函数原型如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.compile(pattern, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p>re.compile() 还接受一个可选的参数 flag，用于指定正则匹配的模式。关于匹配模式，后面将会讲到。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = re.compile(<span class="string">'ab*'</span>, re.IGNORECASE)</span><br></pre></td></tr></table></figure>
<p><strong>2）反斜杠的困扰</strong></p>
<p>在 python 的字符串中，\ 是被当做转义字符的。在正则表达式中，\ 也是被当做转义字符。这就导致了一个问题：如果你要匹配 \ 字符串，那么传递给 re.compile() 的字符串必须是”\\\\“。</p>
<p>由于字符串的转义，所以实际传递给 re.compile() 的是”\\“，然后再通过正则表达式的转义，”\\“ 会匹配到字符”\“。这样虽然可以正确匹配到字符 \，但是很麻烦，而且容易漏写反斜杠而导致 Bug。那么有什么好的解决方案呢？ </p>
<p><strong>原始字符串</strong>很好的解决了这个问题，通过在字符串前面添加一个r，表示原始字符串，不让字符串的反斜杠发生转义。那么就可以使用<code>r&quot;\\&quot;</code>来匹配字符 <code>\</code>了。</p>
<p><strong>3）pattern object 执行匹配</strong></p>
<p>一旦你编译得到了一个 pattern object，你就可以使用 pattern object 的方法或属性进行匹配了，下面列举几个常用的方法，更多请看<a href="https://docs.python.org/3/library/re.html#regular-expression-objects" target="_blank" rel="external">这里</a>。</p>
<p><a href="https://docs.python.org/3/library/re.html#re.regex.match" target="_blank" rel="external"><code>regex.match(string[, pos[, endpos]])</code></a>：</p>
<ul>
<li>匹配从 pos 到 endpos 的字符子串的开头。匹配成功返回一个 match object，不匹配返回 None。</li>
<li>pos 的默认值是0，endpos 的默认值是 len(string)，所以默认情况下是匹配整个字符串的开头。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">pattern = re.compile(<span class="string">"ar&#123;1&#125;"</span>)</span><br><span class="line">print(pattern.match(<span class="string">"army"</span>))     <span class="comment"># "ar"在开头，匹配成功</span></span><br><span class="line">print(pattern.match(<span class="string">"mary"</span>))     <span class="comment"># "ar"不在开头，匹配失败</span></span><br><span class="line">print(pattern.match(<span class="string">"mary"</span>, <span class="number">1</span>))  <span class="comment"># "ar"不在开头，但在子串的开头</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="comment"># &lt;_sre.SRE_Match object; span=(0, 2), match='ar'&gt;</span></span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="comment"># &lt;_sre.SRE_Match object; span=(1, 3), match='ar'&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://docs.python.org/3/library/re.html#re.regex.search" target="_blank" rel="external"><code>regex.search(string[, pos[, endpos]])</code></a>：</p>
<ul>
<li>扫描整个字符串，并返回它找到的第一个匹配（Match object）。</li>
<li>和 regex.match() 一样，可以通过 pos 和 endpos 指定范围。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">"ar&#123;1&#125;"</span>)</span><br><span class="line">match = pattern.search(<span class="string">"mary"</span>)   <span class="comment"># search</span></span><br><span class="line">print(match)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="comment"># &lt;_sre.SRE_Match object; span=(1, 3), match='ar'&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://docs.python.org/3/library/re.html#re.regex.findall" target="_blank" rel="external"><code>regex.findall(string[, pos[, endpos]])</code></a>：</p>
<ul>
<li>找到所有匹配的子串，并返回一个 list 。</li>
<li>可选参数 pos 和 endpos 和上面一样。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r"\d+"</span>)</span><br><span class="line">lst = pattern.findall(<span class="string">"abc1def2rst3xyz"</span>)   <span class="comment"># findall</span></span><br><span class="line">print(lst)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="comment"># ['1', '2', '3']</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://docs.python.org/3/library/re.html#re.regex.finditer" target="_blank" rel="external"><code>regex.finditer(string[, pos[, endpos]])</code></a>：</p>
<ul>
<li>找到所有匹配的子串，并返回由这些匹配结果（match object）组成的迭代器。</li>
<li>可选参数 pos 和 endpos 和上面一样。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r"\d+"</span>)</span><br><span class="line">p = pattern.finditer(<span class="string">"abc1def2rst3xyz"</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">    print(i)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="comment"># &lt;_sre.SRE_Match object; span=(3, 4), match='1'&gt;</span></span><br><span class="line"><span class="comment"># &lt;_sre.SRE_Match object; span=(7, 8), match='2'&gt;</span></span><br><span class="line"><span class="comment"># &lt;_sre.SRE_Match object; span=(11, 12), match='3'&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>4）match object 获取结果</strong></p>
<p>在上面讲到，通过 pattern object 的方法（除 findall 外）进行匹配得到的返回结果都是 <strong>match object</strong>。每一个 match object 都包含了匹配到的相关信息，比如，起始位置、匹配到的子串。那么，我们如何从 match object 中提取这些信息呢？</p>
<p>match object 提供了一些方法，下面列举几个常用的方法，更多请看<a href="https://docs.python.org/3/library/re.html#match-objects" target="_blank" rel="external">这里</a>。</p>
<p><a href="https://docs.python.org/3/library/re.html#re.match.group" target="_blank" rel="external"><code>match.group([group1, ...])</code></a>：</p>
<ul>
<li>返回 match object 中的字符串。</li>
<li>每一个 ( ) 都是一个分组，分组编号从1开始，从左往右，每遇到一个左括号，分组编号+1。</li>
<li>组 0 总是存在的，它就是整个表达式 。</li>
<li>没有参数时，group1默认为0，这时返回整个匹配到的字符串。</li>
<li>指定一个参数（整数）时，返回该分组匹配到的字符串。</li>
<li>指定多个参数时，返回由那几个分组匹配到的字符串组成的 tuple。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r"(\w+) (\w+)"</span>)</span><br><span class="line">m = pattern.match(<span class="string">"Kobe Bryant, Lakers"</span>)</span><br><span class="line">print(m)               <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 11), match='Kobe Bryant'&gt;</span></span><br><span class="line">print(m.group())       <span class="comment"># Kobe Bryant</span></span><br><span class="line">print(m.group(<span class="number">1</span>))      <span class="comment"># Kobe</span></span><br><span class="line">print(m.group(<span class="number">2</span>))      <span class="comment"># Bryant</span></span><br><span class="line">print(m.group(<span class="number">1</span>, <span class="number">2</span>))   <span class="comment"># ('Kobe', 'Bryant')</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://docs.python.org/3/library/re.html#re.match.groups" target="_blank" rel="external"><code>match.groups()</code></a>：</p>
<ul>
<li>返回由所有分组匹配到的字符串组成的 tuple。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>m = re.match(<span class="string">r"(\d+)\.(\d+)"</span>, <span class="string">"24.1632"</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>m.groups()</span><br><span class="line">(<span class="string">'24'</span>, <span class="string">'1632'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://docs.python.org/3/library/re.html#re.match.start" target="_blank" rel="external"><code>match.start([group])</code></a>：</p>
<ul>
<li>没有参数时，返回匹配到的字符串的起始位置。</li>
<li>指定参数（整数）时，返回该分组匹配到的字符串的起始位置。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r"(\w+) (\w+)"</span>)</span><br><span class="line">m = pattern.match(<span class="string">"Kobe Bryant, Lakers"</span>)</span><br><span class="line">print(m.start())       <span class="comment"># 0</span></span><br><span class="line">print(m.start(<span class="number">2</span>))      <span class="comment"># 5</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://docs.python.org/3/library/re.html#re.match.end" target="_blank" rel="external"><code>match.end([group])</code></a>：</p>
<ul>
<li>没有参数时，返回匹配到的字符串的结束位置。</li>
<li>指定参数（整数）时，返回该分组匹配到的字符串的结束位置。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r"(\w+) (\w+)"</span>)</span><br><span class="line">m = pattern.match(<span class="string">"Kobe Bryant, Lakers"</span>)</span><br><span class="line">print(m.end())       <span class="comment"># 11</span></span><br><span class="line">print(m.end(<span class="number">1</span>))      <span class="comment"># 4</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://docs.python.org/3/library/re.html#re.match.span" target="_blank" rel="external"><code>match.span([group])</code></a>：</p>
<ul>
<li>返回一个二元 tuple 表示匹配到的字符串的范围，即 (start, end)。</li>
<li>指定参数时，返回该分组匹配到的字符串的 (start, end)。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r"(\w+) (\w+)"</span>)</span><br><span class="line">m = pattern.match(<span class="string">"Kobe Bryant, Lakers"</span>)</span><br><span class="line">print(m.span())     <span class="comment"># (0, 11)</span></span><br><span class="line">print(m.span(<span class="number">2</span>))    <span class="comment"># (5, 11)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>5）模块级别的函数</strong></p>
<p>上面讲到的函数都是<strong>对象的方法</strong>，要使用它们必须先得到相应的对象。本节将介绍一些<strong>Module-Level Functions</strong>，比如 match()，search()，findall() 等等。你不需要创建一个 pattern object 就可以直接调用这些函数。</p>
<p><a href="https://docs.python.org/3/library/re.html#re.compile" target="_blank" rel="external"><code>re.compile(pattern, flags=0)</code></a>：上面已经介绍过。</p>
<p><a href="https://docs.python.org/3/library/re.html#re.match" target="_blank" rel="external"><code>re.match(pattern, string, flags=0)</code></a>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r"(\w+) (\w+)"</span>)</span><br><span class="line">m = pattern.match(<span class="string">"Kobe Bryant, Lakers"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"> </span><br><span class="line">m = re.match(<span class="string">r"(\w+) (\w+)"</span>,<span class="string">"Kobe Bryant, Lakers"</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://docs.python.org/3/library/re.html#re.search" target="_blank" rel="external"><code>re.search(pattern, string, flags=0)</code></a>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r"(\w+) (\w+)"</span>)</span><br><span class="line">m = pattern.search(<span class="string">"Kobe Bryant, Lakers"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"> </span><br><span class="line">m = re.search(<span class="string">r"(\w+) (\w+)"</span>,<span class="string">"Kobe Bryant, Lakers"</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://docs.python.org/3/library/re.html#re.findall" target="_blank" rel="external"><code>re.findall(pattern, string, flags=0)</code></a>：与上面类似。</p>
<p><a href="https://docs.python.org/3/library/re.html#re.finditer" target="_blank" rel="external"><code>re.finditer(pattern, string, flags=0)</code></a>：与上面类似。</p>
<p><strong>6）编译标志（匹配模式）</strong></p>
<p>在讲 re.compile() 函数时，曾说到该函数还接受可选的第二个参数，用以设置<strong>匹配模式</strong>。可选的匹配模式有：</p>
<ul>
<li><p><strong>re.IGNORECASE</strong>：忽略大小写，同 <strong>re.I</strong>。</p>
</li>
<li><p><strong>re.MULTILINE</strong>：多行模式，改变^和$的行为，同 <strong>re.M</strong>。</p>
</li>
<li><p><strong>re.DOTALL</strong>：点任意匹配模式，让’.’可以匹配包括’\n’在内的任意字符，同 <strong>re.S</strong>。 </p>
</li>
<li><p><strong>re.LOCALE</strong>：使预定字符类 \w \W \b \B \s \S 取决于当前区域设定， 同 <strong>re.L</strong>。</p>
</li>
<li><p><strong>re.ASCII</strong>：使 \w \W \b \B \s \S 只匹配 ASCII 字符，而不是 Unicode 字符，同 <strong>re.A</strong>。</p>
</li>
<li><p><strong>re.VERBOSE</strong>：详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。主要是为了让正则表达式更易读，同 <strong>re.X</strong>。例如，以下两个正则表达式是等价的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = re.compile(<span class="string">r"""\d +  # the integral part</span><br><span class="line">                   \.    # the decimal point</span><br><span class="line">                   \d *  # some fractional digits"""</span>, re.X)</span><br><span class="line">b = re.compile(<span class="string">r"\d+\.\d*"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<h3 id="三、修改字符串">三、修改字符串</h3><p>第二部分讲的是字符串的匹配和搜索，但是并没有改变字符串。下面就讲一下可以改变字符串的操作。</p>
<p><strong>1）分割字符串</strong></p>
<p><code>split()</code>函数<strong>在匹配的地方将字符串分割，并返回一个 list</strong>。同样的，re 模块提供了两种 split 函数，一个是 pattern object 的方法，一个是模块级的函数。</p>
<p><a href="https://docs.python.org/3/library/re.html#re.regex.split" target="_blank" rel="external"><code>regex.split(string, maxsplit=0)</code></a>：</p>
<ul>
<li>maxsplit用于指定最大分割次数，不指定将全部分割。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r"[A-Z]+"</span>)</span><br><span class="line">m = pattern.split(<span class="string">"abcDefgHijkLmnoPqrs"</span>)</span><br><span class="line">print(m)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="comment"># ['abc', 'efg', 'ijk', 'mno', 'qrs']</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://docs.python.org/3/library/re.html#re.split" target="_blank" rel="external"><code>re.split(pattern, string, maxsplit=0, flags=0)</code></a>：</p>
<ul>
<li>模块级函数，功能与 regex.split() 相同。</li>
<li>flags用于指定匹配模式。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m = re.split(<span class="string">r"[A-Z]+"</span>,<span class="string">"abcDefgHijkLmnoPqrs"</span>)</span><br><span class="line">print(m)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="comment"># ['abc', 'efg', 'ijk', 'mno', 'qrs']</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>2）搜索与替换</strong></p>
<p>另一个常用的功能是<strong>找到所有的匹配，并把它们用不同的字符串替换</strong>。re 模块提供了<code>sub()</code>和<code>subn()</code>来实现替换的功能，而它们也分别有自己两个不同版本的函数。</p>
<p><a href="https://docs.python.org/3/library/re.html#re.regex.sub" target="_blank" rel="external"><code>regex.sub(repl, string, count=0)</code></a>：</p>
<ul>
<li>使用 repl 替换 string 中每一个匹配的子串，返回替换后的字符串。若找不到匹配，则返回原字符串。</li>
<li>repl 可以是一个字符串，也可以是一个函数。</li>
<li>当repl是一个字符串时，任何在其中的反斜杠都会被处理。</li>
<li>当repl是一个函数时，这个函数应当只接受一个参数（Match对象），并返回一个字符串用于替换。</li>
<li>count 用于指定最多替换次数，不指定时全部替换。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> m.group().upper()</span><br><span class="line"> </span><br><span class="line">pattern = re.compile(<span class="string">r"like"</span>, re.I)</span><br><span class="line">s1 = pattern.sub(<span class="string">r"love"</span>, <span class="string">"I like you, do you like me?"</span>)</span><br><span class="line">s2 = pattern.sub(fun, <span class="string">"I like you, do you like me?"</span>)</span><br><span class="line">print(s1)</span><br><span class="line">print(s2)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="comment"># I love you, do you love me?</span></span><br><span class="line"><span class="comment"># I LIKE you, do you LIKE me?</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://docs.python.org/3/library/re.html#re.sub" target="_blank" rel="external"><code>re.sub(pattern, repl, string, count=0, flags=0)</code></a>：</p>
<ul>
<li>模块级函数，与 regex.sub() 函数功能相同。</li>
<li>flags 用于指定匹配模式。</li>
</ul>
<p><a href="https://docs.python.org/3/library/re.html#re.regex.subn" target="_blank" rel="external"><code>regex.subn(repl, string, count=0)</code></a>：</p>
<ul>
<li>同 sub()，只不过返回值是一个二元 tuple，即<code>(sub函数返回值, 替换次数)</code>。</li>
</ul>
<p><a href="https://docs.python.org/3/library/re.html#re.subn" target="_blank" rel="external"><code>re.subn(pattern, repl, string, count=0, flags=0)</code></a>：</p>
<ul>
<li>同上</li>
</ul>
<p><br><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>正则表达式（Regular Expression）</strong>是字符串处理的常用工具，通常被用来检索、替换那些符合某个模式（Pattern）的文本。很多程序设计语言都支持正则表达式，像Perl、Java、C/C++。在 Python 中是通过标准库中的 <strong>re 模块</strong> 提供对正则的支持。</p>
<p><br></p>
<h3 id="一、正则表达式介绍">一、正则表达式介绍</h3><p><strong>1）用途</strong></p>
<p>通过使用正则表达式，可以：]]>
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Lang.-Python" scheme="http://yoursite.com/categories/Lang-Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python3标准库（一） 内置函数]]></title>
    <link href="http://yoursite.com/2014/08/30/python-library-01/"/>
    <id>http://yoursite.com/2014/08/30/python-library-01/</id>
    <published>2014-08-30T14:35:07.000Z</published>
    <updated>2015-05-10T08:12:50.112Z</updated>
    <content type="html"><![CDATA[<p>Python中内置了很多的函数，而学习标准库我们需要事先熟悉这些内置函数，所以在这里一个个进行介绍。有些函数比较简单，只给予文字描述，而有些函数会给出示例代码帮助理解。</p>
<p><strong>1、<a href="https://docs.python.org/3.4/library/functions.html#abs" target="_blank" rel="external"><code>abs(x)</code></a>：</strong>返回一个整数或浮点数的绝对值，如果是复数，返回它的模。</p>
<p><strong>2、<a href="https://docs.python.org/3.4/library/functions.html#all" target="_blank" rel="external"><code>all(iterable)</code></a>：</strong>当 iterable 中所有元素都为 True 时（或者 iterable 为空），返回 True 。</p>
<p><strong>3、<a href="https://docs.python.org/3.4/library/functions.html#any" target="_blank" rel="external"><code>any(iterable)</code></a>：</strong>当 iterable 中有元素为 True 时，则返回 True 。如果 iterable 为空，返回 False 。<a id="more"></a></p>
<p><strong>4、<a href="https://docs.python.org/3.4/library/functions.html#ascii" target="_blank" rel="external"><code>ascii(object)</code></a>：</strong>类似于repr()，返回一个输入对象的可打印的字符串。</p>
<p><strong>5、<a href="https://docs.python.org/3.4/library/functions.html#bin" target="_blank" rel="external"><code>bin(x)</code></a>：</strong>将整数 x 转化为一个二进制字符串。当 x 不是 int 对象时，x 必须实现__index__()方法来返回一个整型数值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>bin(<span class="number">9</span>)</span><br><span class="line"><span class="string">'0b1001'</span></span><br></pre></td></tr></table></figure></p>
<p><strong>6、<a href="https://docs.python.org/3.4/library/functions.html#bool" target="_blank" rel="external"><code>bool(x)</code></a>：</strong>将一个值转换成一个boolean类型的值，省略 x 将返回 False。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">bool</span><span class="params">()</span></span></span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">bool</span><span class="params">(<span class="string">'fedora'</span>)</span></span></span><br><span class="line">True</span><br></pre></td></tr></table></figure></p>
<p><strong>7、<a href="https://docs.python.org/3.4/library/functions.html#bytearray" target="_blank" rel="external"><code>bytearray()</code></a>：</strong> bytearray的构造函数。bytearray类型是一个可变的整数序列（0 &lt;= 整数 &lt; 256），即字节数组，例如：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; a = bytearray(b<span class="string">'after'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; list(a)   <span class="comment"># convert a bytearray object into a list of integers</span></span><br><span class="line">[<span class="number">97</span>, <span class="number">102</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>]</span><br></pre></td></tr></table></figure></p>
<p><strong>8、<a href="https://docs.python.org/3.4/library/functions.html#bytes" target="_blank" rel="external"><code>bytes()</code></a>：</strong> 字节对象（bytes object）的构造函数。bytes是bytearray的<strong>不可变</strong>版本：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; a = bytes(<span class="string">'after'</span>, <span class="string">'UTF-8'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; list(a)   <span class="comment"># convert a bytes object into a list of integers</span></span><br><span class="line">[<span class="number">97</span>, <span class="number">102</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>]</span><br></pre></td></tr></table></figure></p>
<p><strong>9、<a href="https://docs.python.org/3.4/library/functions.html#callable" target="_blank" rel="external"><code>callable(object)</code></a>：</strong>判断一个对象是否可调用，如果一个实例的类实现了<strong>call</strong>()方法，则它是可以调用的。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; f = lambda x,y <span class="symbol">:</span> x+y</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; callable(f)   <span class="comment"># f是函数对象，可调用</span></span><br><span class="line"><span class="constant">True</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; a = <span class="number">10</span>   <span class="comment"># a 不可调用</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; callable(a)</span><br><span class="line"><span class="constant">False</span></span><br></pre></td></tr></table></figure></p>
<p><strong>10、<a href="https://docs.python.org/3.4/library/functions.html#chr" target="_blank" rel="external"><code>chr(i)</code></a>：</strong>返回编码值 i 对应的字符（str类型），i 的有效值为 0 到 1114111。与<code>ord()</code>正好相反。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">chr</span><span class="params">(<span class="number">97</span>)</span></span></span><br><span class="line"><span class="string">'a'</span></span><br></pre></td></tr></table></figure></p>
<p><strong>11、<a href="https://docs.python.org/3.4/library/functions.html#classmethod" target="_blank" rel="external"><code>classmethod(function)</code></a>：</strong>返回一个类方法。</p>
<p><strong>12、<a href="https://docs.python.org/3.4/library/functions.html#compile" target="_blank" rel="external"><code>compile()</code></a>：</strong>编译一个源，返回一个代码对象，该代码对象可以用来作为exec()或者eval()的参数。</p>
<p><strong>13、<a href="https://docs.python.org/3.4/library/functions.html#complex" target="_blank" rel="external"><code>complex(re, im)</code></a>：</strong>复数的构造函数，re 为返回复数对象的实数部分，im 为虚数部分。</p>
<p><strong>14、<a href="https://docs.python.org/3.4/library/functions.html#delattr" target="_blank" rel="external"><code>delattr(object, name)</code></a>：</strong>删除一个对象的属性，相当于<code>del object.name</code>。</p>
<p><strong>15、<a href="https://docs.python.org/3.4/library/functions.html#func-dict" target="_blank" rel="external"><code>dict()</code></a>：</strong>字典类型的构造函数。</p>
<p><strong>16、<a href="https://docs.python.org/3.4/library/functions.html#dir" target="_blank" rel="external"><code>dir()</code></a>：</strong>返回一个包含了 object 所有属性的列表对象，如果没有参数，则包含当前作用域的所用属性。</p>
<p><strong>17、<a href="https://docs.python.org/3.4/library/functions.html#divmod" target="_blank" rel="external"><code>divmod(a, b)</code></a>：</strong>返回一个元组<code>(a//b, a%b)</code>。</p>
<p><strong>18、<a href="https://docs.python.org/3.4/library/functions.html#enumerate" target="_blank" rel="external"><code>enumerate(iterable, start=0)</code></a>：</strong>返回一个可迭代的 enumerate object，对其使用 next() 得到的是包含索引和元素的tuple，通常用于同时遍历索引和元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>seasons = [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Fall'</span>, <span class="string">'Winter'</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>list(enumerate(seasons))</span><br><span class="line">[(<span class="number">0</span>, <span class="string">'Spring'</span>), (<span class="number">1</span>, <span class="string">'Summer'</span>), (<span class="number">2</span>, <span class="string">'Fall'</span>), (<span class="number">3</span>, <span class="string">'Winter'</span>)]</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> enumerate(seasons):   <span class="comment"># 遍历</span></span><br><span class="line"><span class="prompt">... </span>    print(x, end=<span class="string">' '</span>)</span><br><span class="line"><span class="prompt">... </span></span><br><span class="line">(<span class="number">0</span>, <span class="string">'Spring'</span>) (<span class="number">1</span>, <span class="string">'Summer'</span>) (<span class="number">2</span>, <span class="string">'Fall'</span>) (<span class="number">3</span>, <span class="string">'Winter'</span>)</span><br></pre></td></tr></table></figure></p>
<p>相当于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enumerate</span><span class="params">(sequence, start=<span class="number">0</span>)</span>:</span></span><br><span class="line">    n = start</span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> sequence:</span><br><span class="line">        <span class="keyword">yield</span> n, elem</span><br><span class="line">        n += <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>19、<a href="https://docs.python.org/3.4/library/functions.html#eval" target="_blank" rel="external"><code>eval()</code></a>：</strong>执行一段代码，返回执行的结果。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; x = <span class="number">1</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; eval(<span class="string">'x+1'</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p><strong>20、<a href="https://docs.python.org/3.4/library/functions.html#exec" target="_blank" rel="external"><code>exec()</code></a>：</strong>也是执行一段代码，返回None。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; x = <span class="number">1</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; exec(<span class="string">'x += 10'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; x</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure></p>
<p><strong>21、<a href="https://docs.python.org/3.4/library/functions.html#filter" target="_blank" rel="external"><code>filter(function, iterable)</code></a>：</strong>过滤器，返回由使函数 function 返回True的 iterable 元素组成的迭代器。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; f = lambda <span class="symbol">x:</span> x%<span class="number">2</span>==<span class="number">0</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; list(filter(f, lst))</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure></p>
<p><strong>22、<a href="https://docs.python.org/3.4/library/functions.html#float" target="_blank" rel="external"><code>float(x)</code></a>：</strong>返回一个浮点型的对象，无参时返回0.0</p>
<p><strong>23、<a href="https://docs.python.org/3.4/library/functions.html#format" target="_blank" rel="external"><code>format(value[, spec])</code></a>：</strong>格式化一个值，当参数是一个自定义对象的时候，该对象需要实现__format__()方法。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">format</span><span class="params">(<span class="number">3.1415926</span>, <span class="string">'7.3g'</span>)</span></span></span><br><span class="line"><span class="string">'   3.14'</span></span><br></pre></td></tr></table></figure></p>
<p><strong>24、<a href="https://docs.python.org/3.4/library/functions.html#func-frozenset" target="_blank" rel="external"><code>frozenset()</code></a>：</strong> frozenset 的构造函数。顾名思义，frozenset是一种 set 类型，且不可改变（没有add、remove等方法）。</p>
<p><strong>25、<a href="https://docs.python.org/3.4/library/functions.html#getattr" target="_blank" rel="external"><code>getattr(object, name)</code></a>：</strong>获得对象的name属性，当该属性不存在的时候可以使用一个默认值作为返回值。</p>
<p><strong>26、<a href="https://docs.python.org/3.4/library/functions.html#globals" target="_blank" rel="external"><code>globals()</code></a>：</strong>返回一个包含当前所有<strong>全局符号</strong>和对应值的字典。</p>
<p><strong>27、<a href="https://docs.python.org/3.4/library/functions.html#hasattr" target="_blank" rel="external"><code>hasattr(object, name)</code></a>：</strong>判断对象是否有name属性。</p>
<p><strong>28、<a href="https://docs.python.org/3.4/library/functions.html#hash" target="_blank" rel="external"><code>hash(object)</code></a>：</strong>返回对象的 hash 值，object 必须是可哈希的。<br><strong>注意：</strong>所有不可变的内置类型都是 hashable 的，比如 string，tuple；所有可变的内置类型都是 unhashable 的，比如 list，dict（即没有__hash__()方法）。</p>
<p><strong>29、<a href="https://docs.python.org/3.4/library/functions.html#help" target="_blank" rel="external"><code>help()</code></a>：</strong>查看一个对象的帮助文档。</p>
<p><strong>30、<a href="https://docs.python.org/3.4/library/functions.html#hex" target="_blank" rel="external"><code>hex(x)</code></a>：</strong>将一个整数转为小写的十六进制字符串（以’0x’开头），如果不是int对象，需要定义 __index__()方法。</p>
<p><strong>31、<a href="https://docs.python.org/3.4/library/functions.html#id" target="_blank" rel="external"><code>id()</code></a>：</strong>返回一个对象的 id 身份，可以看作该对象的内存地址。</p>
<p><strong>32、<a href="https://docs.python.org/3.4/library/functions.html#input" target="_blank" rel="external"><code>input()</code></a>：</strong>读取一行输入并返回一个字符串。</p>
<p><strong>33、<a href="https://docs.python.org/3.4/library/functions.html#int" target="_blank" rel="external"><code>int(x, base=10)</code></a>：</strong>返回相应进制的 int 值。</p>
<p><strong>34、<a href="https://docs.python.org/3.4/library/functions.html#isinstance" target="_blank" rel="external"><code>isinstance(object, class)</code></a>：</strong>判断对象 object 是不是类 class 或其派生类的实例。</p>
<p><strong>35、<a href="https://docs.python.org/3.4/library/functions.html#issubclass" target="_blank" rel="external"><code>issubclass(class,baseclass)</code></a>：</strong>判断一个类是否是另一个类的子类。</p>
<p><strong>36、<a href="https://docs.python.org/3.4/library/functions.html#iter" target="_blank" rel="external"><code>iter()</code></a>：</strong>返回一个可迭代的对象。</p>
<p><strong>37、<a href="https://docs.python.org/3.4/library/functions.html#len" target="_blank" rel="external"><code>len()</code></a>：</strong>返回一个长度值，与 object 中的__len__()有关。</p>
<p><strong>38、<a href="https://docs.python.org/3.4/library/functions.html#func-list" target="_blank" rel="external"><code>list()</code></a>：</strong> list 的构造函数。</p>
<p><strong>39、<a href="https://docs.python.org/3.4/library/functions.html#locals" target="_blank" rel="external"><code>locals()</code></a>：</strong>返回一个包含当前局部符号和对应值的字典，与 <code>globals()</code> 对应。</p>
<p><strong>40、<a href="https://docs.python.org/3.4/library/functions.html#map" target="_blank" rel="external"><code>map(function, iterable)</code></a>：</strong>映射函数，将 iterable 中的每个元素应用到 function 函数，返回由所有结果组成的迭代器。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; it = <span class="function"><span class="title">map</span><span class="params">(lambda x: x*<span class="number">2</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span></span></span><br><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">list</span><span class="params">(it)</span></span></span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure></p>
<p><strong>41、<a href="https://docs.python.org/3.4/library/functions.html#max" target="_blank" rel="external"><code>max()</code></a>：</strong>最大值。</p>
<p><strong>42、<a href="https://docs.python.org/3.4/library/functions.html#min" target="_blank" rel="external"><code>min()</code></a>：</strong>最小值。</p>
<p><strong>43、<a href="https://docs.python.org/3.4/library/functions.html#func-memoryview" target="_blank" rel="external"><code>memoryview(obj)</code></a>：</strong>返回一个 memory view 对象。</p>
<p><strong>44、<a href="https://docs.python.org/3.4/library/functions.html#next" target="_blank" rel="external"><code>next(iterator)</code></a>：</strong>产生下一个生成值，与__next__()有关。</p>
<p><strong>45、<a href="https://docs.python.org/3.4/library/functions.html#object" target="_blank" rel="external"><code>object()</code></a>：</strong>略。</p>
<p><strong>46、<a href="https://docs.python.org/3.4/library/functions.html#oct" target="_blank" rel="external"><code>oct(x)</code></a>：</strong>将一个整数转为一个八进制字符串。如果不是 int 对象，需要定义__index__()方法。</p>
<p><strong>47、<a href="https://docs.python.org/3.4/library/functions.html#open" target="_blank" rel="external"><code>open()</code></a>：</strong>打开一个文件，返回对应的文件对象。</p>
<p><strong>48、<a href="https://docs.python.org/3.4/library/functions.html#ord" target="_blank" rel="external"><code>ord(c)</code></a>：</strong>返回字符 c 的编码值，与<code>chr(i)</code>相反。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">ord</span><span class="params">(<span class="string">'a'</span>)</span></span></span><br><span class="line"><span class="number">97</span></span><br></pre></td></tr></table></figure></p>
<p><strong>49、<a href="https://docs.python.org/3.4/library/functions.html#pow" target="_blank" rel="external"><code>pow(x, y[, z])</code></a>：</strong><code>pow(x, y)</code>相当于<code>x**y</code>，<code>pow(x, y, z)</code>相当于<code>pow(x, y) % z</code>。</p>
<p><strong>50、<a href="https://docs.python.org/3.4/library/functions.html#print" target="_blank" rel="external"><code>print()</code></a>：</strong>打印输出。</p>
<p><strong>51、<a href="https://docs.python.org/3.4/library/functions.html#property" target="_blank" rel="external"><code>property(fget=None, fset=None, fdel=None, doc=None)</code></a>：</strong>函数 property() 的作用就是把类中的方法当作属性来访问。看下面的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__x = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getx</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setx</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.__x = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delx</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.__x</span><br><span class="line">        </span><br><span class="line">    x = property(getx, setx, delx, <span class="string">"I'm the 'x' property."</span>)</span><br></pre></td></tr></table></figure></p>
<p>为了操作数据成员 __x，我们需要使用 getx、setx、delx 方法，很麻烦。但是如果通过 property 函数将方法绑定到成员x，那么当获取成员x的值时，就会调用getx函数；当给成员x赋值时，就会调用setx函数；当删除x时，就会调用delx函数：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">c</span> = <span class="type">C</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">c</span>.x)    # 相当于<span class="built_in">c</span>.getx()</span><br><span class="line"><span class="built_in">c</span>.x = <span class="number">20</span>      # 相当于<span class="built_in">c</span>.setx(<span class="number">20</span>)</span><br><span class="line">del <span class="built_in">c</span>.x       # 相当于<span class="built_in">c</span>.delx()</span><br></pre></td></tr></table></figure></p>
<p>这样通过 x 间接调用方法操作 __x 就方便多了。</p>
<p><strong>52、<a href="https://docs.python.org/3.4/library/functions.html#func-range" target="_blank" rel="external"><code>range(start, stop[, step])</code></a>：</strong>返回一个序列。</p>
<p><strong>53、<a href="https://docs.python.org/3.4/library/functions.html#repr" target="_blank" rel="external"><code>repr(object)</code></a>：</strong>将对象转化为可打印的字符串。</p>
<p><strong>54、<a href="https://docs.python.org/3.4/library/functions.html#reversed" target="_blank" rel="external"><code>reversed()</code></a>：</strong>倒序序列，对象需要实现__reversed__()方法。</p>
<p><strong>55、<a href="https://docs.python.org/3.4/library/functions.html#round" target="_blank" rel="external"><code>round(number[, ndigits])</code></a>：</strong>把浮点数转变成指定小数位数的数，ndigits默认为0。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">round</span><span class="params">(<span class="number">1.75368</span>, <span class="number">3</span>)</span></span></span><br><span class="line"><span class="number">1.754</span></span><br></pre></td></tr></table></figure></p>
<p><strong>56、<a href="https://docs.python.org/3.4/library/functions.html#func-set" target="_blank" rel="external"><code>set()</code></a>：</strong> set 的构造函数。</p>
<p><strong>57、<a href="https://docs.python.org/3.4/library/functions.html#setattr" target="_blank" rel="external"><code>setattr(object, name, value)</code></a>：</strong>为一个对象的name属性设置一个value值。</p>
<p><strong>58、<a href="https://docs.python.org/3.4/library/functions.html#slice" target="_blank" rel="external"><code>slice(start,stop[,step])</code></a>：</strong>切片函数，分割一个可分割的对象，返回其中的一部分。</p>
<p><strong>59、<a href="https://docs.python.org/3.4/library/functions.html#sorted" target="_blank" rel="external"><code>sorted()</code></a>：</strong>排序。</p>
<p><strong>60、<a href="https://docs.python.org/3.4/library/functions.html#staticmethod" target="_blank" rel="external"><code>staticmethod(function)</code></a>：</strong>返回一个静态的方法。要知道，一个类的静态方法没有隐式的第一个 self 参数，因为静态方法是独立于实例对象的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    <span class="decorator">@staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(arg1, arg2, ...)</span>:</span> ...</span><br></pre></td></tr></table></figure></p>
<p><strong>61、<a href="https://docs.python.org/3.4/library/functions.html#func-str" target="_blank" rel="external"><code>str()</code></a>：</strong>字符串的构造函数。</p>
<p><strong>62、<a href="https://docs.python.org/3.4/library/functions.html#sum" target="_blank" rel="external"><code>sum()</code></a>：</strong>求和。</p>
<p><strong>63、<a href="https://docs.python.org/3.4/library/functions.html#super" target="_blank" rel="external"><code>super()</code></a>：</strong> super() 常用于继承中调用父类的方法。例如，<a href="http://blog.csdn.net/lisonglisonglisong/article/details/38719743#t0" target="_blank" rel="external">类的继承</a>中，通常需要调用父类的构造方法，以初始化父类部分，有两种方法能达到这个目的。</p>
<p><strong>方法一：</strong>调用未绑定的父类构造方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a = <span class="string">'A_method'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.b = <span class="string">'B_method'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        A.__init__(self)</span><br><span class="line">        B.__init__(self)</span><br><span class="line">        <span class="comment"># ...其他超类</span></span><br><span class="line">        self.c = <span class="string">'C_method'</span></span><br></pre></td></tr></table></figure></p>
<p><strong>方法二：</strong>使用super函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.a = <span class="string">'A_method'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.b = <span class="string">'B_method'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()    <span class="comment"># 等价于super(C,self).__init__()</span></span><br><span class="line">        self.c = <span class="string">'C_method'</span></span><br></pre></td></tr></table></figure></p>
<p>可以看出，方法一更直观，但是方法二使用 super 函数可以一次初始化所有超类（但要确保所有的超类的构造方法都使用了super函数）。当继承结构很复杂时，方法二明显更适用，当然 super 不仅可以用于构造方法还可以用于其他方法。</p>
<p>使用 super 还有一个好处，就是当改变父类名时，不需要再去修改其他地方，便于代码的维护。</p>
<p><strong>64、<a href="https://docs.python.org/3.4/library/functions.html#func-tuple" target="_blank" rel="external"><code>tuple()</code></a>：</strong>元组的构造函数。</p>
<p><strong>65、<a href="https://docs.python.org/3.4/library/functions.html#type" target="_blank" rel="external"><code>type()</code></a>：</strong>返回一个对象的类型，返回值与<code>object.__class__</code>一样。</p>
<p><strong>66、<a href="https://docs.python.org/3.4/library/functions.html#vars" target="_blank" rel="external"><code>vars(object)</code></a>：</strong>返回 object 中所有属性与对应值的字典。没有参数时作用和<code>locals()</code>一样。</p>
<p><strong>67、<a href="https://docs.python.org/3.4/library/functions.html#zip" target="_blank" rel="external"><code>zip()</code></a>：</strong> zip 函数接受一系列可迭代的对象作为参数，将对象中对应的元素打包成一个个tuple（元组）。</p>
<p><strong>68、<a href="https://docs.python.org/3.4/library/functions.html#__import__" target="_blank" rel="external"><code>__import__()</code></a>：</strong>通过import语句调用。</p>
<p><br><br><br><br></p>
<h3 id="附：reduce函数">附：reduce函数</h3><p>在Python 3里，<a href="https://docs.python.org/3.4/library/functools.html#functools.reduce" target="_blank" rel="external"><code>reduce()</code></a>函数已经被从全局名字空间里移除了，它现在被放置在<code>functools</code>模块里。函数原型如下：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(<span class="function"><span class="keyword">function</span>, <span class="title">iterable</span><span class="params">[, initializer]</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>function 必须是二元函数，<strong>在省略第三个参数的情况下</strong>，函数先对 iterable 中的第1，2个数据进行操作，得到的结果再与第三个数据用 function() 函数运算……依次类推，最后得到一个结果。<strong>如果初始值 initializer 给定</strong>，第一次调用会是 initializer 和第一个元素而不是序列的头两个元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x,y: x+y, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x,y: x+y, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], <span class="number">10</span>)</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure></p>
<p>map用于映射，reduce用于归并。</p>
<p>（全文完）<br><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Python中内置了很多的函数，而学习标准库我们需要事先熟悉这些内置函数，所以在这里一个个进行介绍。有些函数比较简单，只给予文字描述，而有些函数会给出示例代码帮助理解。</p>
<p><strong>1、<a href="https://docs.python.org/3.4/library/functions.html#abs"><code>abs(x)</code></a>：</strong>返回一个整数或浮点数的绝对值，如果是复数，返回它的模。</p>
<p><strong>2、<a href="https://docs.python.org/3.4/library/functions.html#all"><code>all(iterable)</code></a>：</strong>当 iterable 中所有元素都为 True 时（或者 iterable 为空），返回 True 。</p>
<p><strong>3、<a href="https://docs.python.org/3.4/library/functions.html#any"><code>any(iterable)</code></a>：</strong>当 iterable 中有元素为 True 时，则返回 True 。如果 iterable 为空，返回 False 。]]>
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Lang.-Python" scheme="http://yoursite.com/categories/Lang-Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python3基础（十二） 学习总结·附PDF]]></title>
    <link href="http://yoursite.com/2014/08/24/python-basic-12/"/>
    <id>http://yoursite.com/2014/08/24/python-basic-12/</id>
    <published>2014-08-24T07:32:32.000Z</published>
    <updated>2015-05-10T08:09:44.167Z</updated>
    <content type="html"><![CDATA[<p>Python是一门强大的解释型、面向对象的高级程序设计语言，它优雅、简单、可移植、易扩展，可用于桌面应用、系统编程、数据库编程、网络编程、web开发、图像处理、人工智能、数学应用、文本处理等等。</p>
<p>在学习Python的过程中，我做了一个比较详细、比较系统的学习笔记，适合Python的初学者用以快速入门。它讲解了Python 3.x的基本语法和高级特性，从基本数据类型、运算符、流程控制、函数、文件IO到模块、异常处理和面向对象，并且附上了很多经过测试的代码帮助读者去理解。</p>
<p>如果你是一个Python初学者，希望这个学习笔记能够对你有所帮助。相信如果你看完这个学习笔记，你会对Python有一个整体的了解。<a id="more"></a></p>
<p>Python3基础学习笔记：</p>
<ul>
<li><a href="http://songlee24.github.io/2014/08/08/python-basic-01/" target="_blank" rel="external">Python3基础（一） Hello World </a></li>
<li><a href="http://songlee24.github.io/2014/08/08/python-basic-02/" target="_blank" rel="external">Python3基础（二） 基本数据类型 </a></li>
<li><a href="http://songlee24.github.io/2014/08/08/python-basic-03/" target="_blank" rel="external">Python3基础（三） 运算符 </a></li>
<li><a href="http://songlee24.github.io/2014/08/09/python-basic-04/" target="_blank" rel="external">Python3基础（四） 条件与循环控制</a></li>
<li><a href="http://songlee24.github.io/2014/08/09/python-basic-05/" target="_blank" rel="external">Python3基础（五） 函数</a></li>
<li><a href="http://songlee24.github.io/2014/08/13/python-basic-06/" target="_blank" rel="external">Python3基础（六） 深入list列表</a></li>
<li><a href="http://songlee24.github.io/2014/08/14/python-basic-07/" target="_blank" rel="external">Python3基础（七） 输入和输出</a></li>
<li><a href="http://songlee24.github.io/2014/08/18/python-basic-08/" target="_blank" rel="external">Python3基础（八） 模块</a></li>
<li><a href="http://songlee24.github.io/2014/08/19/python-basic-09/" target="_blank" rel="external">Python3基础（九） 错误和异常</a></li>
<li><a href="http://songlee24.github.io/2014/08/20/python-basic-10/" target="_blank" rel="external">Python3基础（十） 类的初印象</a></li>
<li><a href="http://songlee24.github.io/2014/08/21/python-basic-11/" target="_blank" rel="external">Python3基础（十一） 类的拓展 </a></li>
<li><a href="http://songlee24.github.io/2014/08/12/python-FAQ-01/" target="_blank" rel="external">Python FAQ1：传值，还是传引用？</a></li>
<li><a href="http://songlee24.github.io/2014/08/15/python-FAQ-02/" target="_blank" rel="external">Python FAQ2：赋值、浅拷贝、深拷贝的区别？</a></li>
</ul>
<p><strong>为了方便大家离线阅读，我把上面所有的学习笔记用 markdown 排版制作了一个精良的PDF，供大家下载。</strong></p>
<p><strong>下载地址：</strong><a href="http://download.csdn.net/detail/lisong694767315/7807405" target="_blank" rel="external">http://download.csdn.net/detail/lisong694767315/7807405</a></p>
<p><br><br><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Python是一门强大的解释型、面向对象的高级程序设计语言，它优雅、简单、可移植、易扩展，可用于桌面应用、系统编程、数据库编程、网络编程、web开发、图像处理、人工智能、数学应用、文本处理等等。</p>
<p>在学习Python的过程中，我做了一个比较详细、比较系统的学习笔记，适合Python的初学者用以快速入门。它讲解了Python 3.x的基本语法和高级特性，从基本数据类型、运算符、流程控制、函数、文件IO到模块、异常处理和面向对象，并且附上了很多经过测试的代码帮助读者去理解。</p>
<p>如果你是一个Python初学者，希望这个学习笔记能够对你有所帮助。相信如果你看完这个学习笔记，你会对Python有一个整体的了解。]]>
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Lang.-Python" scheme="http://yoursite.com/categories/Lang-Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python3基础（十一） 类的拓展]]></title>
    <link href="http://yoursite.com/2014/08/21/python-basic-11/"/>
    <id>http://yoursite.com/2014/08/21/python-basic-11/</id>
    <published>2014-08-20T17:29:34.000Z</published>
    <updated>2015-05-10T08:06:31.094Z</updated>
    <content type="html"><![CDATA[<p>在<a href="http://songlee24.github.io/2014/08/20/python-basic-10/" target="_blank" rel="external">类的初印象</a>中，我们已经简单的介绍了类，包括类的定义、类对象和实例对象。本文将进一步学习类的继承、迭代器、发生器等等。</p>
<p><br></p>
<h3 id="一、类的继承">一、类的继承</h3><p><strong>单继承</strong></p>
<p>派生类的定义如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(BaseClassName)</span>:</span></span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>基类名 BaseClassName 对于派生类来说必须是可见的。也可以继承在其他模块中定义的基类：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">DerivedClassName</span><span class="container">(<span class="title">module</span>.<span class="type">BaseClassName</span>)</span>:</span></span><br></pre></td></tr></table></figure></p>
<p>对于派生类的属性引用：首先会在当前的派生类中搜索，如果没有找到，则会递归地去基类中寻找。</p>
<p>从C++术语上讲，Python 类中所有的方法都是<code>vitual</code>的，所以派生类可以覆写（override）基类的方法。在派生类中一个覆写的方法可能需要调用基类的方法，可以通过以下方式：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BaseClassName</span>.<span class="keyword">method</span>(self, arguments)</span><br></pre></td></tr></table></figure></p>
<p>介绍两个函数：</p>
<ul>
<li><code>isinstance(object, class_name)</code>：内置函数，用于判断实例对象 object 是不是类 class<em>name 或其派生类的实例，即`object.<em>_class</em></em> `是 class_name 或其派生类时返回 True。</li>
<li><code>issubclass(class1, class2)</code>：内置函数，用于检查类 class1 是不是 class2 的派生类。例如<code>issubclass(bool, int)</code>会返回 True，因为 bool 是 int 的派生类。 </li>
</ul>
<p><strong>多重继承</strong></p>
<p>Python支持多重继承，一个多重继承的定义形如：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">DerivedClassName</span><span class="container">(<span class="type">Base1</span>, <span class="type">Base2</span>, <span class="type">Base3</span>)</span>:</span><br><span class="line">    &lt;statement-1&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-<span class="type">N</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>大多数的情况（未使用super）下，多重继承中属性搜索的方式是，深度优先，从左到右。在继承体系中，同样的类只会被搜寻一次。如果一个属性在当前类中没有被找到，它就会搜寻 Base1，然后递归地搜寻 Base1 的基类，然后如果还是没有找到，那么就会搜索 Base2，依次类推。</p>
<p>对于菱形继承，Python 3采用了 C3 线性化算法去搜索基类，保证每个基类只搜寻一次。所以对于使用者，无须担心这个问题，如果你想了解更多细节，可以看看<a href="http://hi.baidu.com/tim_bi/item/c26137837f34c0c8b071544e" target="_blank" rel="external">Python类的方法解析顺序</a>。</p>
<p><br></p>
<h3 id="二、自定义异常类">二、自定义异常类</h3><p>在《<a href="http://songlee24.github.io/2014/08/19/python-basic-09/" target="_blank" rel="external">Python3的错误和异常</a>》中，我们简单地介绍了Python中的异常处理、异常抛出以及清理动作。在学习了类的继承以后，我们就可以定义自己的异常类了。</p>
<p>自定义异常需要从 <strong>Exception</strong> 类派生，既可以是直接也可以是间接。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> repr(self.value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyError(<span class="number">2</span>*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> MyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'My exception occurred, value:'</span>, e.value)</span><br><span class="line">    <span class="comment"># 输出：My exception occurred, value: 4</span></span><br></pre></td></tr></table></figure></p>
<p>在这个例子中， Exception 的默认方法 __init__() 被覆写了，现在新的异常类可以像其他的类一样做任何的事。当创建一个模块时，可能会有多种不同的异常，一种常用的做法就是，创建一个基类，然后派生出各种不同的异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">"""Base class for exceptions in this module."""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputError</span><span class="params">(Error)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, expression, message)</span>:</span></span><br><span class="line">        self.expression = expression</span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransitionError</span><span class="params">(Error)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, previous, next, message)</span>:</span></span><br><span class="line">        self.previous = previous</span><br><span class="line">        self.next = next</span><br><span class="line">        self.message = message</span><br></pre></td></tr></table></figure></p>
<p>需要特别注意的是，如果一个 except 后跟了一个异常类，则这个 except 语句不能捕获该异常类的基类，但能够捕获该异常类的子类。例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class <span class="function"><span class="title">B</span><span class="params">(Exception)</span></span>:</span><br><span class="line">    pass</span><br><span class="line">class <span class="function"><span class="title">C</span><span class="params">(B)</span></span>:</span><br><span class="line">    pass</span><br><span class="line">class <span class="function"><span class="title">D</span><span class="params">(C)</span></span>:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> [B, C, D]:</span><br><span class="line">    try:</span><br><span class="line">        raise <span class="function"><span class="title">e</span><span class="params">()</span></span></span><br><span class="line">    except D:</span><br><span class="line">        <span class="function"><span class="title">print</span><span class="params">(<span class="string">'D'</span>)</span></span></span><br><span class="line">    except C:</span><br><span class="line">        <span class="function"><span class="title">print</span><span class="params">(<span class="string">'C'</span>)</span></span></span><br><span class="line">    except B:</span><br><span class="line">        <span class="function"><span class="title">print</span><span class="params">(<span class="string">'B'</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p>上面的代码会按顺序输出B、C、D。如果将三个 except 语句逆序，则会打印B、B、B。</p>
<p><br></p>
<h3 id="三、迭代器（Iterator）">三、迭代器（Iterator）</h3><p>到目前为止，你可能注意到，大多数的容器对象都可以使用 for 来迭代：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> [1, 2, 3]:</span><br><span class="line">    <span class="keyword">print</span>(element)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> (1, 2, 3):</span><br><span class="line">    <span class="keyword">print</span>(element)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> &#123;'<span class="keyword">one</span>':1, '<span class="keyword">two</span>':2&#125;:</span><br><span class="line">    <span class="keyword">print</span>(key)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">char</span> <span class="keyword">in</span> <span class="string">"123"</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">char</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">line</span> <span class="keyword">in</span> <span class="keyword">open</span>(<span class="string">"myfile.txt"</span>):</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">line</span>)</span><br></pre></td></tr></table></figure></p>
<p>这种形式可以说是简洁明了。其实，for 语句在遍历容器的过程中隐式地调用了<code>iter()</code>，这个函数返回一个迭代器对象，迭代器对象定义了 <code>__next__()</code> 方法，用以在每次访问时得到一个元素。当没有任何元素时，__next__() 将产生 StopIteration 异常来告诉 for 语句停止迭代。</p>
<p>内置函数 <code>next()</code>可以用来调用 __next__() 方法，示例：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; s = <span class="string">'abc'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; it = iter(s)   <span class="comment"># 获取迭代器对象</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; next(it)</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; next(it)</span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; next(it)</span><br><span class="line"><span class="string">'c'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; next(it)</span><br><span class="line"><span class="constant">Traceback</span> (most recent call last)<span class="symbol">:</span></span><br><span class="line">  <span class="constant">File</span> <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="constant">StopIteration</span></span><br></pre></td></tr></table></figure></p>
<p>在了解了迭代器的机制之后，就可以很简单的将迭代行为增加到你的类中。定义一个 <code>__iter__()</code>方法返回一个具有 __next__() 的对象，如果这个类定义了 __next__() , 那么 __iter__() 仅需要返回 self：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span>:</span></span><br><span class="line">    <span class="string">""" 逆序迭代一个序列 """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.index = len(data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.index == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.index -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span>  self.data[self.index]</span><br></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line">rev = <span class="constant">Reverse</span>(<span class="string">'spam'</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="symbol">rev:</span></span><br><span class="line">    print(c, <span class="keyword">end</span>=<span class="string">' '</span>)   <span class="comment"># 输出：m a p s </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单步测试</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; rev = <span class="constant">Reverse</span>(<span class="string">'spam'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; it = iter(rev)    <span class="comment"># 返回的 self 本身</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; next(it)          <span class="comment"># 相当于 next(rev)，因为iter(rev)返回本身</span></span><br><span class="line"><span class="string">'m'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; next(it)</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; next(it) </span><br><span class="line"><span class="string">'p'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; next(it)</span><br><span class="line"><span class="string">'s'</span></span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="四、生成器（Generator）">四、生成器（Generator）</h3><p>生成器（Generator）是用来创建迭代器的工具，它的形式跟函数一样，唯一的不同是生成器使用 <code>yield</code> 语句返回，而不是 return 语句。</p>
<p>有了生成器，我们不再需要自定义迭代器类（例如上面的 class Reverse），因为自定义迭代器类需要手动实现 <strong>__iter__()</strong> 和 <strong>__next__()</strong> 方法，也是有点麻烦。而生成器则会自动创建 __iter()__ 和 __next__()，可以更方便地生成一个迭代器，而且代码也会更短更简洁。例如，这里用生成器实现与 class Reverse 相同作用的迭代器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Reverse</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(len(data)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">yield</span> data[idx]</span><br></pre></td></tr></table></figure></p>
<p>原来要十多行代码写一个迭代器类，现在使用生成器只需要3行代码！来测试一下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="constant">Reverse</span>(<span class="string">'spam'</span>)<span class="symbol">:</span></span><br><span class="line">    print(c, <span class="keyword">end</span>=<span class="string">' '</span>)      <span class="comment"># 输出：m a p s </span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 单步测试</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; rev = <span class="constant">Reverse</span>(<span class="string">'spam'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; next(rev)</span><br><span class="line"><span class="string">'m'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; next(rev)</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; next(rev)</span><br><span class="line"><span class="string">'p'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; next(rev)</span><br><span class="line"><span class="string">'s'</span></span><br></pre></td></tr></table></figure></p>
<p>怎么样？现在感受到生成器的强大了吧。确实，生成器让我们可以方便的创建迭代器，而不必去自定义迭代器类那么麻烦。下面我们来了解一下生成器的工作过程：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" 这是一个简单的生成器 """</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>g = generator_func()</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>next(g)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure></p>
<p>执行过程大致如下：</p>
<ol>
<li>调用生成器函数将返回一个生成器。</li>
<li>第一次调用生成器的 next 方法时，生成器才开始执行生成器函数。直到遇到 yield 时暂停执行（挂起），并且将 yield 的参数作为此次的返回值。</li>
<li>之后每次调用 next 方法，生成器将从上次暂停的位置恢复并继续执行，直到再次遇到yield 时暂停，同样将 yield 的参数返回。</li>
<li>当调用 next 方法时生成器函数结束，则此次调用将抛出 StopIteration 异常（for循环终止条件）。</li>
</ol>
<p>所以说，生成器的神奇之处在于每次使用 next() 执行生成器函数遇到 yield 返回时，生成器函数的“状态”会被冻结，所有的数据值和执行位置会被记住，一旦 next() 再次被调用，生成器函数会从它上次离开的地方继续执行。</p>
<p><br></p>
<h3 id="五、类用作ADT">五、类用作ADT</h3><p>有些时候，类似于 Pascal 的“record”或 C 的“struct”这样的数据类型非常有用，绑定一些命名的数据。在 Python 中一个空的类定义就可以做到：<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">    <span class="literal">pass</span></span><br><span class="line"></span><br><span class="line">john = <span class="constant">Employee</span>()  <span class="comment"># Create an empty employee record</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fill the fields of the record</span></span><br><span class="line">john.<span class="literal">name</span> = <span class="string">'John Doe'</span></span><br><span class="line">john.dept = <span class="string">'computer lab'</span></span><br><span class="line">john.salary = <span class="number">1000</span></span><br></pre></td></tr></table></figure></p>
<p>一段 Python 代码中如果需要一个抽象数据类型，那么可以通过传递一个类给那个方法，就好像有了那个数据类型一样。</p>
<p>例如，如果你有一个函数用于格式化某些从文件对象中读取的数据，你可以定义一个有 read() 和 readline() 方法的类用于读取数据，然后将这个类作为一个参数传递给那个函数。</p>
<p><br><br><br><br><br></p>
<h3 id="附：类变量与实例变量的区别">附：类变量与实例变量的区别</h3><p><strong>类变量（class variable）</strong>是类的属性和方法，它们会被类的所有实例共享。而<strong>实例变量（instance variable）</strong>是实例对象所特有的数据。如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span>:</span></span><br><span class="line">    kind = <span class="string">'dog'</span>    <span class="comment"># class variable shared by all instances</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color)</span>:</span></span><br><span class="line">        self.color = color    <span class="comment"># instance variable unique to each instance</span></span><br><span class="line"></span><br><span class="line">a1 = animal(<span class="string">'black'</span>)</span><br><span class="line">a2 = animal(<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line">print(a1.kind, a2.kind)     <span class="comment"># shared by all animals</span></span><br><span class="line">print(a1.color, a2.color)   <span class="comment"># unique to each animal</span></span><br></pre></td></tr></table></figure></p>
<p>当类变量（被所有实例共享）是一个可变的对象时，如 list 、dict ，那么在一个实例对象中改变该属性，其他实例的这个属性也会发生变化。这应该不难理解，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span>:</span></span><br><span class="line">    actions = []    <span class="comment"># class variable shared by all instances</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color)</span>:</span></span><br><span class="line">        self.color = color    <span class="comment"># instance variable unique to each instance</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addActions</span><span class="params">(self, action)</span>:</span></span><br><span class="line">        self.actions.append(action)</span><br><span class="line"></span><br><span class="line">a1 = animal(<span class="string">'black'</span>)</span><br><span class="line">a2 = animal(<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line">a1.addActions(<span class="string">'run'</span>)      <span class="comment"># 动物a1会跑</span></span><br><span class="line">a2.addActions(<span class="string">'fly'</span>)      <span class="comment"># 动物a2会飞</span></span><br><span class="line"></span><br><span class="line">print(a1.actions, a2.actions)   <span class="comment"># 输出：['run', 'fly'] ['run', 'fly']</span></span><br></pre></td></tr></table></figure></p>
<p>输出结果显示：动物 a1 和 a2 总是又相同的行为（actions），显然这不是我们想要的，因为不同的动物有不同的行为，比如狗会跑、鸟会飞、鱼会游……</p>
<p>对这个问题进行改进，我们只需要将 <strong>actions</strong> 这个属性变成实例变量，让它对每个实例对象都 unique ，而不是被所有实例共享：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color)</span>:</span></span><br><span class="line">        self.color = color    <span class="comment"># instance variable</span></span><br><span class="line">        self.actions = []     <span class="comment"># instance variable</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addActions</span><span class="params">(self, action)</span>:</span></span><br><span class="line">        self.actions.append(action)</span><br><span class="line"></span><br><span class="line">a1 = animal(<span class="string">'black'</span>)</span><br><span class="line">a2 = animal(<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line">a1.addActions(<span class="string">'run'</span>)      <span class="comment"># 动物a1会跑</span></span><br><span class="line">a2.addActions(<span class="string">'fly'</span>)      <span class="comment"># 动物a2会飞</span></span><br><span class="line"></span><br><span class="line">print(a1.actions, a2.actions)   <span class="comment"># 输出：['run'] ['fly']</span></span><br></pre></td></tr></table></figure></p>
<p>（全文完）<br><br><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在<a href="http://songlee24.github.io/2014/08/20/python-basic-10/">类的初印象</a>中，我们已经简单的介绍了类，包括类的定义、类对象和实例对象。本文将进一步学习类的继承、迭代器、发生器等等。</p>
<p><br></p>
<h3 id="一、类的继承">一、类的继承</h3><p><strong>单继承</strong></p>
<p>派生类的定义如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClassName</span><span class="params">(BaseClassName)</span>:</span></span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Lang.-Python" scheme="http://yoursite.com/categories/Lang-Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python3基础（十） 类的初印象]]></title>
    <link href="http://yoursite.com/2014/08/20/python-basic-10/"/>
    <id>http://yoursite.com/2014/08/20/python-basic-10/</id>
    <published>2014-08-19T18:10:39.000Z</published>
    <updated>2015-05-10T08:00:19.308Z</updated>
    <content type="html"><![CDATA[<p>Python是一种面向对象的脚本语言，所以它也提供了面向对象编程的所有基本特征：<em>允许多继承的类继承机制、派生类可以重写它父类的任何方法、一个方法可以调用父类中同名的方法、对象可以包含任意数量和类型的数据成员</em>。关于继承，将在下一篇博文里面介绍，本文只简单的介绍Python中的类的定义和使用。</p>
<h3 id="一、类定义">一、类定义</h3><p>最简单的类的定义形式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span></span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>类定义会创建一个新的命名空间，作为一个局部的作用域。在Python中，类本身就是对象，当一个类定义结束后, 一个 Class Object 就被创建。</p>
<p><br></p>
<h3 id="二、类对象">二、类对象</h3><p>类对象（Class Object）支持两种操作：<strong>属性引用</strong> 和 <strong>实例化</strong>。</p>
<p><strong>属性引用</strong></p>
<p>类对象的属性引用和 Python 中所有的属性引用一样，形式为：<code>obj.name</code> 。类对象创建后，类命名空间中所有的名字都是有效属性名，像下面这个类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    <span class="string">"""A simple example class"""</span></span><br><span class="line">    i = <span class="number">12345</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure></p>
<p>它有一个属性 i 和 方法 f ，所以可以用<code>MyClass.i</code> 和 <code>MyClass.f</code> 进行属性引用，分别返回一个整数和一个函数对象。__doc__ 也是一个合法的属性，返回属于这个类的文档字符串。</p>
<p><strong>实例化</strong></p>
<p>类的实例化形式为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="function"><span class="title">MyClass</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<p>创建了一个新的实例，并且将其指定给局部变量 x 。</p>
<p>在创建实例时，通常可能都需要有特定的初始状态，所以一个类可以定义一个名为 <code>__init__()</code>的特殊方法（构造方法）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.data = []</span><br></pre></td></tr></table></figure></p>
<p>当一个类定义了 __init__() 方法，类在实例化时会<strong>自动调用</strong> __init__() 方法，用于创建新的类实例。 就像C++中的构造函数一样， __init__() 也可以有更多的参数，这时实例化提供给类的参数会传给 __init__() ，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n, a)</span>:</span></span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line"></span><br><span class="line">stu = student(<span class="string">'Selena'</span>, <span class="number">19</span>)</span><br><span class="line">print(stu.name, stu.age)     <span class="comment"># 输出：Selena 19</span></span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="三、实例对象">三、实例对象</h3><p>类对象实例化得到<strong>实例对象（Instance Object）</strong>，实例对象只能进行 <strong>属性引用</strong> 这一种操作。合法的属性有两种：数据属性 和 方法。</p>
<p><strong>数据属性</strong></p>
<p>数据属性（data attributes）相当于C++中的数据成员，在Python中，数据属性不需要声明，当它们第一次指定时就会被引入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    i = <span class="number">12345</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line">x = MyClass()</span><br><span class="line">x.counter = <span class="number">1</span></span><br><span class="line">print(x.counter)</span><br><span class="line"><span class="keyword">del</span> x.counter</span><br></pre></td></tr></table></figure></p>
<p>注：在Python中每个值都是一个对象，可以通过<code>object.__class__</code>来获取对象的 class （即类型），其作用与 type() 相同。</p>
<p><strong>方法</strong></p>
<p>在类对象中定义的函数与普通函数只有一个特别的区别：<strong>它们的第一个参数必须是<code>self</code>，用以指定调用该方法的实例对象。</strong> </p>
<p><strong>注意</strong>：类的方法只有被绑定到实例对象上才能够被调用。比如上面的例子中，x 是 MyClass类的一个实例对象，所以它可以直接调用 f 方法：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.<span class="function"><span class="title">f</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<p>为什么 f() 定义时是有一个参数的，而这里调用不需要参数呢？ 因为在调用时， x 对象作为参数传递给了函数的第一个参数（即 self）。也就是说，<code>x.f()</code> 是严格等价于 <code>MyClass.f(x)</code>的。</p>
<p>所以在多数情况下，调用一个方法（有个 n 个参数），和调用相应的函数（也有那 n 个参数，但是再额外加入一个使用该方法的对象） 是等价的。</p>
<p>另外，函数也可以在 class 外定义，指定该函数对象给类中的局部变量就可以了，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Function defined outside the class</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> min(x, y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    f = f1</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line">c = C()    <span class="comment"># 实例化</span></span><br><span class="line">c.f(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">c.g()</span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="四、私有成员">四、私有成员</h3><p>从C++术语上讲，Python 类的成员（包括数据成员）通常都是 <strong>public</strong> 的，并且所有的成员函数都是 <strong>virtual</strong> 的。</p>
<p>那么，如何在类中定义私有变量或私有方法呢？ </p>
<p>答：在Python中规定，以<strong>两个下划线开头的名字</strong>为私有成员，不能在类的外部使用。</p>
<p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    __str = <span class="string">'python'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__str</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__str</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">a.__str   <span class="comment"># 'A' object has no attribute '__str'</span></span><br><span class="line">a.__f()   <span class="comment"># 'A' object has no attribute '__f'</span></span><br><span class="line">a.f()     <span class="comment"># 输出：python</span></span><br></pre></td></tr></table></figure></p>
<p><br><br><br><br></p>
<h3 id="附：作用域的探讨">附：作用域的探讨</h3><p>在讲<a href="http://songlee24.github.io/blog/2014/08/09/python3ji-chu-wu-han-shu/" target="_blank" rel="external">函数变量作用域</a>时，曾经说过在一个局部作用域内重新绑定全局变量，需要使用<code>global</code>声明。否则，尝试给这个变量赋值，只是会简单的创建一个新的局部变量，而不会改变那个全局变量。</p>
<p>这里再介绍一个<code>nonlocal</code>语句，它用于指示，在外层的局部作用域中的变量可以在这里进行重新绑定。下面是一个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope_test</span><span class="params">()</span>:</span>   <span class="comment"># 作用域测试</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_local</span><span class="params">()</span>:</span></span><br><span class="line">        x = <span class="string">'local x'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_nonlocal</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x = <span class="string">'nonlocal x'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_global</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">global</span> x</span><br><span class="line">        x = <span class="string">'global x'</span></span><br><span class="line"></span><br><span class="line">    x = <span class="string">'test x'</span>   <span class="comment"># 局部变量</span></span><br><span class="line"></span><br><span class="line">    do_local()</span><br><span class="line">    print(<span class="string">'After do_local():'</span>, x)</span><br><span class="line">    do_nonlocal()</span><br><span class="line">    print(<span class="string">'After do_nonlocal():'</span>, x)</span><br><span class="line">    do_global()</span><br><span class="line">    print(<span class="string">'After do_global():'</span>, x)</span><br><span class="line"></span><br><span class="line">scope_test()</span><br><span class="line">print(<span class="string">'In global scope:'</span>, x)</span><br></pre></td></tr></table></figure></p>
<p>可以看出，局部的赋值 <strong>do_local()</strong> 并没有改变 scope_test 绑定的 x 变量，而 <strong>do_nonlocal()</strong> 则改变了 scope_test 中的 x，而 <strong>do_global()</strong> 则改变了模块级别的绑定，即全局变量。</p>
<p><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Python是一种面向对象的脚本语言，所以它也提供了面向对象编程的所有基本特征：<em>允许多继承的类继承机制、派生类可以重写它父类的任何方法、一个方法可以调用父类中同名的方法、对象可以包含任意数量和类型的数据成员</em>。关于继承，将在下一篇博文里面介绍，本文只简单的介绍Python中的类的定义和使用。</p>
<h3 id="一、类定义">一、类定义</h3><p>最简单的类的定义形式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span></span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Lang.-Python" scheme="http://yoursite.com/categories/Lang-Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python3基础（九） 错误和异常]]></title>
    <link href="http://yoursite.com/2014/08/19/python-basic-09/"/>
    <id>http://yoursite.com/2014/08/19/python-basic-09/</id>
    <published>2014-08-19T05:44:15.000Z</published>
    <updated>2015-05-10T07:57:26.421Z</updated>
    <content type="html"><![CDATA[<p>本文主要介绍Python中的错误和异常，涉及到简单的异常处理、抛出异常以及清理动作。至于<strong>自定义异常类</strong>，将在介绍类与继承的时候讲到。</p>
<h3 id="一、定义">一、定义</h3><p>常见的两种错误：语法错误 和 异常。</p>
<p><strong>1、语法错误（Syntax Errors）</strong></p>
<p>语法错误，也就是解析时错误。当我们写出不符合python语法的代码时，在解析时会报SyntaxError，并且会显示出错的那一行，并用小箭头指明最早探测到错误的位置。比如：<a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = input(<span class="string">'please input an integer:'</span>)</span><br><span class="line"><span class="keyword">if</span> int(x) &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure></p>
<p>在python 3中会报语法错误：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">File</span> <span class="string">"/home/songlee/test"</span>, <span class="keyword">line</span> 3</span><br><span class="line">    <span class="keyword">print</span> 'hello world'</span><br><span class="line">                      ^</span><br><span class="line">SyntaxError: invalid <span class="keyword">syntax</span></span><br></pre></td></tr></table></figure></p>
<p><strong>2、异常（Exceptions）</strong></p>
<p>即使语句或表达式在语法上是正确的，但在尝试运行时也可能发生错误，运行时错误就叫做 异常（Exceptions） 。异常并不是致命的问题，因为我们可以在程序中对异常进行处理。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="number">10</span> * (<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="constant">Traceback</span> (most recent call last)<span class="symbol">:</span></span><br><span class="line">  <span class="constant">File</span> <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="constant">ZeroDivisionError</span><span class="symbol">:</span> division by zero</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="number">2</span> + x*<span class="number">3</span></span><br><span class="line"><span class="constant">Traceback</span> (most recent call last)<span class="symbol">:</span></span><br><span class="line">  <span class="constant">File</span> <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="constant">NameError</span><span class="symbol">:</span> name <span class="string">'x'</span> is <span class="keyword">not</span> <span class="keyword">defined</span></span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="string">'2'</span> + <span class="number">2</span></span><br><span class="line"><span class="constant">Traceback</span> (most recent call last)<span class="symbol">:</span></span><br><span class="line">  <span class="constant">File</span> <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="constant">TypeError</span><span class="symbol">:</span> <span class="constant">Can</span><span class="string">'t convert '</span>int<span class="string">' object to str implicitly</span></span><br></pre></td></tr></table></figure></p>
<p>上面展示了三种exception的类型：ZeroDivisionError、NameError、TypeError ，它们都是内置异常的名称。标准异常的名字是内建的标识符 (但并不是关键字)。</p>
<p><br></p>
<h3 id="二、处理异常（try…except…）">二、处理异常（try…except…）</h3><p>我们可以使用 try…except… 语句来处理异常。try 语句块中是要执行的语句，except 语句块中是异常处理语句。一个 try 语句可以有多条的 except 语句，用以指定不同的异常，但至多只有一个会被执行：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    x = <span class="function"><span class="title">int</span><span class="params">(input(<span class="string">'please input an integer:'</span>)</span></span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span>/x &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="function"><span class="title">print</span><span class="params">(<span class="string">'Hello World!'</span>)</span></span></span><br><span class="line">except ValueError:</span><br><span class="line">    <span class="function"><span class="title">print</span><span class="params">(<span class="string">'That was no valid number. Try again...'</span>)</span></span></span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    <span class="function"><span class="title">print</span><span class="params">(<span class="string">'The divisor can not be zero, Try again...'</span>)</span></span></span><br><span class="line">except:</span><br><span class="line">    <span class="function"><span class="title">print</span><span class="params">(<span class="string">'Handling other exceptions...'</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p>上面这段代码，当输入a（非数字）时，将抛出<strong><em>ValueError</em></strong>异常；当输入0时，将抛出<strong><em>ZeroDivisionError</em></strong>异常；当抛出<strong><em>其他类型</em></strong>的异常时，将执行except:后的处理语句。</p>
<p>如果在 try 语句执行时，出现了一个异常，该语句的剩下部分将被跳过。并且如果该异常的类型匹配到了 except 后面的异常名，那么该 except 后的语句将被执行。注意，如果 except 后面没有跟异常名，表示它匹配任何类型的异常，<code>except:</code>必须放在最后。</p>
<p>一个 except 语句可以同时包括多个异常名，但需要用括号括起来，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> (RuntimeError, TypeError, NameError):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>
<p>try / except 语句可以有一个可选的 else 语句。else 语句必须要放在所有 except 语句后面，当<strong>没有异常发生</strong>的时候，else 从句将被执行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    name = input(<span class="string">'please input an integer:'</span>)</span><br><span class="line">    f = open(name, <span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    print(<span class="string">'Cannot open'</span>, name)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'Unexpected errors.'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'close the file'</span>, name)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="三、抛出异常（raise）">三、抛出异常（raise）</h3><p><strong>raise 语句</strong>允许程序员强制地抛出一个特定的异常，例如：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; raise <span class="constant">NameError</span>(<span class="string">'HiThere'</span>)     <span class="comment"># 抛出异常</span></span><br><span class="line"><span class="constant">Traceback</span> (most recent call last)<span class="symbol">:</span></span><br><span class="line">  <span class="constant">File</span> <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="constant">NameError</span><span class="symbol">:</span> <span class="constant">HiThere</span></span><br></pre></td></tr></table></figure></p>
<p>raise 抛出的异常必须是一个异常实例或类（派生自 Exception 的类）。</p>
<p><br></p>
<h3 id="四、清理动作（finally）">四、清理动作（finally）</h3><p>try 语句有另一种可选的<code>finally</code>从句，用于自定义一些扫尾清理的工作。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    x = <span class="function"><span class="title">int</span><span class="params">(input(<span class="string">'please input an integer:'</span>)</span></span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="function"><span class="title">print</span><span class="params">(<span class="string">'Hello World!'</span>)</span></span></span><br><span class="line">except ValueError:</span><br><span class="line">    <span class="function"><span class="title">print</span><span class="params">(<span class="string">'It was not a number. Try again.'</span>)</span></span></span><br><span class="line">finally:</span><br><span class="line">    <span class="function"><span class="title">print</span><span class="params">(<span class="string">'Some clean-up actions!'</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong>与 else 从句的区别在于：</strong> else 语句只在没有异常发生的情况下执行，而 finally 语句则不管异常发生与否都会执行。准确的说，finally 语句总是在退出 try 语句前被执行，无论是正常退出、异常退出，还是通过break、continue、return退出。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def divide(x, y):</span><br><span class="line">...     <span class="keyword">try</span>:</span><br><span class="line">...             <span class="literal">result</span> = x / y</span><br><span class="line">...     <span class="keyword">except</span> <span class="type">ZeroDivisionError</span>:</span><br><span class="line">...             print('error: division by zero!')</span><br><span class="line">...     <span class="keyword">else</span>:</span><br><span class="line">...             print('executing <span class="keyword">else</span>-clause,', '<span class="literal">result</span> <span class="keyword">is</span>', <span class="literal">result</span>)</span><br><span class="line">...     <span class="keyword">finally</span>:</span><br><span class="line">...             print('executing <span class="keyword">finally</span>-clause')</span><br><span class="line">... </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; divide(<span class="number">2</span>, <span class="number">1</span>)      <span class="comment"># 正常退出</span></span><br><span class="line">executing <span class="keyword">else</span>-clause, <span class="literal">result</span> <span class="keyword">is</span> <span class="number">2</span>.<span class="number">0</span></span><br><span class="line">executing <span class="keyword">finally</span>-clause</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; divide(<span class="number">2</span>, <span class="number">0</span>)      <span class="comment"># 异常退出</span></span><br><span class="line">error: division by zero!</span><br><span class="line">executing <span class="keyword">finally</span>-clause</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; divide('<span class="number">2</span>', '<span class="number">1</span>')  <span class="comment"># 异常退出，异常未被处理。</span></span><br><span class="line">executing <span class="keyword">finally</span>-clause</span><br><span class="line"><span class="type">Traceback</span> (most recent call last):</span><br><span class="line">  <span class="type">File</span> <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  <span class="type">File</span> <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> divide</span><br><span class="line"><span class="type">TypeError</span>: unsupported operand <span class="keyword">type</span>(s) <span class="keyword">for</span> /: 'str' <span class="keyword">and</span> 'str'</span><br></pre></td></tr></table></figure></p>
<p>从上面看出，finally 语句在任何情况下都被执行了。对于没有被 except 处理的异常，将在执行完 finally 后被重新抛出。</p>
<p>另外，有些对象预定义了标准的<strong>清理动作（clean-up actions）</strong>。当对象不再需要时，该动作将被执行，无论对其使用的操作是否成功。例如下面的<a href="http://songlee24.github.io/2014/08/14/python-basic-07/" target="_blank" rel="external">文件I/O</a>例子：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="function"><span class="title">open</span><span class="params">(<span class="string">"myfile.txt"</span>)</span></span>:</span><br><span class="line">    <span class="function"><span class="title">print</span><span class="params">(line, end=<span class="string">""</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p>这段代码的问题在于，在此代码成功执行后，文件依然被打开着。但<code>with</code>语句可以让文件对象在使用后被正常的清理掉：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">with</span> <span class="built_in">open</span>(<span class="string">"myfile.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> <span class="operator">in</span> f:</span><br><span class="line">        print(<span class="built_in">line</span>, <span class="function"><span class="keyword">end</span>="")</span></span><br></pre></td></tr></table></figure></p>
<p>在执行该语句后，文件 f 就会被关闭，就算是在读取时碰到了问题，文件 f 也会被关闭。像文件这样的对象，总会提供预定义的清理工作。</p>
<p><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文主要介绍Python中的错误和异常，涉及到简单的异常处理、抛出异常以及清理动作。至于<strong>自定义异常类</strong>，将在介绍类与继承的时候讲到。</p>
<h3 id="一、定义">一、定义</h3><p>常见的两种错误：语法错误 和 异常。</p>
<p><strong>1、语法错误（Syntax Errors）</strong></p>
<p>语法错误，也就是解析时错误。当我们写出不符合python语法的代码时，在解析时会报SyntaxError，并且会显示出错的那一行，并用小箭头指明最早探测到错误的位置。比如：]]>
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Lang.-Python" scheme="http://yoursite.com/categories/Lang-Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python3基础（八） 模块]]></title>
    <link href="http://yoursite.com/2014/08/18/python-basic-08/"/>
    <id>http://yoursite.com/2014/08/18/python-basic-08/</id>
    <published>2014-08-18T13:45:54.000Z</published>
    <updated>2015-05-10T07:52:11.121Z</updated>
    <content type="html"><![CDATA[<p>在程序中定义<a href="http://songlee24.github.io/2014/08/09/python-basic-05/" target="_blank" rel="external">函数</a>可以实现代码重用。但当你的代码逐渐变得庞大时，你可能想要把它分割成几个文件，以便能够更简单地维护。同时，你希望在一个文件中写的代码能够被其他文件所重用，这时我们应该使用<strong>模块（module）</strong>。</p>
<h3 id="一、导入模块">一、导入模块</h3><p>在Python中，一个<code>.py</code>文件就构成一个模块。一个模块中的定义可以<strong>导入（import）</strong>到另一个模块或主模块。</p>
<p>比如你可以通过内置模块platform来查看你当前的操作平台信息：<a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line">s = platform.platform()</span><br><span class="line">print(s)</span><br><span class="line"><span class="comment"># 我的输出：Linux-3.15.8-200.fc20.x86_64-x86_64-with-fedora-20-Heisenbug</span></span><br></pre></td></tr></table></figure></p>
<p>又比如你可以通过内置模块time获取当前的时间：<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"><span class="keyword">import</span> time</span></span><br><span class="line">s = time.ctime()</span><br><span class="line"><span class="built_in">print</span>(s)<span class="preprocessor"></span><br><span class="line"># 输出：Mon Aug 18 16:04:57 2014</span></span><br></pre></td></tr></table></figure></p>
<p>每个模块有其私有的符号表，在该模块内部当成全局符号表来使用。 当我们将一个模块导入到当前模块时，只有被导入模块的名称被放入当前模块的全局符号表里，所以我们不用担心变量名发生冲突。</p>
<p><strong>其他几种导入方式：</strong></p>
<p>1、<code>import a as b</code>：导入模块a，并将模块a重命名为b。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import <span class="tag">time</span> as x   </span><br><span class="line">s = x.<span class="function"><span class="title">ctime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(s)</span></span></span><br></pre></td></tr></table></figure></p>
<p>2、<code>from a import func</code>：直接把模块内的函数或变量的名称导入当前模块符号表里。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line">s = ctime()   <span class="comment"># 这时可以直接调用函数，而不用再使用time.ctime()</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p>
<p>3、<code>from a import *</code>：导入模块中所有的名字（以下划线开头的名字除外）到当前模块符号表里。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line">s = ctime()   </span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p>
<p>注意：导入 * 是不好的，因为它常常产生难以阅读的代码，并且会容易产生名字冲突。</p>
<p><br></p>
<h3 id="二、模块搜索路径">二、模块搜索路径</h3><p>当导入名为 a 的模块时, 解释器会先从内建模块尝试匹配，如果没找到，则将在 <code>sys.path</code> 记录的所有目录中搜索 a.py 文件，而<code>sys.path</code>则包括：</p>
<ul>
<li>当前程序所在目录</li>
<li>标准库的安装目录</li>
<li>操作系统环境变量PYTHONPATH所包含的目录</li>
</ul>
<p>变量 sys.path 是一个字符串列表，它为解释器指定了模块的搜索路径。它通过环境变量 PATHONPATH 初始化为一个默认路径，当没有设置 PYTHONPATH 时, 就使用内建默认值来初始化。你可以通过标准 list 操作来修改它：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; import sys</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; sys.path.append(<span class="string">'/ufs/guido/lib/python'</span>)</span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="三、模块的__name__">三、模块的__name__</h3><p>对于任何一个模块，模块的名字都可以通过全局变量 <code>__name__</code>得到：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">time</span></span><br><span class="line">s = <span class="built_in">time</span>.__name__</span><br><span class="line"><span class="built_in">print</span>(s)    # 输出<span class="built_in">time</span></span><br></pre></td></tr></table></figure></p>
<p>一个模块既可以在其它模块中导入使用，也可以当作脚本直接运行。不同的是，当导入到其他模块时，__name__的值是被导入模块的名字；而当作为脚本运行时，__name__的值被设为<strong>“__main__“</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">'This program is being run by itself'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">'I am being imported into another module'</span>)</span><br></pre></td></tr></table></figure></p>
<p>当作脚本执行：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python <span class="keyword">test</span>.py </span><br><span class="line">This <span class="keyword">program</span> is being <span class="keyword">run</span> <span class="keyword">by</span> itself</span><br></pre></td></tr></table></figure></p>
<p>当作导入模块使用：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; import test</span><br><span class="line"><span class="constant">I</span> am being imported into another <span class="class"><span class="keyword">module</span></span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="四、dir()_函数">四、dir() 函数</h3><p>在<a href="http://songlee24.github.io/2014/08/13/python-basic-06/" target="_blank" rel="external">Python3基础六</a>中我们提到，可以通过内置dir()函数查询一个类或者对象的所有属性。除此之外，我们还可以用它列出一个模块里定义的所有名字，它返回一个有序字串列表：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; import builtins</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; dir(builtins)</span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="五、包">五、包</h3><p>可以把多个模块，即多个.py文件，放在同一个文件夹中，构成一个<strong>包（Package）</strong>。例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sound/                          顶级包</span><br><span class="line">      __init__<span class="class">.py</span>               初始化这个声音包</span><br><span class="line">      formats/                  格式转换子包</span><br><span class="line">              __init__<span class="class">.py</span></span><br><span class="line">              wavread<span class="class">.py</span></span><br><span class="line">              wavwrite<span class="class">.py</span></span><br><span class="line">              aiffread<span class="class">.py</span></span><br><span class="line">              aiffwrite<span class="class">.py</span></span><br><span class="line">              auread<span class="class">.py</span></span><br><span class="line">              auwrite<span class="class">.py</span></span><br><span class="line">              ...</span><br><span class="line">      effects/                  音效子包</span><br><span class="line">              __init__<span class="class">.py</span></span><br><span class="line">              echo<span class="class">.py</span></span><br><span class="line">              surround<span class="class">.py</span></span><br><span class="line">              reverse<span class="class">.py</span></span><br><span class="line">              ...</span><br><span class="line">      filters/                  过滤器子包</span><br><span class="line">              __init__<span class="class">.py</span></span><br><span class="line">              equalizer<span class="class">.py</span></span><br><span class="line">              vocoder<span class="class">.py</span></span><br><span class="line">              karaoke<span class="class">.py</span></span><br><span class="line">              ...</span><br></pre></td></tr></table></figure></p>
<p>注意：在每个包文件夹里都必须包含一个 __init__.py 的文件，告诉Python，该文件夹是一个包。__init__.py 可以是一个空文件。</p>
<p>我们可以通过<code>import 包名.模块名</code>导入包中的子模块，例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import sound<span class="class">.effects</span><span class="class">.echo</span></span><br></pre></td></tr></table></figure></p>
<p>当然，也可以使用<code>from... import...</code>句式导入包中的模块：<br><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> echo               <span class="comment"># 导入echo子模块</span></span><br><span class="line"><span class="keyword">from</span> sound.effects.echo <span class="keyword">import</span> echofilter    <span class="comment"># 导入echo子模块中的函数或变量</span></span><br><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> *                  <span class="comment"># 导入__all__变量中所有的子模块</span></span><br></pre></td></tr></table></figure></p>
<p><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在程序中定义<a href="http://songlee24.github.io/2014/08/09/python-basic-05/">函数</a>可以实现代码重用。但当你的代码逐渐变得庞大时，你可能想要把它分割成几个文件，以便能够更简单地维护。同时，你希望在一个文件中写的代码能够被其他文件所重用，这时我们应该使用<strong>模块（module）</strong>。</p>
<h3 id="一、导入模块">一、导入模块</h3><p>在Python中，一个<code>.py</code>文件就构成一个模块。一个模块中的定义可以<strong>导入（import）</strong>到另一个模块或主模块。</p>
<p>比如你可以通过内置模块platform来查看你当前的操作平台信息：]]>
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Lang.-Python" scheme="http://yoursite.com/categories/Lang-Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python FAQ2：赋值、浅拷贝、深拷贝的区别？]]></title>
    <link href="http://yoursite.com/2014/08/15/python-FAQ-02/"/>
    <id>http://yoursite.com/2014/08/15/python-FAQ-02/</id>
    <published>2014-08-14T16:58:57.000Z</published>
    <updated>2015-05-10T07:39:06.313Z</updated>
    <content type="html"><![CDATA[<p>在写Python过程中，经常会遇到对象的拷贝，如果不理解<strong>浅拷贝</strong>和<strong>深拷贝</strong>的概念，你的代码就可能出现一些问题。所以，在这里按个人的理解谈谈它们之间的区别。<br><br></p>
<h3 id="一、赋值（assignment）">一、赋值（assignment）</h3><p>在《<a href="http://songlee24.github.io/2014/08/12/python-FAQ-01/" target="_blank" rel="external">Python FAQ1</a>》一文中，对赋值已经讲的很清楚了，关键要理解<strong>变量与对象的关系</strong>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>print(id(a), id(b), sep=<span class="string">'\n'</span>)</span><br><span class="line"><span class="number">139701469405552</span></span><br><span class="line"><span class="number">139701469405552</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>在Python中，用一个变量给另一个变量<strong>赋值</strong>，其实就是给当前内存中的对象增加一个“标签”而已。</p>
<p>如上例，通过使用内置函数 id() ，可以看出 a 和 b 指向内存中同一个对象。<code>a is b</code>会返回 True 。<br><br></p>
<h3 id="二、浅拷贝（shallow_copy）">二、浅拷贝（shallow copy）</h3><p><strong>注意：浅拷贝和深拷贝的不同仅仅是对组合对象来说，所谓的组合对象就是包含了其它对象的对象，如列表，类实例。而对于数字、字符串以及其它“原子”类型，没有拷贝一说，产生的都是原对象的引用。</strong></p>
<p>所谓“浅拷贝”，是指创建一个新的对象，其内容是原对象中元素的引用。（拷贝组合对象，不拷贝子对象）</p>
<p>常见的浅拷贝有：切片操作、工厂函数、对象的copy()方法、copy模块中的copy函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>b = list(a)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>print(id(a), id(b))          <span class="comment"># a和b身份不同</span></span><br><span class="line"><span class="number">140601785066200</span> <span class="number">140601784764968</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(a, b):       <span class="comment"># 但它们包含的子对象身份相同</span></span><br><span class="line"><span class="prompt">... </span>    print(id(x), id(y))</span><br><span class="line"><span class="prompt">... </span></span><br><span class="line"><span class="number">140601911441984</span> <span class="number">140601911441984</span></span><br><span class="line"><span class="number">140601911442016</span> <span class="number">140601911442016</span></span><br><span class="line"><span class="number">140601911442048</span> <span class="number">140601911442048</span></span><br></pre></td></tr></table></figure></p>
<p>从上面可以明显的看出来，a 浅拷贝得到 b，a 和 b 指向内存中不同的 <strong>list</strong> 对象，但它们的元素却指向相同的 <strong>int</strong> 对象。这就是浅拷贝！<br><br></p>
<h3 id="三、深拷贝（deep_copy）">三、深拷贝（deep copy）</h3><p>所谓“深拷贝”，是指创建一个新的对象，然后递归的拷贝原对象所包含的子对象。深拷贝出来的对象与原对象没有任何关联。</p>
<p>深拷贝只有一种方式：copy模块中的deepcopy函数。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import copy</span><br><span class="line">&gt;&gt;&gt; <span class="tag">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt; <span class="tag">b</span> = copy.<span class="function"><span class="title">deepcopy</span><span class="params">(a)</span></span></span><br><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">print</span><span class="params">(id(a)</span></span>, <span class="function"><span class="title">id</span><span class="params">(b)</span></span>)</span><br><span class="line"><span class="number">140601785065840</span> <span class="number">140601785066200</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="function"><span class="title">zip</span><span class="params">(a, b)</span></span>:</span><br><span class="line">...     <span class="function"><span class="title">print</span><span class="params">(id(x)</span></span>, <span class="function"><span class="title">id</span><span class="params">(y)</span></span>)</span><br><span class="line">... </span><br><span class="line"><span class="number">140601911441984</span> <span class="number">140601911441984</span></span><br><span class="line"><span class="number">140601911442016</span> <span class="number">140601911442016</span></span><br><span class="line"><span class="number">140601911442048</span> <span class="number">140601911442048</span></span><br></pre></td></tr></table></figure>
<p>看了上面的例子，有人可能会疑惑：</p>
<p><strong>为什么使用了深拷贝，a和b中元素的id还是一样呢？</strong> </p>
<p>答：这是因为对于<strong>不可变对象</strong>，当需要一个新的对象时，python可能会返回已经存在的某个类型和值都一致的对象的引用。而且这种机制并不会影响 a 和 b 的相互独立性，因为当两个元素指向同一个不可变对象时，对其中一个赋值不会影响另外一个。</p>
<p>我们可以用一个包含可变对象的列表来确切地展示“浅拷贝”与“深拷贝”的区别：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>a = [[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>b = copy.copy(a)              <span class="comment"># 浅拷贝得到b</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>c = copy.deepcopy(a)          <span class="comment"># 深拷贝得到c</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>print(id(a), id(b))           <span class="comment"># a 和 b 不同</span></span><br><span class="line"><span class="number">139832578518984</span> <span class="number">139832578335520</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(a, b):        <span class="comment"># a 和 b 的子对象相同</span></span><br><span class="line"><span class="prompt">... </span>    print(id(x), id(y))</span><br><span class="line"><span class="prompt">... </span></span><br><span class="line"><span class="number">139832578622816</span> <span class="number">139832578622816</span></span><br><span class="line"><span class="number">139832578622672</span> <span class="number">139832578622672</span></span><br><span class="line"><span class="number">139832578623104</span> <span class="number">139832578623104</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>print(id(a), id(c))           <span class="comment"># a 和 c 不同</span></span><br><span class="line"><span class="number">139832578518984</span> <span class="number">139832578622456</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(a, c):        <span class="comment"># a 和 c 的子对象也不同</span></span><br><span class="line"><span class="prompt">... </span>    print(id(x), id(y))</span><br><span class="line"><span class="prompt">... </span></span><br><span class="line"><span class="number">139832578622816</span> <span class="number">139832578621520</span></span><br><span class="line"><span class="number">139832578622672</span> <span class="number">139832578518912</span></span><br><span class="line"><span class="number">139832578623104</span> <span class="number">139832578623392</span></span><br></pre></td></tr></table></figure></p>
<p>从这个例子中可以清晰地看出浅拷贝与深拷贝地区别。</p>
<p><br><br><br></p>
<h3 id="总结：">总结：</h3><p>1、赋值：简单地拷贝对象的引用，两个对象的id相同。<br>2、浅拷贝：创建一个新的组合对象，这个新对象与原对象共享内存中的子对象。<br>3、深拷贝：创建一个新的组合对象，同时递归地拷贝所有子对象，新的组合对象与原对象没有任何关联。虽然实际上会共享不可变的子对象，但不影响它们的相互独立性。</p>
<p>浅拷贝和深拷贝的不同仅仅是对组合对象来说，所谓的组合对象就是包含了其它对象的对象，如列表，类实例。而对于数字、字符串以及其它“原子”类型，没有拷贝一说，产生的都是原对象的引用。</p>
<p><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在写Python过程中，经常会遇到对象的拷贝，如果不理解<strong>浅拷贝</strong>和<strong>深拷贝</strong>的概念，你的代码就可能出现一些问题。所以，在这里按个人的理解谈谈它们之间的区别。<br><br></p>
<h3 id="一、赋值（assignment）">一、赋值（assignment）</h3><p>在《<a href="http://songlee24.github.io/2014/08/12/python-FAQ-01/">Python FAQ1</a>》一文中，对赋值已经讲的很清楚了，关键要理解<strong>变量与对象的关系</strong>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>print(id(a), id(b), sep=<span class="string">'\n'</span>)</span><br><span class="line"><span class="number">139701469405552</span></span><br><span class="line"><span class="number">139701469405552</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Lang.-Python" scheme="http://yoursite.com/categories/Lang-Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python3基础（七） 输入和输出]]></title>
    <link href="http://yoursite.com/2014/08/14/python-basic-07/"/>
    <id>http://yoursite.com/2014/08/14/python-basic-07/</id>
    <published>2014-08-14T13:16:46.000Z</published>
    <updated>2015-05-10T07:36:42.774Z</updated>
    <content type="html"><![CDATA[<p>一个程序可以从键盘读取输入，也可以从文件读取输入；而程序的结果可以输出到屏幕上，也可以保存到文件中便于以后使用。本文介绍Python中最基本的I/O函数。</p>
<p><br></p>
<h3 id="一、控制台I/O">一、控制台I/O</h3><p><strong>读取键盘输入</strong></p>
<p>内置函数<code>input([prompt])</code>，用于从标准输入读取一个行，并返回一个字符串（去掉结尾的换行符）：<a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">"Enter your input:"</span>)</span><br></pre></td></tr></table></figure></p>
<p>注：在Python 3.x版本中取消了 raw_input() 函数。</p>
<p><strong>打印到屏幕</strong></p>
<p>最简单的输出方法是用print语句，你可以给它传递零个或多个用逗号隔开的表达式：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print([<span class="link_label">object, ...</span>][<span class="link_reference">, sep=' '</span>][<span class="link_label">, end='endline_character_here'</span>][<span class="link_reference">, file=redirect_to_here</span>])</span><br></pre></td></tr></table></figure></p>
<p>方括号内是可选的，sep表示分割符，end表示结束符，file表示重定向文件。如果要给sep、end、file指定值必须使用关键字参数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">'hello'</span>, <span class="string">'world'</span>, sep=<span class="string">'%'</span>)    <span class="comment"># 输出hello%world</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'hello'</span>, <span class="string">'world'</span>, end=<span class="string">'*'</span>)    <span class="comment"># 输出hello world*，并且不换行</span></span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="二、文件I/O">二、文件I/O</h3><p>读写文件之前，先用open()函数打开一个文件，它会返回一个文件对象（file object）：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="function"><span class="title">open</span><span class="params">(filename，mode)</span></span></span><br></pre></td></tr></table></figure></p>
<p>如果不指定mode参数，文件将默认以<strong>‘r’</strong>模式打开。模式中的字符有：</p>
<ul>
<li><strong>r</strong>：只读</li>
<li><strong>w</strong>：只写，如果文件已存在则将其覆盖。如果该文件不存在，创建新文件</li>
<li><strong>+</strong>：读写（<strong>不能单独使用</strong>）</li>
<li><strong>a</strong>：打开文件用于追加，只写，不存在则创建新文件</li>
<li><strong>b</strong>：以二进制模式打开（<strong>不能单独使用</strong>）</li>
</ul>
<p>所以可能的模式大概有<strong>r、w、r+、w+、rb、wb、rb+、wb+、a、a+、ab、ab+</strong>，注意只有w和a可以创建文件。</p>
<p>通常情况下，文件都是以文本模式（text mode）打开的，也就是说，从文件中读写的是以一种特定的编码格式进行编码（默认的是 UTF-8）的<strong>字符串</strong>。如果文件以二进制模式（binary mode）打开，数据将以<strong>字节对象</strong>的形式进行读写：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">'a.txt'</span>,<span class="string">'wb+'</span>)</span><br><span class="line">f.<span class="built_in">write</span>(<span class="string">'I like apple!'</span>)   <span class="comment"># 报错</span></span><br><span class="line">f.<span class="built_in">write</span>(b<span class="string">'I like apple!'</span>)  <span class="comment"># 以bytes对象的形式进行读写</span></span><br></pre></td></tr></table></figure></p>
<p><a href="https://docs.python.org/3.4/library/stdtypes.html#bytes" target="_blank" rel="external"><strong>Bytes对象</strong></a>是0到127的不可修改的整数序列，或纯粹的 ASCII 字符，它的用途是存储二进制数据。  </p>
<ol>
<li>可以通过<strong>在一个字符串前面加上’b’</strong>来创建一个bytes literal；</li>
<li>也可以通过<strong>bytes() 函数</strong>创建一个 bytes 对象。</li>
</ol>
<p>注意：如果bytes() 函数的初始化器是一个字符串，那么必须提供一种编码。<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b1 = b<span class="attribute">'This</span> <span class="keyword">is</span> <span class="typename">string</span>'</span><br><span class="line">b2 = bytes(<span class="attribute">'This</span> <span class="keyword">is</span> <span class="typename">string</span>', <span class="attribute">'UTF</span>-<span class="number">8</span>')   # 必须指定编码格式</span><br></pre></td></tr></table></figure></p>
<p>字符串对象与字节对象是不兼容的，要将 bytes 转变为 str， bytes 对象必须要进行解码，使用<strong>decode()</strong> 方法：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = bytes(<span class="string">'This is string'</span>, <span class="string">'UTF-8'</span>)</span><br><span class="line">print(b, b.decode(), sep=<span class="string">'\n'</span>)</span><br><span class="line"><span class="preprocessor"># 输出：</span></span><br><span class="line"><span class="preprocessor"># b'This is string'</span></span><br><span class="line"><span class="preprocessor"># This is string</span></span><br></pre></td></tr></table></figure></p>
<p><strong>文件对象的方法</strong>（假设f是一个文件对象）：</p>
<ul>
<li><strong>f.read(size) ：</strong>读取size个字节的数据，然后作为字符串或 bytes 对象返回。size是一个可选参数，如果不指定size，则读取文件的所有内容。</li>
<li><strong>f.readline() ：</strong>读取一行。在字符串末尾会留下换行符 (\n)，如果到文件尾，返回空字符串。</li>
<li><strong>f.readlines() ：</strong>读取所有行，储存在列表中，每个元素是一行，相当于<code>list(f)</code>。</li>
<li><strong>f.write(string) ：</strong>将 string 写入到文件中，返回写入的字符数。如果以二进制模式写文件，需要将string转换为 bytes 对象。</li>
<li><strong>f.tell() ：</strong>返回文件对象当前所处的位置，它是从文件开头开始算起的字节数。 </li>
<li><strong>f.seek(offset, from_what) ：</strong>改变文件对象所处的位置。offset是相对参考位置的偏移量，from_what 取值 0（文件头, 默认）、1（当前位置）、2（文件尾）表示参考位置。</li>
<li><strong>f.close() ：</strong>关闭文件对象。</li>
</ul>
<p>这些都是很常用的方法，当然文件对象不止这些方法。根据打开的模式不同，open() 返回的文件对象类型也不同：</p>
<ul>
<li><strong>TextIOWrapper</strong>：文本模式，返回TextIOWrapper对象。</li>
<li><strong>BufferedReader</strong>：读二进制，即rb，返回BufferedReader对象。</li>
<li><strong>BufferedWriter</strong>：写和追加二进制，即wb、ab，返回BufferedWriter对象。</li>
<li><strong>BufferedRandom</strong>：读/写模式，即含有+的模式，返回BufferedRandom对象。</li>
</ul>
<p>可以在这些文件对象上运行 dir() 或 help()，查看它们所有的方法。</p>
<p><strong>补充</strong>：</p>
<p>1、在文本模式下，seek()方法只会相对于文件起始位置进行定位。（除了定位文件尾可以用 <code>seek(0, 2)</code>之外）<br>2、可以循环迭代一个文件对象一行一行读取：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">line</span> <span class="operator">in</span> f:</span><br><span class="line">print(<span class="built_in">line</span>, <span class="function"><span class="keyword">end</span>='')</span></span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="三、格式化输出">三、格式化输出</h3><p>一般来说，我们希望更多的控制输出格式，而不是简单的以空格分割。这里有两种方式：</p>
<ul>
<li>第一种是由你自己控制。使用字符串切片、连接操作以及 <a href="https://docs.python.org/3.4/library/stdtypes.html#str.center" target="_blank" rel="external">string</a> 包含的一些有用的操作。</li>
<li>第二种是使用<a href="https://docs.python.org/3.4/library/stdtypes.html#str.format" target="_blank" rel="external">str.format()</a>方法。</li>
</ul>
<p>下面给一个示例：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 第一种方式：自己控制</span></span><br><span class="line"><span class="keyword">for</span> x in range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">	print(str(x).rjust(<span class="number">2</span>), str(x*x).rjust(<span class="number">3</span>), end=<span class="string">' '</span>)</span><br><span class="line">	print(str(x*x*x).rjust(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 第二种方式：str.format()</span></span><br><span class="line"><span class="keyword">for</span> x in range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">	print(<span class="string">'&#123;0:2d&#125; &#123;1:3d&#125; &#123;2:4d&#125;'</span>.format(x, x*x, x*x*x))</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 输出都是：</span></span><br><span class="line"><span class="preprocessor">#  1   1    1</span></span><br><span class="line"><span class="preprocessor">#  2   4    8</span></span><br><span class="line"><span class="preprocessor">#  3   9   27</span></span><br><span class="line"><span class="preprocessor">#  4  16   64</span></span><br><span class="line"><span class="preprocessor">#  5  25  125</span></span><br><span class="line"><span class="preprocessor">#  6  36  216</span></span><br><span class="line"><span class="preprocessor">#  7  49  343</span></span><br><span class="line"><span class="preprocessor">#  8  64  512</span></span><br><span class="line"><span class="preprocessor">#  9  81  729</span></span><br><span class="line"><span class="preprocessor"># 10 100 1000</span></span><br></pre></td></tr></table></figure></p>
<p>第一种方式中，字符串对象的 <strong>str.rjust()</strong> 方法的作用是将字符串靠右，并默认在左边填充空格，类似的方法还有 <strong>str.ljust()</strong> 和 <strong>str.center()</strong> 。这些方法并不会写任何东西，它们仅仅返回新的字符串，如果输入很长，它们并不会截断字符串。<strong>我们注意到，</strong>同样是输出一个平方与立方表，使用str.format()会方便很多。</p>
<p>str.format()的基本用法如下：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print<span class="list">(<span class="quoted">'We</span> are the &#123;&#125; who say <span class="string">"&#123;&#125;!"</span>'.format<span class="list">(<span class="quoted">'knights</span>', <span class="quoted">'Ni</span>')</span>)</span></span><br><span class="line">We are the knights who say <span class="string">"Ni!"</span></span><br></pre></td></tr></table></figure></p>
<p>括号及括号里的字符将会被 format() 中的参数替换.。括号中的数字用于指定传入对象的位置：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; print(<span class="string">'&#123;0&#125; and &#123;1&#125;'</span>.format(<span class="string">'Kobe'</span>, <span class="string">'James'</span>))</span><br><span class="line"><span class="constant">Kobe</span> <span class="keyword">and</span> <span class="constant">James</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; print(<span class="string">'&#123;1&#125; and &#123;0&#125;'</span>.format(<span class="string">'Kobe'</span>, <span class="string">'James'</span>))</span><br><span class="line"><span class="constant">James</span> <span class="keyword">and</span> <span class="constant">Kobe</span></span><br></pre></td></tr></table></figure></p>
<p>如果在 format() 中使用了<strong>关键字参数</strong>，那么它们的值会指向使用该名字的参数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>print(<span class="string">'The &#123;thing&#125; is &#123;adj&#125;.'</span>.format(thing=<span class="string">'flower'</span>, adj=<span class="string">'beautiful'</span>))</span><br><span class="line">The flower <span class="keyword">is</span> beautiful.</span><br></pre></td></tr></table></figure></p>
<p>可选项<code>&#39;:&#39;</code>和格式标识符可以跟着 field name，这样可以进行更好的格式化：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import math</span><br><span class="line">&gt;&gt;&gt; print(<span class="string">'The value of PI is &#123;0:.3f&#125;.'</span>.<span class="built_in">format</span>(math.<span class="constant">pi</span>))</span><br><span class="line">The <span class="built_in">value</span> <span class="operator">of</span> <span class="constant">PI</span> is <span class="number">3.142</span>.</span><br></pre></td></tr></table></figure></p>
<p>在<code>&#39;:&#39;</code>后传入一个整数，可以保证该域至少有这么多的宽度，用于美化表格时很有用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>table = &#123;<span class="string">'Jack'</span>:<span class="number">4127</span>, <span class="string">'Rose'</span>:<span class="number">4098</span>, <span class="string">'Peter'</span>:<span class="number">7678</span>&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">for</span> name, phone <span class="keyword">in</span> table.items():</span><br><span class="line"><span class="prompt">... </span>    print(<span class="string">'&#123;0:10&#125; ==&gt; &#123;1:10d&#125;'</span>.format(name, phone))</span><br><span class="line"><span class="prompt">... </span></span><br><span class="line">Peter      ==&gt;       <span class="number">7678</span></span><br><span class="line">Rose       ==&gt;       <span class="number">4098</span></span><br><span class="line">Jack       ==&gt;       <span class="number">4127</span></span><br></pre></td></tr></table></figure></p>
<p>我们还可以将<a href="http://songlee24.github.io/blog/2014/08/09/python3ji-chu-wu-han-shu/" target="_blank" rel="external">参数解包</a>进行格式化输出。例如，将table解包为关键字参数：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">table = &#123;<span class="string">'Jack'</span>:<span class="number">4127</span>, <span class="string">'Rose'</span>:<span class="number">4098</span>, <span class="string">'Peter'</span>:<span class="number">7678</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Jack is &#123;Jack&#125;, Rose is &#123;Rose&#125;, Peter is &#123;Peter&#125;.'</span>.format(**table))</span><br><span class="line"># 输出：Jack <span class="keyword">is</span> <span class="number">4127</span>, Rose <span class="keyword">is</span> <span class="number">4098</span>, Peter <span class="keyword">is</span> <span class="number">7678.</span></span><br></pre></td></tr></table></figure></p>
<p><strong>补充：</strong>  </p>
<p>% 操作符也可以实现字符串格式化。它将左边的参数作为类似 sprintf() 式的格式化字符串，而将右边的代入：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line">print(<span class="attribute">'The</span> value <span class="keyword">of</span> PI <span class="keyword">is</span> %<span class="number">10.3</span>f.' %math.pi)</span><br><span class="line"># 输出：The value <span class="keyword">of</span> PI <span class="keyword">is</span>      <span class="number">3.142</span>.</span><br></pre></td></tr></table></figure></p>
<p>因为这种旧式的格式化最终会从Python语言中移除，应该更多的使用 str.format() 。</p>
<p><br><br><br><br></p>
<h3 id="附：文本模式与二进制模式">附：文本模式与二进制模式</h3><p>1、在Windows系统中，文本模式下，默认是将Windows平台的行末标识符 \r\n 在读时转为 \n ，而在写时将 \n 转为 \r\n 。 这种隐藏的行为对于文本文件是没有问题的，但是对于二进制数据像 JPEG 或 EXE 是会出问题的。在使用这些文件时请小心使用二进制模式。</p>
<p>2、在类Unix/Linux系统中，行末标识符为 \n，即文件以 \n 代表换行。所以Unix/Linux系统中在文本模式和二进制模式下并无区别。</p>
<p><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一个程序可以从键盘读取输入，也可以从文件读取输入；而程序的结果可以输出到屏幕上，也可以保存到文件中便于以后使用。本文介绍Python中最基本的I/O函数。</p>
<p><br></p>
<h3 id="一、控制台I/O">一、控制台I/O</h3><p><strong>读取键盘输入</strong></p>
<p>内置函数<code>input([prompt])</code>，用于从标准输入读取一个行，并返回一个字符串（去掉结尾的换行符）：]]>
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Lang.-Python" scheme="http://yoursite.com/categories/Lang-Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python3基础（六） 深入list列表]]></title>
    <link href="http://yoursite.com/2014/08/13/python-basic-06/"/>
    <id>http://yoursite.com/2014/08/13/python-basic-06/</id>
    <published>2014-08-12T16:14:05.000Z</published>
    <updated>2015-05-10T07:35:18.179Z</updated>
    <content type="html"><![CDATA[<p>正如<a href="http://songlee24.github.io/2014/08/12/python-FAQ-01/" target="_blank" rel="external">Python FAQ1附录</a>中说的， Python中任何值都是一个对象，所以任何类型（int、str、list…）都是一个类。而类就必然有它的方法或属性，我们要记下这么多类的所有方法显然是不可能的，这里介绍两个小技巧：</p>
<ul>
<li><strong>dir()</strong> ：内置函数，用来查询一个类或者对象所有属性，比如<code>&gt;&gt;&gt; dir(list)</code>。</li>
<li><strong>help()</strong> ：内置函数，用来查询具体的说明文档，比如<code>&gt;&gt;&gt; help(int)</code>。</li>
</ul>
<p>在<a href="http://songlee24.github.io/2014/08/08/python-basic-02/" target="_blank" rel="external">Python的基本数据类型</a>中，我们初步了解了list列表，也介绍了列表是Python 中使用最频繁的数据类型。本文将进一步深入学习列表的使用。<br><a id="more"></a><br></p>
<h3 id="一、列表的方法">一、列表的方法</h3><p>list.<strong>append</strong>(x)<br>在列表的尾部添加一个项，等价于 <code>a[len(a):] = [x]</code>。</p>
<p>list.<strong>extend</strong>(L)<br>将给定的列表L接到当前列表后面，等价于 <code>a[len(a):] = L</code>。</p>
<p>list.<strong>insert</strong>(i, x)<br>在给定的位置 i 前插入项，例如：a.insert(0, x) 会在列表的头部插入，而 a.insert(len(a), x) 则等价于 a.append(x)。</p>
<p>list.<strong>remove</strong>(x)<br>移除列表中第一个值为 x 的项，没有的话会产生一个错误。</p>
<p>list.<strong>pop</strong>([i])<br>删除列表给定位置的项，并返回它。如果没有指定索引，<code>a.pop()</code> 移除并返回列表的最后一项。（方括号表示可选）</p>
<p>list.<strong>clear</strong>()<br> 删除列表中的所有项，相当于 <code>del a[:]</code>。</p>
<p>list.<strong>index</strong>(x)<br>返回列表中第一个值为 x 的项的索引。如果没有匹配的项, 则产生一个错误。</p>
<p>list.<strong>count</strong>(x)<br>返回列表中 x 出现的次数。</p>
<p>list.<strong>sort</strong>()<br>就地完成列表排序。</p>
<p>list.<strong>reverse</strong>()<br>就地完成列表项的翻转。</p>
<p>list.<strong>copy</strong>()<br>返回列表的一个浅拷贝，相当于<code>a[:]</code>。<br><br></p>
<h3 id="二、列表当栈">二、列表当栈</h3><p>List的方法使得其可以很方便地作为一个<strong>栈</strong>来使用。我们知道，栈的特点是最后进入的元素最先出来（即后入先出），用<code>append()</code>方法进行压栈，用不指定索引的<code>pop()</code>方法进行出栈。</p>
<p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">stack = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">	stack.append(x)   <span class="comment"># 入栈</span></span><br><span class="line">	print(<span class="string">'push'</span>, x, end=<span class="string">' '</span>)</span><br><span class="line">	print(stack)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Now stack is'</span>, stack)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(stack)&gt;<span class="number">0</span>:</span><br><span class="line">	print(<span class="string">'pop'</span>, stack.pop(), end=<span class="string">' '</span>) <span class="comment"># 出栈</span></span><br><span class="line">	print(stack)</span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="三、列表当队列">三、列表当队列</h3><p>列表还可以当作<strong>队列</strong>来使用，队列的特性是第一个加入的元素第一个取出来（即先入先出）。然而，把列表当队列使用效率并不高，因为从列表的尾部添加和弹出元素是很快的，而在列表的开头插入或弹出是比较慢的（因为所有元素都得移动一个位置）。</p>
<p>要实现一个队列, 使用标准库的<a href="https://docs.python.org/3.4/library/collections.html#collections.deque" target="_blank" rel="external">collections.deque</a>， 它被设计成在两端添加和弹出都很快。示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from collections import <span class="built_in">deque</span></span><br><span class="line"><span class="built_in">queue</span> = <span class="built_in">deque</span>()       <span class="preprocessor"># 创建空队列</span></span><br><span class="line"><span class="function"><span class="keyword">for</span> x in <span class="title">range</span><span class="params">(1,6)</span>:</span><br><span class="line">	<span class="built_in">queue</span>.<span class="title">append</span><span class="params">(x)</span>   # 入队</span><br><span class="line">	<span class="title">print</span><span class="params">('push', x, end=' ')</span></span><br><span class="line">	<span class="title">print</span><span class="params">(<span class="built_in">list</span>(<span class="built_in">queue</span>)</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">print</span><span class="params">('Now <span class="built_in">queue</span> is', <span class="built_in">list</span>(<span class="built_in">queue</span>)</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="title">len</span><span class="params">(<span class="built_in">queue</span>)</span>&gt;0:</span><br><span class="line">	<span class="title">print</span><span class="params">('pop', <span class="built_in">queue</span>.popleft()</span>, end</span>=<span class="string">' '</span>)  <span class="preprocessor"># 出队</span></span><br><span class="line">	print(<span class="built_in">list</span>(<span class="built_in">queue</span>))</span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h3 id="四、列表推导式">四、列表推导式</h3><p>列表推导式提供了从序列创建列表的简单途径。通常程序会对序列的每一个元素做些操作，并以其结果作为新列表的元素，或者根据指定的条件来创建子序列。</p>
<p>列表推导式的结构是：在一个<strong>方括号</strong>里，首先是一个表达式，随后是一个 for 子句，然后是零个或更多的 for 或 if 子句。返回结果是一个根据表达从其后的 for 和 if 上下文环境中生成出来的列表。 示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]  <span class="comment"># 推导式</span></span><br><span class="line"><span class="built_in">print</span>(squares)</span><br><span class="line"><span class="comment"># 输出是[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pairs = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>] <span class="keyword">if</span> x!=y]  <span class="comment"># 推导式</span></span><br><span class="line"><span class="built_in">print</span>(pairs)</span><br><span class="line"><span class="comment"># 输出是[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<h3 id="五、列表嵌套">五、列表嵌套</h3><p>Python中并没有二维数组的概念，但我们可以通过<strong>列表嵌套</strong>达到同样的目的。<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="atom">mat</span> = [</span><br><span class="line">		[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">		[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">		[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">	  ]</span><br></pre></td></tr></table></figure></p>
<p>同样，我们可以使用推导式生成嵌套的列表：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mat = <span class="string">[[1,2,3], [4,5,6], [7,8,9]]</span></span><br><span class="line">new_mat = [ [row[i] <span class="keyword">for</span> row <span class="keyword">in</span> mat] <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>] ] # 嵌套</span><br><span class="line"><span class="built_in">print</span>(new_mat)</span><br></pre></td></tr></table></figure></p>
<p><br><br><br><br><br><strong>附：del语句</strong></p>
<p><code>del</code>语句可以通过给定索引（而不是值）来删除列表中的项，它与返回一个值的<strong>pop()</strong>方法不同。del语句也可以移除列表中的切片，或者清除整个列表 ：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">del</span> lst[<span class="number">2</span>]    <span class="comment"># 删除指定索引项</span></span><br><span class="line">print(lst)    </span><br><span class="line"><span class="keyword">del</span> lst[<span class="number">2</span>:<span class="number">5</span>]  <span class="comment"># 删除切片</span></span><br><span class="line">print(lst)</span><br><span class="line"><span class="keyword">del</span> lst[:]    <span class="comment"># 删除整个列表</span></span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure></p>
<p>del也可以用于删除变量实体：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">del</span> lst</span><br></pre></td></tr></table></figure></p>
<p>在删除变量实体之后引用 <strong>lst</strong> 的话会产生错误。</p>
<p>（全文完）</p>
<p><br><br><br><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>正如<a href="http://songlee24.github.io/2014/08/12/python-FAQ-01/">Python FAQ1附录</a>中说的， Python中任何值都是一个对象，所以任何类型（int、str、list…）都是一个类。而类就必然有它的方法或属性，我们要记下这么多类的所有方法显然是不可能的，这里介绍两个小技巧：</p>
<ul>
<li><strong>dir()</strong> ：内置函数，用来查询一个类或者对象所有属性，比如<code>&gt;&gt;&gt; dir(list)</code>。</li>
<li><strong>help()</strong> ：内置函数，用来查询具体的说明文档，比如<code>&gt;&gt;&gt; help(int)</code>。</li>
</ul>
<p>在<a href="http://songlee24.github.io/2014/08/08/python-basic-02/">Python的基本数据类型</a>中，我们初步了解了list列表，也介绍了列表是Python 中使用最频繁的数据类型。本文将进一步深入学习列表的使用。<br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Lang.-Python" scheme="http://yoursite.com/categories/Lang-Python/"/>
    
  </entry>
  
</feed>